{
    "(*errors.errorString).Error": [
        [0],
        [0]
    ],
    "(*fmt.buffer).write": [
        [0, 1]
    ],
    "(*fmt.buffer).writeByte": [
        [0, 1]
    ],
    "(*fmt.buffer).writeRune": [
        [0, 1]
    ],
    "(*fmt.buffer).writeString": [
        [0, 1]
    ],
    "(*fmt.fmt).clearflags": [
        [0]
    ],
    "(*fmt.fmt).fmtBoolean": [
        [0]
    ],
    "(*fmt.fmt).fmtBs": [
        [0, 1]
    ],
    "(*fmt.fmt).fmtBx": [
        [0]
    ],
    "(*fmt.fmt).fmtC": [
        [0]
    ],
    "(*fmt.fmt).fmtFloat": [
        [0, 1, 3, 4]
    ],
    "(*fmt.fmt).fmtInteger": [
        [0, 1, 5]
    ],
    "(*fmt.fmt).fmtQ": [
        [0, 1]
    ],
    "(*fmt.fmt).fmtQc": [
        [0]
    ],
    "(*fmt.fmt).fmtS": [
        [0, 1]
    ],
    "(*fmt.fmt).fmtSbx": [
        [0]
    ],
    "(*fmt.fmt).fmtSx": [
        [0]
    ],
    "(*fmt.fmt).fmtUnicode": [
        [0, 1]
    ],
    "(*fmt.fmt).init": [
        [0]
    ],
    "(*fmt.fmt).pad": [
        [0, 1]
    ],
    "(*fmt.fmt).padString": [
        [0, 1]
    ],
    "(*fmt.fmt).truncate": [
        [0],
        [1]
    ],
    "(*fmt.fmt).truncateString": [
        [0],
        [1]
    ],
    "(*fmt.fmt).writePadding": [
        [0]
    ],
    "(*fmt.pp).Flag": [
        [0],
        [0]
    ],
    "(*fmt.pp).Precision": [
        [0],
        [0],
        [0]
    ],
    "(*fmt.pp).Width": [
        [0],
        [0],
        [0]
    ],
    "(*fmt.pp).Write": [
        [0, 1],
        [],
        []
    ],
    "(*fmt.pp).WriteString": [
        [0, 1],
        [],
        []
    ],
    "(*fmt.pp).argNumber": [
        [0],
        [1, 2],
        [3],
        []
    ],
    "(*fmt.pp).badArgNum": [
        [0, 1]
    ],
    "(*fmt.pp).badVerb": [
        [0, 1]
    ],
    "(*fmt.pp).catchPanic": [
        [0]
    ],
    "(*fmt.pp).doPrint": [
        [0, 1]
    ],
    "(*fmt.pp).doPrintf": [
        [0, 1, 2]
    ],
    "(*fmt.pp).doPrintln": [
        [0, 1]
    ],
    "(*fmt.pp).fmt0x64": [
        [0, 1]
    ],
    "(*fmt.pp).fmtBool": [
        [0]
    ],
    "(*fmt.pp).fmtBytes": [
        [0, 1, 3]
    ],
    "(*fmt.pp).fmtComplex": [
        [0, 3]
    ],
    "(*fmt.pp).fmtFloat": [
        [0, 1, 3]
    ],
    "(*fmt.pp).fmtInteger": [
        [0, 1, 3]
    ],
    "(*fmt.pp).fmtPointer": [
        [0, 1]
    ],
    "(*fmt.pp).fmtString": [
        [0, 1]
    ],
    "(*fmt.pp).free": [
        [0]
    ],
    "(*fmt.pp).handleMethods": [
        [0],
        []
    ],
    "(*fmt.pp).missingArg": [
        [0, 1]
    ],
    "(*fmt.pp).printArg": [
        [0, 1, 2]
    ],
    "(*fmt.pp).printValue": [
        [0, 1, 2]
    ],
    "(*fmt.pp).unknownType": [
        [0]
    ],
    "(*fmt.readRune).ReadRune": [
        [0],
        [0],
        [],
        []
    ],
    "(*fmt.readRune).UnreadRune": [
        [0],
        []
    ],
    "(*fmt.readRune).readByte": [
        [0],
        [0],
        []
    ],
    "(*fmt.ss).Read": [
        [0],
        [],
        []
    ],
    "(*fmt.ss).ReadRune": [
        [0],
        [],
        [],
        []
    ],
    "(*fmt.ss).SkipSpace": [
        [0]
    ],
    "(*fmt.ss).Token": [
        [0],
        [0],
        []
    ],
    "(*fmt.ss).Token$1": [],
    "(*fmt.ss).UnreadRune": [
        [0],
        []
    ],
    "(*fmt.ss).Width": [
        [0],
        [0],
        []
    ],
    "(*fmt.ss).accept": [
        [0],
        []
    ],
    "(*fmt.ss).advance": [
        [0],
        []
    ],
    "(*fmt.ss).complexTokens": [
        [0],
        [0],
        [0]
    ],
    "(*fmt.ss).consume": [
        [0],
        []
    ],
    "(*fmt.ss).convertFloat": [
        [0],
        [1]
    ],
    "(*fmt.ss).convertString": [
        [0],
        [0]
    ],
    "(*fmt.ss).doScan": [
        [0],
        [],
        []
    ],
    "(*fmt.ss).doScanf": [
        [0],
        [],
        []
    ],
    "(*fmt.ss).error": [
        [0]
    ],
    "(*fmt.ss).errorString": [
        [0]
    ],
    "(*fmt.ss).floatToken": [
        [0],
        [0]
    ],
    "(*fmt.ss).free": [
        [0, 1]
    ],
    "(*fmt.ss).getBase": [
        [0],
        [],
        []
    ],
    "(*fmt.ss).getRune": [
        [0],
        []
    ],
    "(*fmt.ss).hexByte": [
        [0],
        [],
        []
    ],
    "(*fmt.ss).hexString": [
        [0],
        [0]
    ],
    "(*fmt.ss).mustReadRune": [
        [0],
        []
    ],
    "(*fmt.ss).notEOF": [
        [0]
    ],
    "(*fmt.ss).okVerb": [
        [0],
        []
    ],
    "(*fmt.ss).peek": [
        [0],
        [1]
    ],
    "(*fmt.ss).quotedString": [
        [0],
        [0]
    ],
    "(*fmt.ss).scanBasePrefix": [
        [0],
        [],
        [],
        []
    ],
    "(*fmt.ss).scanBool": [
        [0],
        []
    ],
    "(*fmt.ss).scanComplex": [
        [0],
        []
    ],
    "(*fmt.ss).scanInt": [
        [0],
        [0]
    ],
    "(*fmt.ss).scanNumber": [
        [0],
        [0]
    ],
    "(*fmt.ss).scanOne": [
        [0]
    ],
    "(*fmt.ss).scanPercent": [
        [0]
    ],
    "(*fmt.ss).scanRune": [
        [0],
        []
    ],
    "(*fmt.ss).scanUint": [
        [0],
        [0]
    ],
    "(*fmt.ss).token": [
        [0],
        [0]
    ],
    "(*fmt.stringReader).Read": [
        [0],
        [],
        []
    ],
    "(*fmt.wrapError).Error": [
        [0],
        [0]
    ],
    "(*fmt.wrapError).Unwrap": [
        [0],
        [0]
    ],
    "(*internal/abi.IntArgRegBitmap).Get": [
        [0],
        [0, 1]
    ],
    "(*internal/abi.IntArgRegBitmap).Set": [
        [0, 1]
    ],
    "(*internal/abi.RegArgs).Dump": [
        [0]
    ],
    "(*internal/abi.RegArgs).IntRegArgAddr": [
        [0],
        [0, 2]
    ],
    "(*internal/fmtsort.SortedMap).Len": [
        [0],
        []
    ],
    "(*internal/fmtsort.SortedMap).Less": [
        [0],
        []
    ],
    "(*internal/fmtsort.SortedMap).Swap": [
        [0]
    ],
    "(*internal/poll.DeadlineExceededError).Error": [
        [0],
        []
    ],
    "(*internal/poll.DeadlineExceededError).Temporary": [
        [0],
        []
    ],
    "(*internal/poll.DeadlineExceededError).Timeout": [
        [0],
        []
    ],
    "(*internal/poll.FD).Accept": [
        [0],
        [],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).Close": [
        [0],
        []
    ],
    "(*internal/poll.FD).Dup": [
        [0],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).Fchdir": [
        [0],
        []
    ],
    "(*internal/poll.FD).Fchmod": [
        [0],
        []
    ],
    "(*internal/poll.FD).Fchmod$1": [
        []
    ],
    "(*internal/poll.FD).Fchown": [
        [0],
        []
    ],
    "(*internal/poll.FD).Fchown$1": [
        []
    ],
    "(*internal/poll.FD).Fstat": [
        [0],
        []
    ],
    "(*internal/poll.FD).Fstat$1": [
        []
    ],
    "(*internal/poll.FD).Fsync": [
        [0],
        []
    ],
    "(*internal/poll.FD).Fsync$1": [
        []
    ],
    "(*internal/poll.FD).Ftruncate": [
        [0],
        []
    ],
    "(*internal/poll.FD).Ftruncate$1": [
        []
    ],
    "(*internal/poll.FD).Init": [
        [0],
        []
    ],
    "(*internal/poll.FD).OpenDir": [
        [0],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).Pread": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).Pwrite": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).RawControl": [
        [0],
        []
    ],
    "(*internal/poll.FD).RawRead": [
        [0],
        []
    ],
    "(*internal/poll.FD).RawWrite": [
        [0],
        []
    ],
    "(*internal/poll.FD).Read": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).ReadDirent": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).ReadFrom": [
        [0],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).ReadFromInet4": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).ReadFromInet6": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).ReadMsg": [
        [0],
        [],
        [1, 2],
        [1, 2],
        [],
        []
    ],
    "(*internal/poll.FD).ReadMsgInet4": [
        [0],
        [],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).ReadMsgInet6": [
        [0],
        [],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).Seek": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).SetBlocking": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetDeadline": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetReadDeadline": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetWriteDeadline": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetsockoptByte": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetsockoptIPMreq": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetsockoptIPv6Mreq": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetsockoptInet4Addr": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetsockoptInt": [
        [0],
        []
    ],
    "(*internal/poll.FD).SetsockoptLinger": [
        [0],
        []
    ],
    "(*internal/poll.FD).Shutdown": [
        [0],
        []
    ],
    "(*internal/poll.FD).WaitWrite": [
        [0],
        []
    ],
    "(*internal/poll.FD).Write": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).WriteMsg": [
        [0],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).WriteMsgInet4": [
        [0],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).WriteMsgInet6": [
        [0],
        [],
        [],
        []
    ],
    "(*internal/poll.FD).WriteOnce": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).WriteTo": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).WriteToInet4": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).WriteToInet6": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).Writev": [
        [0],
        [],
        []
    ],
    "(*internal/poll.FD).decref": [
        [0],
        []
    ],
    "(*internal/poll.FD).destroy": [
        [0],
        []
    ],
    "(*internal/poll.FD).eofError": [
        [0],
        [2]
    ],
    "(*internal/poll.FD).incref": [
        [0],
        []
    ],
    "(*internal/poll.FD).readLock": [
        [0],
        []
    ],
    "(*internal/poll.FD).readUnlock": [
        [0]
    ],
    "(*internal/poll.FD).writeLock": [
        [0],
        []
    ],
    "(*internal/poll.FD).writeUnlock": [
        [0]
    ],
    "(*internal/poll.errNetClosing).Error": [
        [0],
        []
    ],
    "(*internal/poll.errNetClosing).Temporary": [
        [0],
        []
    ],
    "(*internal/poll.errNetClosing).Timeout": [
        [0],
        []
    ],
    "(*internal/poll.fdMutex).decref": [
        [0],
        []
    ],
    "(*internal/poll.fdMutex).incref": [
        [0],
        []
    ],
    "(*internal/poll.fdMutex).increfAndClose": [
        [0],
        []
    ],
    "(*internal/poll.fdMutex).rwlock": [
        [0],
        []
    ],
    "(*internal/poll.fdMutex).rwunlock": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).close": [
        [0]
    ],
    "(*internal/poll.pollDesc).evict": [
        [0]
    ],
    "(*internal/poll.pollDesc).init": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).pollable": [
        [0],
        [0]
    ],
    "(*internal/poll.pollDesc).prepare": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).prepareRead": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).prepareWrite": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).wait": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).waitCanceled": [
        [0]
    ],
    "(*internal/poll.pollDesc).waitRead": [
        [0],
        []
    ],
    "(*internal/poll.pollDesc).waitWrite": [
        [0],
        []
    ],
    "(*internal/reflectlite.Kind).String": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).CanSet": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).Elem": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).IsNil": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).IsValid": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).Kind": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).Len": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).Set": [
        [0]
    ],
    "(*internal/reflectlite.Value).Type": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).assignTo": [
        [0],
        [2, 3]
    ],
    "(*internal/reflectlite.Value).kind": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.Value).mustBeAssignable": [
        [0]
    ],
    "(*internal/reflectlite.Value).mustBeExported": [
        [0]
    ],
    "(*internal/reflectlite.Value).numMethod": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).pointer": [
        [0],
        []
    ],
    "(*internal/reflectlite.Value).ro": [
        [0],
        []
    ],
    "(*internal/reflectlite.ValueError).Error": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.flag).kind": [
        [0],
        []
    ],
    "(*internal/reflectlite.flag).mustBeAssignable": [
        [0]
    ],
    "(*internal/reflectlite.flag).mustBeExported": [
        [0]
    ],
    "(*internal/reflectlite.flag).ro": [
        [0],
        []
    ],
    "(*internal/reflectlite.funcType).in": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.funcType).out": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.interfaceType).NumMethod": [
        [0],
        []
    ],
    "(*internal/reflectlite.name).data": [
        [0],
        [1]
    ],
    "(*internal/reflectlite.name).hasTag": [
        [0],
        []
    ],
    "(*internal/reflectlite.name).isExported": [
        [0],
        []
    ],
    "(*internal/reflectlite.name).name": [
        [0],
        []
    ],
    "(*internal/reflectlite.name).pkgPath": [
        [0],
        []
    ],
    "(*internal/reflectlite.name).readVarint": [
        [0],
        [],
        [1]
    ],
    "(*internal/reflectlite.name).tag": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).AssignableTo": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).Comparable": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).Elem": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).Implements": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).In": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).Key": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).Kind": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).Len": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).Name": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).NumField": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).NumIn": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).NumMethod": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).NumOut": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).Out": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).PkgPath": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).Size": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).String": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).chanDir": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).common": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).exportedMethods": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).hasName": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).nameOff": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).pointers": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.rtype).typeOff": [
        [0],
        []
    ],
    "(*internal/reflectlite.rtype).uncommon": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.uncommonType).exportedMethods": [
        [0],
        [0]
    ],
    "(*internal/reflectlite.uncommonType).methods": [
        [0],
        [0]
    ],
    "(*io.LimitedReader).Read": [
        [0],
        [],
        []
    ],
    "(*io.PipeReader).Close": [
        [0],
        []
    ],
    "(*io.PipeReader).CloseWithError": [
        [0],
        []
    ],
    "(*io.PipeReader).Read": [
        [0],
        [],
        [0]
    ],
    "(*io.PipeWriter).Close": [
        [0],
        []
    ],
    "(*io.PipeWriter).CloseWithError": [
        [0],
        []
    ],
    "(*io.PipeWriter).Write": [
        [0],
        [0],
        [0]
    ],
    "(*io.SectionReader).Read": [
        [0],
        [],
        []
    ],
    "(*io.SectionReader).ReadAt": [
        [0],
        [],
        []
    ],
    "(*io.SectionReader).Seek": [
        [0, 1],
        [0, 1],
        []
    ],
    "(*io.SectionReader).Size": [
        [0],
        [0]
    ],
    "(*io.discard).ReadFrom": [
        [0],
        [],
        []
    ],
    "(*io.discard).Write": [
        [0],
        [],
        []
    ],
    "(*io.discard).WriteString": [
        [0],
        [],
        []
    ],
    "(*io.eofReader).Read": [
        [0],
        [],
        []
    ],
    "(*io.multiReader).Read": [
        [0],
        [],
        []
    ],
    "(*io.multiWriter).Write": [
        [0],
        [],
        []
    ],
    "(*io.multiWriter).WriteString": [
        [0],
        [],
        []
    ],
    "(*io.nopCloser).Close": [
        [0],
        []
    ],
    "(*io.nopCloser).Read": [
        [0],
        [],
        []
    ],
    "(*io.onceError).Load": [
        [0],
        [0]
    ],
    "(*io.onceError).Lock": [
        [0]
    ],
    "(*io.onceError).Store": [
        [0, 1]
    ],
    "(*io.onceError).TryLock": [
        [0],
        []
    ],
    "(*io.onceError).Unlock": [
        [0]
    ],
    "(*io.onceError).lockSlow": [
        [0]
    ],
    "(*io.onceError).unlockSlow": [
        [0]
    ],
    "(*io.pipe).closeRead": [
        [0],
        []
    ],
    "(*io.pipe).closeRead$1": [],
    "(*io.pipe).closeWrite": [
        [0],
        []
    ],
    "(*io.pipe).closeWrite$1": [],
    "(*io.pipe).read": [
        [0],
        [],
        [0]
    ],
    "(*io.pipe).readCloseError": [
        [0],
        [0]
    ],
    "(*io.pipe).write": [
        [0],
        [0],
        [0]
    ],
    "(*io.pipe).writeCloseError": [
        [0],
        [0]
    ],
    "(*io.teeReader).Read": [
        [0],
        [],
        []
    ],
    "(*io/fs.FileMode).IsDir": [
        [0],
        []
    ],
    "(*io/fs.FileMode).IsRegular": [
        [0],
        []
    ],
    "(*io/fs.FileMode).Perm": [
        [0],
        []
    ],
    "(*io/fs.FileMode).String": [
        [0],
        []
    ],
    "(*io/fs.FileMode).Type": [
        [0],
        []
    ],
    "(*io/fs.PathError).Error": [
        [0],
        [0]
    ],
    "(*io/fs.PathError).Timeout": [
        [0],
        []
    ],
    "(*io/fs.PathError).Unwrap": [
        [0],
        [0]
    ],
    "(*io/fs.dirInfo).Info": [
        [0],
        [],
        []
    ],
    "(*io/fs.dirInfo).IsDir": [
        [0],
        []
    ],
    "(*io/fs.dirInfo).Name": [
        [0],
        []
    ],
    "(*io/fs.dirInfo).Type": [
        [0],
        []
    ],
    "(*io/fs.statDirEntry).Info": [
        [0],
        [0],
        []
    ],
    "(*io/fs.statDirEntry).IsDir": [
        [0],
        []
    ],
    "(*io/fs.statDirEntry).Name": [
        [0],
        []
    ],
    "(*io/fs.statDirEntry).Type": [
        [0],
        []
    ],
    "(*io/fs.subFS).Glob": [
        [0],
        [0, 1],
        [0, 1]
    ],
    "(*io/fs.subFS).Open": [
        [0],
        [],
        [1]
    ],
    "(*io/fs.subFS).ReadDir": [
        [0],
        [],
        [0, 1]
    ],
    "(*io/fs.subFS).ReadFile": [
        [0],
        [],
        [1]
    ],
    "(*io/fs.subFS).Sub": [
        [0],
        [0, 1],
        [1]
    ],
    "(*io/fs.subFS).fixErr": [
        [0],
        [1]
    ],
    "(*io/fs.subFS).fullName": [
        [0],
        [0, 2],
        [1, 2]
    ],
    "(*io/fs.subFS).shorten": [
        [0],
        [1],
        []
    ],
    "(*os.File).Chdir": [
        [0],
        [0]
    ],
    "(*os.File).Chmod": [
        [0],
        [0]
    ],
    "(*os.File).Chown": [
        [0],
        [0]
    ],
    "(*os.File).Close": [
        [0],
        [0]
    ],
    "(*os.File).Fd": [
        [0],
        [0]
    ],
    "(*os.File).Name": [
        [0],
        [0]
    ],
    "(*os.File).Read": [
        [0],
        [],
        [0]
    ],
    "(*os.File).ReadAt": [
        [0],
        [],
        [0]
    ],
    "(*os.File).ReadDir": [
        [0],
        [0],
        [0]
    ],
    "(*os.File).ReadFrom": [
        [0],
        [],
        [0]
    ],
    "(*os.File).Readdir": [
        [0],
        [],
        [0]
    ],
    "(*os.File).Readdirnames": [
        [0],
        [],
        [0]
    ],
    "(*os.File).Seek": [
        [0],
        [],
        [0]
    ],
    "(*os.File).SetDeadline": [
        [0],
        []
    ],
    "(*os.File).SetReadDeadline": [
        [0],
        []
    ],
    "(*os.File).SetWriteDeadline": [
        [0],
        []
    ],
    "(*os.File).Stat": [
        [0],
        [],
        [0]
    ],
    "(*os.File).Sync": [
        [0],
        [0]
    ],
    "(*os.File).SyscallConn": [
        [0],
        [0],
        []
    ],
    "(*os.File).Truncate": [
        [0],
        [0]
    ],
    "(*os.File).Write": [
        [0],
        [],
        [0]
    ],
    "(*os.File).WriteAt": [
        [0],
        [],
        [0]
    ],
    "(*os.File).WriteString": [
        [0],
        [],
        [0]
    ],
    "(*os.File).checkValid": [
        [0],
        []
    ],
    "(*os.File).chmod": [
        [0],
        [0]
    ],
    "(*os.File).close": [
        [0],
        [0]
    ],
    "(*os.File).pread": [
        [0],
        [],
        []
    ],
    "(*os.File).pwrite": [
        [0],
        [],
        []
    ],
    "(*os.File).read": [
        [0],
        [],
        []
    ],
    "(*os.File).readFrom": [
        [0],
        [],
        [],
        []
    ],
    "(*os.File).readdir": [
        [0],
        [],
        [0],
        [],
        [0]
    ],
    "(*os.File).seek": [
        [0],
        [],
        []
    ],
    "(*os.File).setDeadline": [
        [0],
        []
    ],
    "(*os.File).setReadDeadline": [
        [0],
        []
    ],
    "(*os.File).setWriteDeadline": [
        [0],
        []
    ],
    "(*os.File).wrapErr": [
        [0],
        [0, 1, 2]
    ],
    "(*os.File).write": [
        [0],
        [],
        []
    ],
    "(*os.LinkError).Error": [
        [0],
        [0]
    ],
    "(*os.LinkError).Unwrap": [
        [0],
        [0]
    ],
    "(*os.Process).Kill": [
        [0],
        []
    ],
    "(*os.Process).Release": [
        [0],
        []
    ],
    "(*os.Process).Release$thunk": [
        []
    ],
    "(*os.Process).Signal": [
        [0],
        []
    ],
    "(*os.Process).Wait": [
        [0],
        [],
        []
    ],
    "(*os.Process).blockUntilWaitable": [
        [0],
        [],
        []
    ],
    "(*os.Process).done": [
        [0],
        []
    ],
    "(*os.Process).kill": [
        [0],
        []
    ],
    "(*os.Process).release": [
        [0],
        []
    ],
    "(*os.Process).setDone": [
        [0]
    ],
    "(*os.Process).signal": [
        [0],
        []
    ],
    "(*os.Process).wait": [
        [0],
        [],
        []
    ],
    "(*os.ProcessState).ExitCode": [
        [0],
        [0]
    ],
    "(*os.ProcessState).Exited": [
        [0],
        [0]
    ],
    "(*os.ProcessState).Pid": [
        [0],
        [0]
    ],
    "(*os.ProcessState).String": [
        [0],
        [0]
    ],
    "(*os.ProcessState).Success": [
        [0],
        [0]
    ],
    "(*os.ProcessState).Sys": [
        [0],
        [0]
    ],
    "(*os.ProcessState).SysUsage": [
        [0],
        [0]
    ],
    "(*os.ProcessState).SystemTime": [
        [0],
        [0]
    ],
    "(*os.ProcessState).UserTime": [
        [0],
        [0]
    ],
    "(*os.ProcessState).exited": [
        [0],
        [0]
    ],
    "(*os.ProcessState).success": [
        [0],
        [0]
    ],
    "(*os.ProcessState).sys": [
        [0],
        [0]
    ],
    "(*os.ProcessState).sysUsage": [
        [0],
        [0]
    ],
    "(*os.ProcessState).systemTime": [
        [0],
        [0]
    ],
    "(*os.ProcessState).userTime": [
        [0],
        [0]
    ],
    "(*os.SyscallError).Error": [
        [0],
        [0]
    ],
    "(*os.SyscallError).Timeout": [
        [0],
        []
    ],
    "(*os.SyscallError).Unwrap": [
        [0],
        [0]
    ],
    "(*os.dirFS).Open": [
        [0],
        [1],
        [1]
    ],
    "(*os.dirFS).Stat": [
        [0],
        [],
        [1]
    ],
    "(*os.dirInfo).close": [
        [0]
    ],
    "(*os.file).close": [
        [0],
        [0]
    ],
    "(*os.file).close$thunk": [
        [0]
    ],
    "(*os.fileStat).IsDir": [
        [0],
        [0]
    ],
    "(*os.fileStat).ModTime": [
        [0],
        [0]
    ],
    "(*os.fileStat).Mode": [
        [0],
        [0]
    ],
    "(*os.fileStat).Name": [
        [0],
        [0]
    ],
    "(*os.fileStat).Size": [
        [0],
        [0]
    ],
    "(*os.fileStat).Sys": [
        [0],
        [0]
    ],
    "(*os.onlyWriter).Write": [
        [0],
        [],
        []
    ],
    "(*os.rawConn).Control": [
        [0],
        []
    ],
    "(*os.rawConn).Read": [
        [0],
        []
    ],
    "(*os.rawConn).Write": [
        [0],
        []
    ],
    "(*os.unixDirent).Info": [
        [0],
        [0],
        [0]
    ],
    "(*os.unixDirent).IsDir": [
        [0],
        [0]
    ],
    "(*os.unixDirent).Name": [
        [0],
        [0]
    ],
    "(*os.unixDirent).Type": [
        [0],
        [0]
    ],
    "(*path.lazybuf).append": [
        [0]
    ],
    "(*path.lazybuf).index": [
        [0],
        [0, 1]
    ],
    "(*path.lazybuf).string": [
        [0],
        [0]
    ],
    "(*reflect.ChanDir).String": [
        [0],
        []
    ],
    "(*reflect.Kind).String": [
        [0],
        []
    ],
    "(*reflect.MapIter).Key": [
        [0],
        [0]
    ],
    "(*reflect.MapIter).Next": [
        [0],
        []
    ],
    "(*reflect.MapIter).Reset": [
        [0, 1]
    ],
    "(*reflect.MapIter).Value": [
        [0],
        [0]
    ],
    "(*reflect.Method).IsExported": [
        [0],
        []
    ],
    "(*reflect.StructField).IsExported": [
        [0],
        []
    ],
    "(*reflect.StructTag).Get": [
        [0],
        []
    ],
    "(*reflect.StructTag).Lookup": [
        [0],
        [],
        []
    ],
    "(*reflect.Value).Addr": [
        [0],
        []
    ],
    "(*reflect.Value).Bool": [
        [0],
        []
    ],
    "(*reflect.Value).Bytes": [
        [0],
        []
    ],
    "(*reflect.Value).Call": [
        [0],
        []
    ],
    "(*reflect.Value).CallSlice": [
        [0],
        []
    ],
    "(*reflect.Value).CanAddr": [
        [0],
        []
    ],
    "(*reflect.Value).CanComplex": [
        [0],
        []
    ],
    "(*reflect.Value).CanConvert": [
        [0],
        []
    ],
    "(*reflect.Value).CanFloat": [
        [0],
        []
    ],
    "(*reflect.Value).CanInt": [
        [0],
        []
    ],
    "(*reflect.Value).CanInterface": [
        [0],
        []
    ],
    "(*reflect.Value).CanSet": [
        [0],
        []
    ],
    "(*reflect.Value).CanUint": [
        [0],
        []
    ],
    "(*reflect.Value).Cap": [
        [0],
        []
    ],
    "(*reflect.Value).Close": [
        [0]
    ],
    "(*reflect.Value).Complex": [
        [0],
        []
    ],
    "(*reflect.Value).Convert": [
        [0],
        []
    ],
    "(*reflect.Value).Elem": [
        [0],
        []
    ],
    "(*reflect.Value).Field": [
        [0],
        []
    ],
    "(*reflect.Value).FieldByIndex": [
        [0],
        []
    ],
    "(*reflect.Value).FieldByIndexErr": [
        [0],
        [],
        []
    ],
    "(*reflect.Value).FieldByName": [
        [0],
        []
    ],
    "(*reflect.Value).FieldByNameFunc": [
        [0],
        []
    ],
    "(*reflect.Value).Float": [
        [0],
        []
    ],
    "(*reflect.Value).Index": [
        [0],
        [1]
    ],
    "(*reflect.Value).Int": [
        [0],
        []
    ],
    "(*reflect.Value).Interface": [
        [0],
        []
    ],
    "(*reflect.Value).InterfaceData": [
        [0],
        []
    ],
    "(*reflect.Value).IsNil": [
        [0],
        []
    ],
    "(*reflect.Value).IsValid": [
        [0],
        []
    ],
    "(*reflect.Value).IsZero": [
        [0],
        []
    ],
    "(*reflect.Value).Kind": [
        [0],
        []
    ],
    "(*reflect.Value).Len": [
        [0],
        []
    ],
    "(*reflect.Value).MapIndex": [
        [0],
        []
    ],
    "(*reflect.Value).MapKeys": [
        [0],
        []
    ],
    "(*reflect.Value).MapRange": [
        [0],
        []
    ],
    "(*reflect.Value).Method": [
        [0],
        [1]
    ],
    "(*reflect.Value).MethodByName": [
        [0],
        []
    ],
    "(*reflect.Value).NumField": [
        [0],
        []
    ],
    "(*reflect.Value).NumMethod": [
        [0],
        []
    ],
    "(*reflect.Value).OverflowComplex": [
        [0],
        []
    ],
    "(*reflect.Value).OverflowFloat": [
        [0],
        [1]
    ],
    "(*reflect.Value).OverflowInt": [
        [0],
        [1]
    ],
    "(*reflect.Value).OverflowUint": [
        [0],
        [1]
    ],
    "(*reflect.Value).Pointer": [
        [0],
        []
    ],
    "(*reflect.Value).Recv": [
        [0],
        [],
        []
    ],
    "(*reflect.Value).Send": [
        [0]
    ],
    "(*reflect.Value).Set": [
        [0]
    ],
    "(*reflect.Value).SetBool": [
        [0]
    ],
    "(*reflect.Value).SetBytes": [
        [0]
    ],
    "(*reflect.Value).SetCap": [
        [0]
    ],
    "(*reflect.Value).SetComplex": [
        [0]
    ],
    "(*reflect.Value).SetFloat": [
        [0]
    ],
    "(*reflect.Value).SetInt": [
        [0]
    ],
    "(*reflect.Value).SetIterKey": [
        [0]
    ],
    "(*reflect.Value).SetIterValue": [
        [0]
    ],
    "(*reflect.Value).SetLen": [
        [0]
    ],
    "(*reflect.Value).SetMapIndex": [
        [0]
    ],
    "(*reflect.Value).SetPointer": [
        [0]
    ],
    "(*reflect.Value).SetString": [
        [0]
    ],
    "(*reflect.Value).SetUint": [
        [0]
    ],
    "(*reflect.Value).Slice": [
        [0],
        [1, 2]
    ],
    "(*reflect.Value).Slice3": [
        [0],
        []
    ],
    "(*reflect.Value).String": [
        [0],
        []
    ],
    "(*reflect.Value).TryRecv": [
        [0],
        [],
        []
    ],
    "(*reflect.Value).TrySend": [
        [0],
        []
    ],
    "(*reflect.Value).Type": [
        [0],
        []
    ],
    "(*reflect.Value).Uint": [
        [0],
        []
    ],
    "(*reflect.Value).UnsafeAddr": [
        [0],
        []
    ],
    "(*reflect.Value).UnsafePointer": [
        [0],
        []
    ],
    "(*reflect.Value).assignTo": [
        [0],
        [2, 3]
    ],
    "(*reflect.Value).call": [
        [0],
        []
    ],
    "(*reflect.Value).kind": [
        [0],
        [0]
    ],
    "(*reflect.Value).mustBe": [
        [0]
    ],
    "(*reflect.Value).mustBeAssignable": [
        [0]
    ],
    "(*reflect.Value).mustBeAssignableSlow": [
        [0]
    ],
    "(*reflect.Value).mustBeExported": [
        [0]
    ],
    "(*reflect.Value).mustBeExportedSlow": [
        [0]
    ],
    "(*reflect.Value).pointer": [
        [0],
        []
    ],
    "(*reflect.Value).recv": [
        [0],
        [],
        []
    ],
    "(*reflect.Value).ro": [
        [0],
        []
    ],
    "(*reflect.Value).runes": [
        [0],
        []
    ],
    "(*reflect.Value).send": [
        [0],
        []
    ],
    "(*reflect.Value).setRunes": [
        [0]
    ],
    "(*reflect.ValueError).Error": [
        [0],
        [0]
    ],
    "(*reflect.abiDesc).dump": [
        [0]
    ],
    "(*reflect.abiSeq).addArg": [
        [0, 1],
        [0, 1]
    ],
    "(*reflect.abiSeq).addRcvr": [
        [0],
        [0],
        []
    ],
    "(*reflect.abiSeq).assignFloatN": [
        [0, 1, 2],
        []
    ],
    "(*reflect.abiSeq).assignIntN": [
        [0, 1, 2],
        []
    ],
    "(*reflect.abiSeq).dump": [
        [0]
    ],
    "(*reflect.abiSeq).regAssign": [
        [0, 1, 2],
        []
    ],
    "(*reflect.abiSeq).stackAssign": [
        [0, 1, 2]
    ],
    "(*reflect.abiSeq).stepsForValue": [
        [0],
        [0]
    ],
    "(*reflect.bitVector).append": [
        [0]
    ],
    "(*reflect.flag).kind": [
        [0],
        []
    ],
    "(*reflect.flag).mustBe": [
        [0]
    ],
    "(*reflect.flag).mustBeAssignable": [
        [0]
    ],
    "(*reflect.flag).mustBeAssignableSlow": [
        [0]
    ],
    "(*reflect.flag).mustBeExported": [
        [0]
    ],
    "(*reflect.flag).mustBeExportedSlow": [
        [0]
    ],
    "(*reflect.flag).ro": [
        [0],
        []
    ],
    "(*reflect.funcType).Align": [
        [0],
        [0]
    ],
    "(*reflect.funcType).AssignableTo": [
        [0],
        []
    ],
    "(*reflect.funcType).Bits": [
        [0],
        [0]
    ],
    "(*reflect.funcType).ChanDir": [
        [0],
        [0]
    ],
    "(*reflect.funcType).Comparable": [
        [0],
        [0]
    ],
    "(*reflect.funcType).ConvertibleTo": [
        [0],
        []
    ],
    "(*reflect.funcType).Elem": [
        [0],
        [0]
    ],
    "(*reflect.funcType).Field": [
        [0],
        [0, 1]
    ],
    "(*reflect.funcType).FieldAlign": [
        [0],
        [0]
    ],
    "(*reflect.funcType).FieldByIndex": [
        [0],
        [0]
    ],
    "(*reflect.funcType).FieldByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.funcType).FieldByNameFunc": [
        [0],
        [],
        []
    ],
    "(*reflect.funcType).Implements": [
        [0],
        []
    ],
    "(*reflect.funcType).In": [
        [0],
        [0]
    ],
    "(*reflect.funcType).IsVariadic": [
        [0],
        [0]
    ],
    "(*reflect.funcType).Key": [
        [0],
        [0]
    ],
    "(*reflect.funcType).Kind": [
        [0],
        [0]
    ],
    "(*reflect.funcType).Len": [
        [0],
        [0]
    ],
    "(*reflect.funcType).Method": [
        [0],
        [0, 1]
    ],
    "(*reflect.funcType).MethodByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.funcType).Name": [
        [0],
        []
    ],
    "(*reflect.funcType).NumField": [
        [0],
        []
    ],
    "(*reflect.funcType).NumIn": [
        [0],
        [0]
    ],
    "(*reflect.funcType).NumMethod": [
        [0],
        []
    ],
    "(*reflect.funcType).NumOut": [
        [0],
        []
    ],
    "(*reflect.funcType).Out": [
        [0],
        [0]
    ],
    "(*reflect.funcType).PkgPath": [
        [0],
        []
    ],
    "(*reflect.funcType).Size": [
        [0],
        [0]
    ],
    "(*reflect.funcType).String": [
        [0],
        []
    ],
    "(*reflect.funcType).common": [
        [0],
        [0]
    ],
    "(*reflect.funcType).exportedMethods": [
        [0],
        [0]
    ],
    "(*reflect.funcType).gcSlice": [
        [0],
        [0]
    ],
    "(*reflect.funcType).hasName": [
        [0],
        [0]
    ],
    "(*reflect.funcType).in": [
        [0],
        [0]
    ],
    "(*reflect.funcType).nameOff": [
        [0],
        []
    ],
    "(*reflect.funcType).out": [
        [0],
        [0]
    ],
    "(*reflect.funcType).pointers": [
        [0],
        [0]
    ],
    "(*reflect.funcType).ptrTo": [
        [0],
        [0]
    ],
    "(*reflect.funcType).textOff": [
        [0],
        []
    ],
    "(*reflect.funcType).typeOff": [
        [0],
        []
    ],
    "(*reflect.funcType).uncommon": [
        [0],
        [0]
    ],
    "(*reflect.hiter).initialized": [
        [0],
        [0]
    ],
    "(*reflect.interfaceType).Method": [
        [0],
        [1]
    ],
    "(*reflect.interfaceType).MethodByName": [
        [0],
        [],
        []
    ],
    "(*reflect.interfaceType).NumMethod": [
        [0],
        []
    ],
    "(*reflect.name).data": [
        [0],
        [1]
    ],
    "(*reflect.name).hasTag": [
        [0],
        []
    ],
    "(*reflect.name).isExported": [
        [0],
        []
    ],
    "(*reflect.name).name": [
        [0],
        []
    ],
    "(*reflect.name).pkgPath": [
        [0],
        []
    ],
    "(*reflect.name).readVarint": [
        [0],
        [],
        [1]
    ],
    "(*reflect.name).tag": [
        [0],
        []
    ],
    "(*reflect.ptrType).Align": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).AssignableTo": [
        [0],
        []
    ],
    "(*reflect.ptrType).Bits": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).ChanDir": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).Comparable": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).ConvertibleTo": [
        [0],
        []
    ],
    "(*reflect.ptrType).Elem": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).Field": [
        [0],
        [0, 1]
    ],
    "(*reflect.ptrType).FieldAlign": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).FieldByIndex": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).FieldByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.ptrType).FieldByNameFunc": [
        [0],
        [],
        []
    ],
    "(*reflect.ptrType).Implements": [
        [0],
        []
    ],
    "(*reflect.ptrType).In": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).IsVariadic": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).Key": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).Kind": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).Len": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).Method": [
        [0],
        [0, 1]
    ],
    "(*reflect.ptrType).MethodByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.ptrType).Name": [
        [0],
        []
    ],
    "(*reflect.ptrType).NumField": [
        [0],
        []
    ],
    "(*reflect.ptrType).NumIn": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).NumMethod": [
        [0],
        []
    ],
    "(*reflect.ptrType).NumOut": [
        [0],
        []
    ],
    "(*reflect.ptrType).Out": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).PkgPath": [
        [0],
        []
    ],
    "(*reflect.ptrType).Size": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).String": [
        [0],
        []
    ],
    "(*reflect.ptrType).common": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).exportedMethods": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).gcSlice": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).hasName": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).nameOff": [
        [0],
        []
    ],
    "(*reflect.ptrType).pointers": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).ptrTo": [
        [0],
        [0]
    ],
    "(*reflect.ptrType).textOff": [
        [0],
        []
    ],
    "(*reflect.ptrType).typeOff": [
        [0],
        []
    ],
    "(*reflect.ptrType).uncommon": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Align": [
        [0],
        [0]
    ],
    "(*reflect.rtype).AssignableTo": [
        [0],
        []
    ],
    "(*reflect.rtype).Bits": [
        [0],
        [0]
    ],
    "(*reflect.rtype).ChanDir": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Comparable": [
        [0],
        [0]
    ],
    "(*reflect.rtype).ConvertibleTo": [
        [0],
        []
    ],
    "(*reflect.rtype).Elem": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Field": [
        [0],
        [0, 1]
    ],
    "(*reflect.rtype).FieldAlign": [
        [0],
        [0]
    ],
    "(*reflect.rtype).FieldByIndex": [
        [0],
        [0]
    ],
    "(*reflect.rtype).FieldByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.rtype).FieldByNameFunc": [
        [0],
        [],
        []
    ],
    "(*reflect.rtype).Implements": [
        [0],
        []
    ],
    "(*reflect.rtype).In": [
        [0],
        [0]
    ],
    "(*reflect.rtype).IsVariadic": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Key": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Kind": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Len": [
        [0],
        [0]
    ],
    "(*reflect.rtype).Method": [
        [0],
        [0, 1]
    ],
    "(*reflect.rtype).MethodByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.rtype).Name": [
        [0],
        []
    ],
    "(*reflect.rtype).NumField": [
        [0],
        []
    ],
    "(*reflect.rtype).NumIn": [
        [0],
        [0]
    ],
    "(*reflect.rtype).NumMethod": [
        [0],
        []
    ],
    "(*reflect.rtype).NumOut": [
        [0],
        []
    ],
    "(*reflect.rtype).Out": [
        [0],
        [0]
    ],
    "(*reflect.rtype).PkgPath": [
        [0],
        []
    ],
    "(*reflect.rtype).Size": [
        [0],
        [0]
    ],
    "(*reflect.rtype).String": [
        [0],
        []
    ],
    "(*reflect.rtype).common": [
        [0],
        [0]
    ],
    "(*reflect.rtype).exportedMethods": [
        [0],
        [0]
    ],
    "(*reflect.rtype).gcSlice": [
        [0],
        [0]
    ],
    "(*reflect.rtype).hasName": [
        [0],
        [0]
    ],
    "(*reflect.rtype).nameOff": [
        [0],
        []
    ],
    "(*reflect.rtype).pointers": [
        [0],
        [0]
    ],
    "(*reflect.rtype).ptrTo": [
        [0],
        [0]
    ],
    "(*reflect.rtype).textOff": [
        [0],
        []
    ],
    "(*reflect.rtype).typeOff": [
        [0],
        []
    ],
    "(*reflect.rtype).uncommon": [
        [0],
        [0]
    ],
    "(*reflect.structField).embedded": [
        [0],
        [0]
    ],
    "(*reflect.structField).offset": [
        [0],
        [0]
    ],
    "(*reflect.structType).Align": [
        [0],
        [0]
    ],
    "(*reflect.structType).AssignableTo": [
        [0],
        []
    ],
    "(*reflect.structType).Bits": [
        [0],
        [0]
    ],
    "(*reflect.structType).ChanDir": [
        [0],
        [0]
    ],
    "(*reflect.structType).Comparable": [
        [0],
        [0]
    ],
    "(*reflect.structType).ConvertibleTo": [
        [0],
        []
    ],
    "(*reflect.structType).Elem": [
        [0],
        [0]
    ],
    "(*reflect.structType).Field": [
        [0],
        [0, 1]
    ],
    "(*reflect.structType).FieldAlign": [
        [0],
        [0]
    ],
    "(*reflect.structType).FieldByIndex": [
        [0],
        [0]
    ],
    "(*reflect.structType).FieldByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.structType).FieldByName$1": [
        [0]
    ],
    "(*reflect.structType).FieldByNameFunc": [
        [0],
        [],
        []
    ],
    "(*reflect.structType).Implements": [
        [0],
        []
    ],
    "(*reflect.structType).In": [
        [0],
        [0]
    ],
    "(*reflect.structType).IsVariadic": [
        [0],
        [0]
    ],
    "(*reflect.structType).Key": [
        [0],
        [0]
    ],
    "(*reflect.structType).Kind": [
        [0],
        [0]
    ],
    "(*reflect.structType).Len": [
        [0],
        [0]
    ],
    "(*reflect.structType).Method": [
        [0],
        [0, 1]
    ],
    "(*reflect.structType).MethodByName": [
        [0],
        [0],
        []
    ],
    "(*reflect.structType).Name": [
        [0],
        []
    ],
    "(*reflect.structType).NumField": [
        [0],
        []
    ],
    "(*reflect.structType).NumIn": [
        [0],
        [0]
    ],
    "(*reflect.structType).NumMethod": [
        [0],
        []
    ],
    "(*reflect.structType).NumOut": [
        [0],
        []
    ],
    "(*reflect.structType).Out": [
        [0],
        [0]
    ],
    "(*reflect.structType).PkgPath": [
        [0],
        []
    ],
    "(*reflect.structType).Size": [
        [0],
        [0]
    ],
    "(*reflect.structType).String": [
        [0],
        []
    ],
    "(*reflect.structType).common": [
        [0],
        [0]
    ],
    "(*reflect.structType).exportedMethods": [
        [0],
        [0]
    ],
    "(*reflect.structType).gcSlice": [
        [0],
        [0]
    ],
    "(*reflect.structType).hasName": [
        [0],
        [0]
    ],
    "(*reflect.structType).nameOff": [
        [0],
        []
    ],
    "(*reflect.structType).pointers": [
        [0],
        [0]
    ],
    "(*reflect.structType).ptrTo": [
        [0],
        [0]
    ],
    "(*reflect.structType).textOff": [
        [0],
        []
    ],
    "(*reflect.structType).typeOff": [
        [0],
        []
    ],
    "(*reflect.structType).uncommon": [
        [0],
        [0]
    ],
    "(*reflect.uncommonType).exportedMethods": [
        [0],
        [0]
    ],
    "(*reflect.uncommonType).methods": [
        [0],
        [0]
    ],
    "(*reflect.visibleFieldsWalker).walk": [
        [0]
    ],
    "(*runtime.BlockProfileRecord).Stack": [
        [0],
        [0]
    ],
    "(*runtime.Frames).Next": [
        [0],
        [0],
        []
    ],
    "(*runtime.Func).Entry": [
        [0],
        [0]
    ],
    "(*runtime.Func).FileLine": [
        [0],
        [0],
        [0]
    ],
    "(*runtime.Func).Name": [
        [0],
        [0]
    ],
    "(*runtime.Func).funcInfo": [
        [0],
        [0]
    ],
    "(*runtime.Func).raw": [
        [0],
        [0]
    ],
    "(*runtime.MemProfileRecord).InUseBytes": [
        [0],
        [0]
    ],
    "(*runtime.MemProfileRecord).InUseObjects": [
        [0],
        [0]
    ],
    "(*runtime.MemProfileRecord).Stack": [
        [0],
        [0]
    ],
    "(*runtime.StackRecord).Stack": [
        [0],
        [0]
    ],
    "(*runtime.TypeAssertionError).Error": [
        [0],
        [0]
    ],
    "(*runtime.TypeAssertionError).RuntimeError": [
        [0]
    ],
    "(*runtime._func).funcInfo": [
        [0],
        [0]
    ],
    "(*runtime._func).isInlined": [
        [0],
        [0]
    ],
    "(*runtime._type).name": [
        [0],
        []
    ],
    "(*runtime._type).nameOff": [
        [0],
        [1]
    ],
    "(*runtime._type).pkgpath": [
        [0],
        []
    ],
    "(*runtime._type).string": [
        [0],
        []
    ],
    "(*runtime._type).textOff": [
        [0],
        [1]
    ],
    "(*runtime._type).typeOff": [
        [0],
        [1]
    ],
    "(*runtime._type).uncommon": [
        [0],
        [0]
    ],
    "(*runtime.activeSweep).begin": [
        [0],
        []
    ],
    "(*runtime.activeSweep).end": [
        [0]
    ],
    "(*runtime.activeSweep).isDone": [
        [0],
        [0]
    ],
    "(*runtime.activeSweep).markDrained": [
        [0],
        []
    ],
    "(*runtime.activeSweep).reset": [
        [0]
    ],
    "(*runtime.activeSweep).sweepers": [
        [0],
        [0]
    ],
    "(*runtime.addrRange).contains": [
        [0],
        [1]
    ],
    "(*runtime.addrRange).removeGreaterEqual": [
        [0],
        [1]
    ],
    "(*runtime.addrRange).size": [
        [0],
        []
    ],
    "(*runtime.addrRange).subtract": [
        [0],
        [1]
    ],
    "(*runtime.addrRanges).add": [
        [0, 1]
    ],
    "(*runtime.addrRanges).cloneInto": [
        [0]
    ],
    "(*runtime.addrRanges).contains": [
        [0],
        [0, 1]
    ],
    "(*runtime.addrRanges).findAddrGreaterEqual": [
        [0],
        [0, 1],
        []
    ],
    "(*runtime.addrRanges).findSucc": [
        [0],
        []
    ],
    "(*runtime.addrRanges).init": [
        [0, 1]
    ],
    "(*runtime.addrRanges).removeGreaterEqual": [
        [0, 1]
    ],
    "(*runtime.addrRanges).removeLast": [
        [0, 1],
        [0, 1]
    ],
    "(*runtime.bitvector).ptrbit": [
        [0],
        [0, 1]
    ],
    "(*runtime.bmap).keys": [
        [0],
        [0]
    ],
    "(*runtime.bmap).overflow": [
        [0],
        [0, 1]
    ],
    "(*runtime.bmap).setoverflow": [
        [0]
    ],
    "(*runtime.boundsError).Error": [
        [0],
        []
    ],
    "(*runtime.boundsError).RuntimeError": [
        [0]
    ],
    "(*runtime.bucket).bp": [
        [0],
        [0]
    ],
    "(*runtime.bucket).mp": [
        [0],
        [0]
    ],
    "(*runtime.bucket).stk": [
        [0],
        [0]
    ],
    "(*runtime.chunkIdx).l1": [
        [0],
        []
    ],
    "(*runtime.chunkIdx).l2": [
        [0],
        []
    ],
    "(*runtime.consistentHeapStats).acquire": [
        [0],
        [0]
    ],
    "(*runtime.consistentHeapStats).read": [
        [0]
    ],
    "(*runtime.consistentHeapStats).release": [
        [0]
    ],
    "(*runtime.consistentHeapStats).unsafeRead": [
        [0]
    ],
    "(*runtime.cpuProfile).add": [
        [0]
    ],
    "(*runtime.cpuProfile).addExtra": [
        [0]
    ],
    "(*runtime.cpuProfile).addNonGo": [
        [0]
    ],
    "(*runtime.debugLogReader).header": [
        [0],
        [0],
        [0],
        [0],
        [0]
    ],
    "(*runtime.debugLogReader).peek": [
        [0],
        [0]
    ],
    "(*runtime.debugLogReader).printVal": [
        [0],
        []
    ],
    "(*runtime.debugLogReader).readUint16LEAt": [
        [0],
        [0]
    ],
    "(*runtime.debugLogReader).readUint64LEAt": [
        [0],
        [0]
    ],
    "(*runtime.debugLogReader).skip": [
        [0],
        [0]
    ],
    "(*runtime.debugLogReader).uvarint": [
        [0],
        [0]
    ],
    "(*runtime.debugLogReader).varint": [
        [0],
        [0]
    ],
    "(*runtime.debugLogWriter).bytes": [
        [0]
    ],
    "(*runtime.debugLogWriter).ensure": [
        [0]
    ],
    "(*runtime.debugLogWriter).uvarint": [
        [0]
    ],
    "(*runtime.debugLogWriter).varint": [
        [0]
    ],
    "(*runtime.debugLogWriter).writeFrameAt": [
        [0],
        [2]
    ],
    "(*runtime.debugLogWriter).writeSync": [
        [0]
    ],
    "(*runtime.debugLogWriter).writeUint64LE": [
        [0]
    ],
    "(*runtime.errorAddressString).Addr": [
        [0],
        []
    ],
    "(*runtime.errorAddressString).Error": [
        [0],
        []
    ],
    "(*runtime.errorAddressString).RuntimeError": [
        [0]
    ],
    "(*runtime.errorString).Error": [
        [0],
        []
    ],
    "(*runtime.errorString).RuntimeError": [
        [0]
    ],
    "(*runtime.fixalloc).alloc": [
        [0],
        [0]
    ],
    "(*runtime.fixalloc).free": [
        [0, 1]
    ],
    "(*runtime.fixalloc).init": [
        [0, 1, 2, 3, 4]
    ],
    "(*runtime.funcInfo)._Func": [
        [0],
        []
    ],
    "(*runtime.funcInfo).entry": [
        [0],
        []
    ],
    "(*runtime.funcInfo).funcInfo": [
        [0],
        [0]
    ],
    "(*runtime.funcInfo).isInlined": [
        [0],
        [0]
    ],
    "(*runtime.funcInfo).valid": [
        [0],
        []
    ],
    "(*runtime.functype).dotdotdot": [
        [0],
        [0]
    ],
    "(*runtime.functype).in": [
        [0],
        [0]
    ],
    "(*runtime.functype).out": [
        [0],
        [0]
    ],
    "(*runtime.gList).empty": [
        [0],
        [0]
    ],
    "(*runtime.gList).pop": [
        [0],
        [0]
    ],
    "(*runtime.gList).push": [
        [0, 1]
    ],
    "(*runtime.gList).pushAll": [
        [0, 1]
    ],
    "(*runtime.gQueue).empty": [
        [0],
        [0]
    ],
    "(*runtime.gQueue).pop": [
        [0],
        [0]
    ],
    "(*runtime.gQueue).popList": [
        [0],
        [0]
    ],
    "(*runtime.gQueue).push": [
        [0, 1]
    ],
    "(*runtime.gQueue).pushBack": [
        [0, 1]
    ],
    "(*runtime.gQueue).pushBackAll": [
        [0, 1]
    ],
    "(*runtime.gcBits).bitp": [
        [0],
        [0, 1],
        [1]
    ],
    "(*runtime.gcBits).bytep": [
        [0],
        [0, 1]
    ],
    "(*runtime.gcBitsArena).tryAlloc": [
        [0],
        [0]
    ],
    "(*runtime.gcControllerState).addGlobals": [
        [0]
    ],
    "(*runtime.gcControllerState).addScannableStack": [
        [0]
    ],
    "(*runtime.gcControllerState).commit": [
        [0, 1]
    ],
    "(*runtime.gcControllerState).effectiveGrowthRatio": [
        [0],
        [0]
    ],
    "(*runtime.gcControllerState).endCycle": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "(*runtime.gcControllerState).enlistWorker": [
        [0]
    ],
    "(*runtime.gcControllerState).findRunnableGCWorker": [
        [0],
        []
    ],
    "(*runtime.gcControllerState).findRunnableGCWorker$1": [
        []
    ],
    "(*runtime.gcControllerState).init": [
        [0, 1]
    ],
    "(*runtime.gcControllerState).logWorkTime": [
        [0]
    ],
    "(*runtime.gcControllerState).oldCommit": [
        [0, 1]
    ],
    "(*runtime.gcControllerState).resetLive": [
        [0, 1]
    ],
    "(*runtime.gcControllerState).revise": [
        [0]
    ],
    "(*runtime.gcControllerState).setGCPercent": [
        [0, 1],
        []
    ],
    "(*runtime.gcControllerState).startCycle": [
        [0]
    ],
    "(*runtime.gcControllerState).update": [
        [0]
    ],
    "(*runtime.gcWork).balance": [
        [0]
    ],
    "(*runtime.gcWork).dispose": [
        [0]
    ],
    "(*runtime.gcWork).empty": [
        [0],
        [0]
    ],
    "(*runtime.gcWork).init": [
        [0]
    ],
    "(*runtime.gcWork).put": [
        [0]
    ],
    "(*runtime.gcWork).putBatch": [
        [0]
    ],
    "(*runtime.gcWork).putFast": [
        [0],
        []
    ],
    "(*runtime.gcWork).tryGet": [
        [0],
        [0]
    ],
    "(*runtime.gcWork).tryGetFast": [
        [0],
        [0]
    ],
    "(*runtime.gclinkptr).ptr": [
        [0],
        []
    ],
    "(*runtime.guintptr).cas": [
        [0],
        []
    ],
    "(*runtime.guintptr).ptr": [
        [0],
        []
    ],
    "(*runtime.guintptr).set": [
        [0, 1]
    ],
    "(*runtime.hchan).raceaddr": [
        [0],
        [0]
    ],
    "(*runtime.hchan).sortkey": [
        [0],
        [0]
    ],
    "(*runtime.headTailIndex).cas": [
        [0],
        []
    ],
    "(*runtime.headTailIndex).incTail": [
        [0],
        []
    ],
    "(*runtime.headTailIndex).load": [
        [0],
        [0]
    ],
    "(*runtime.headTailIndex).reset": [
        [0]
    ],
    "(*runtime.heapStatsAggregate).compute": [
        [0]
    ],
    "(*runtime.heapStatsDelta).merge": [
        [0, 1]
    ],
    "(*runtime.hmap).createOverflow": [
        [0]
    ],
    "(*runtime.hmap).growing": [
        [0],
        [0]
    ],
    "(*runtime.hmap).incrnoverflow": [
        [0]
    ],
    "(*runtime.hmap).newoverflow": [
        [0],
        [0, 1]
    ],
    "(*runtime.hmap).noldbuckets": [
        [0],
        [0]
    ],
    "(*runtime.hmap).oldbucketmask": [
        [0],
        [0]
    ],
    "(*runtime.hmap).sameSizeGrow": [
        [0],
        [0]
    ],
    "(*runtime.itab).init": [
        [0],
        []
    ],
    "(*runtime.itabTableType).add": [
        [0]
    ],
    "(*runtime.itabTableType).add$bound": [],
    "(*runtime.itabTableType).find": [
        [0],
        [0, 1, 2]
    ],
    "(*runtime.lfstack).empty": [
        [0],
        [0]
    ],
    "(*runtime.lfstack).pop": [
        [0],
        [0]
    ],
    "(*runtime.lfstack).push": [
        [0]
    ],
    "(*runtime.linearAlloc).alloc": [
        [0, 1, 2],
        [0, 2]
    ],
    "(*runtime.linearAlloc).init": [
        [0, 1, 2, 3]
    ],
    "(*runtime.lockRank).String": [
        [0],
        []
    ],
    "(*runtime.mSpanList).init": [
        [0]
    ],
    "(*runtime.mSpanList).insert": [
        [0, 1]
    ],
    "(*runtime.mSpanList).insertBack": [
        [0, 1]
    ],
    "(*runtime.mSpanList).isEmpty": [
        [0],
        [0]
    ],
    "(*runtime.mSpanList).remove": [
        [0, 1]
    ],
    "(*runtime.mSpanList).takeAll": [
        [0, 1]
    ],
    "(*runtime.mSpanStateBox).get": [
        [0],
        [0]
    ],
    "(*runtime.mSpanStateBox).set": [
        [0]
    ],
    "(*runtime.maptype).hashMightPanic": [
        [0],
        [0]
    ],
    "(*runtime.maptype).indirectelem": [
        [0],
        [0]
    ],
    "(*runtime.maptype).indirectkey": [
        [0],
        [0]
    ],
    "(*runtime.maptype).needkeyupdate": [
        [0],
        [0]
    ],
    "(*runtime.maptype).reflexivekey": [
        [0],
        [0]
    ],
    "(*runtime.markBits).advance": [
        [0]
    ],
    "(*runtime.markBits).clearMarked": [
        [0]
    ],
    "(*runtime.markBits).isMarked": [
        [0],
        []
    ],
    "(*runtime.markBits).setMarked": [
        [0]
    ],
    "(*runtime.markBits).setMarkedNonAtomic": [
        [0]
    ],
    "(*runtime.mcache).allocLarge": [
        [0],
        [1]
    ],
    "(*runtime.mcache).nextFree": [
        [0],
        [0],
        [0],
        []
    ],
    "(*runtime.mcache).prepareForSweep": [
        [0]
    ],
    "(*runtime.mcache).refill": [
        [0]
    ],
    "(*runtime.mcache).releaseAll": [
        [0]
    ],
    "(*runtime.mcentral).cacheSpan": [
        [0],
        [0]
    ],
    "(*runtime.mcentral).fullSwept": [
        [0],
        [0]
    ],
    "(*runtime.mcentral).fullUnswept": [
        [0],
        [0]
    ],
    "(*runtime.mcentral).grow": [
        [0],
        []
    ],
    "(*runtime.mcentral).init": [
        [0, 1]
    ],
    "(*runtime.mcentral).partialSwept": [
        [0],
        [0]
    ],
    "(*runtime.mcentral).partialUnswept": [
        [0],
        [0]
    ],
    "(*runtime.mcentral).uncacheSpan": [
        [0]
    ],
    "(*runtime.memRecordCycle).add": [
        [0, 1]
    ],
    "(*runtime.metricValue).float64HistOrInit": [
        [0],
        [0, 1]
    ],
    "(*runtime.mheap).alloc": [
        [0],
        []
    ],
    "(*runtime.mheap).alloc$1": [],
    "(*runtime.mheap).allocMSpanLocked": [
        [0],
        [0]
    ],
    "(*runtime.mheap).allocManual": [
        [0, 1],
        [0, 1]
    ],
    "(*runtime.mheap).allocNeedsZero": [
        [0],
        []
    ],
    "(*runtime.mheap).allocSpan": [
        [0, 1],
        [0, 1, 3]
    ],
    "(*runtime.mheap).freeMSpanLocked": [
        [0, 1]
    ],
    "(*runtime.mheap).freeManual": [
        [0, 1]
    ],
    "(*runtime.mheap).freeSpan": [
        [0]
    ],
    "(*runtime.mheap).freeSpan$1": [],
    "(*runtime.mheap).freeSpanLocked": [
        [0, 1]
    ],
    "(*runtime.mheap).grow": [
        [0, 1],
        [0, 1],
        []
    ],
    "(*runtime.mheap).init": [
        [0]
    ],
    "(*runtime.mheap).nextSpanForSweep": [
        [0],
        [0]
    ],
    "(*runtime.mheap).reclaim": [
        [0]
    ],
    "(*runtime.mheap).reclaimChunk": [
        [0],
        [0]
    ],
    "(*runtime.mheap).scavengeAll": [
        [0]
    ],
    "(*runtime.mheap).setSpans": [
        [0]
    ],
    "(*runtime.mheap).sysAlloc": [
        [0, 1],
        [0, 1],
        [1]
    ],
    "(*runtime.mheap).tryAllocMSpan": [
        [0],
        []
    ],
    "(*runtime.moduledata).textAddr": [
        [0],
        [0, 1]
    ],
    "(*runtime.moduledata).textOff": [
        [0],
        [0, 1],
        []
    ],
    "(*runtime.mspan).allocBitsForIndex": [
        [0],
        [0, 1]
    ],
    "(*runtime.mspan).base": [
        [0],
        [0]
    ],
    "(*runtime.mspan).countAlloc": [
        [0],
        [0]
    ],
    "(*runtime.mspan).divideByElemSize": [
        [0],
        [0, 1]
    ],
    "(*runtime.mspan).ensureSwept": [
        [0]
    ],
    "(*runtime.mspan).inList": [
        [0],
        [0]
    ],
    "(*runtime.mspan).init": [
        [0, 1, 2]
    ],
    "(*runtime.mspan).isFree": [
        [0],
        [0, 1]
    ],
    "(*runtime.mspan).layout": [
        [0],
        [0],
        [0],
        [0]
    ],
    "(*runtime.mspan).markBitsForBase": [
        [0],
        [0]
    ],
    "(*runtime.mspan).markBitsForIndex": [
        [0],
        [0, 1]
    ],
    "(*runtime.mspan).nextFreeIndex": [
        [0],
        [0]
    ],
    "(*runtime.mspan).objIndex": [
        [0],
        [0, 1]
    ],
    "(*runtime.mspan).refillAllocCache": [
        [0, 1]
    ],
    "(*runtime.mspan).reportZombies": [
        [0]
    ],
    "(*runtime.muintptr).ptr": [
        [0],
        []
    ],
    "(*runtime.muintptr).set": [
        [0, 1]
    ],
    "(*runtime.name).data": [
        [0],
        [1]
    ],
    "(*runtime.name).isBlank": [
        [0],
        []
    ],
    "(*runtime.name).isExported": [
        [0],
        []
    ],
    "(*runtime.name).name": [
        [0],
        []
    ],
    "(*runtime.name).pkgPath": [
        [0],
        []
    ],
    "(*runtime.name).readvarint": [
        [0],
        [],
        [1]
    ],
    "(*runtime.name).tag": [
        [0],
        []
    ],
    "(*runtime.notInHeap).add": [
        [0],
        [0, 1]
    ],
    "(*runtime.offAddr).add": [
        [0],
        [1]
    ],
    "(*runtime.offAddr).addr": [
        [0],
        []
    ],
    "(*runtime.offAddr).diff": [
        [0],
        [1]
    ],
    "(*runtime.offAddr).equal": [
        [0],
        [1]
    ],
    "(*runtime.offAddr).lessEqual": [
        [0],
        [1]
    ],
    "(*runtime.offAddr).lessThan": [
        [0],
        [1]
    ],
    "(*runtime.offAddr).sub": [
        [0],
        [1]
    ],
    "(*runtime.p).destroy": [
        [0]
    ],
    "(*runtime.p).destroy$1": [],
    "(*runtime.p).init": [
        [0, 1]
    ],
    "(*runtime.pageAlloc).alloc": [
        [0],
        [0],
        [0, 1]
    ],
    "(*runtime.pageAlloc).allocRange": [
        [0],
        [0, 1, 2]
    ],
    "(*runtime.pageAlloc).allocToCache": [
        [0],
        [0]
    ],
    "(*runtime.pageAlloc).chunkOf": [
        [0],
        [0]
    ],
    "(*runtime.pageAlloc).find": [
        [0],
        [0],
        [0]
    ],
    "(*runtime.pageAlloc).find$1": [],
    "(*runtime.pageAlloc).findMappedAddr": [
        [0],
        [0, 1]
    ],
    "(*runtime.pageAlloc).free": [
        [0]
    ],
    "(*runtime.pageAlloc).grow": [
        [0]
    ],
    "(*runtime.pageAlloc).init": [
        [0, 1]
    ],
    "(*runtime.pageAlloc).scavenge": [
        [0],
        []
    ],
    "(*runtime.pageAlloc).scavenge$1": [],
    "(*runtime.pageAlloc).scavengeOne": [
        [0],
        [1, 2],
        [1, 2]
    ],
    "(*runtime.pageAlloc).scavengeOne$1": [
        [0],
        []
    ],
    "(*runtime.pageAlloc).scavengeOneFast": [
        [0],
        [1, 2, 3],
        [1, 2, 3]
    ],
    "(*runtime.pageAlloc).scavengeRangeLocked": [
        [0],
        [1, 2]
    ],
    "(*runtime.pageAlloc).scavengeReserve": [
        [0],
        [0],
        [0]
    ],
    "(*runtime.pageAlloc).scavengeStartGen": [
        [0]
    ],
    "(*runtime.pageAlloc).scavengeUnreserve": [
        [0]
    ],
    "(*runtime.pageAlloc).sysGrow": [
        [0]
    ],
    "(*runtime.pageAlloc).sysGrow$1": [
        [1],
        [1]
    ],
    "(*runtime.pageAlloc).sysGrow$2": [
        [1, 2]
    ],
    "(*runtime.pageAlloc).sysGrow$3": [
        [1]
    ],
    "(*runtime.pageAlloc).sysInit": [
        [0]
    ],
    "(*runtime.pageAlloc).tryChunkOf": [
        [0],
        [0]
    ],
    "(*runtime.pageAlloc).update": [
        [0]
    ],
    "(*runtime.pageBits).block64": [
        [0],
        [0]
    ],
    "(*runtime.pageBits).clear": [
        [0, 1]
    ],
    "(*runtime.pageBits).clearAll": [
        [0]
    ],
    "(*runtime.pageBits).clearBlock64": [
        [0, 2]
    ],
    "(*runtime.pageBits).clearRange": [
        [0, 1, 2]
    ],
    "(*runtime.pageBits).get": [
        [0],
        [0, 1]
    ],
    "(*runtime.pageBits).popcntRange": [
        [0],
        [0, 1, 2]
    ],
    "(*runtime.pageBits).set": [
        [0, 1]
    ],
    "(*runtime.pageBits).setAll": [
        [0]
    ],
    "(*runtime.pageBits).setBlock64": [
        [0, 2]
    ],
    "(*runtime.pageBits).setRange": [
        [0, 1, 2]
    ],
    "(*runtime.pageCache).alloc": [
        [0, 1],
        [0, 1],
        [0, 1]
    ],
    "(*runtime.pageCache).allocN": [
        [0, 1],
        [0, 1],
        [0, 1]
    ],
    "(*runtime.pageCache).empty": [
        [0],
        [0]
    ],
    "(*runtime.pageCache).flush": [
        [0]
    ],
    "(*runtime.pallocBits).allocAll": [
        [0]
    ],
    "(*runtime.pallocBits).allocPages64": [
        [0]
    ],
    "(*runtime.pallocBits).allocRange": [
        [0]
    ],
    "(*runtime.pallocBits).find": [
        [0],
        [2],
        [2]
    ],
    "(*runtime.pallocBits).find1": [
        [0],
        [1]
    ],
    "(*runtime.pallocBits).findLargeN": [
        [0],
        [2],
        [2]
    ],
    "(*runtime.pallocBits).findSmallN": [
        [0],
        [2],
        [2]
    ],
    "(*runtime.pallocBits).free": [
        [0]
    ],
    "(*runtime.pallocBits).free1": [
        [0]
    ],
    "(*runtime.pallocBits).freeAll": [
        [0]
    ],
    "(*runtime.pallocBits).pages64": [
        [0],
        [0]
    ],
    "(*runtime.pallocBits).summarize": [
        [0],
        []
    ],
    "(*runtime.pallocData).allocAll": [
        [0]
    ],
    "(*runtime.pallocData).allocPages64": [
        [0]
    ],
    "(*runtime.pallocData).allocRange": [
        [0, 1, 2]
    ],
    "(*runtime.pallocData).find": [
        [0],
        [2],
        [2]
    ],
    "(*runtime.pallocData).find1": [
        [0],
        [1]
    ],
    "(*runtime.pallocData).findLargeN": [
        [0],
        [2],
        [2]
    ],
    "(*runtime.pallocData).findScavengeCandidate": [
        [0],
        [1, 2, 3],
        [1, 2, 3]
    ],
    "(*runtime.pallocData).findSmallN": [
        [0],
        [2],
        [2]
    ],
    "(*runtime.pallocData).free": [
        [0]
    ],
    "(*runtime.pallocData).free1": [
        [0]
    ],
    "(*runtime.pallocData).freeAll": [
        [0]
    ],
    "(*runtime.pallocData).hasScavengeCandidate": [
        [0],
        []
    ],
    "(*runtime.pallocData).pages64": [
        [0],
        [0]
    ],
    "(*runtime.pallocData).summarize": [
        [0],
        []
    ],
    "(*runtime.pallocSum).end": [
        [0],
        []
    ],
    "(*runtime.pallocSum).max": [
        [0],
        []
    ],
    "(*runtime.pallocSum).start": [
        [0],
        []
    ],
    "(*runtime.pallocSum).unpack": [
        [0],
        [],
        [],
        []
    ],
    "(*runtime.piController).next": [
        [0, 1, 2, 3],
        [0, 1, 2],
        []
    ],
    "(*runtime.piController).reset": [
        [0]
    ],
    "(*runtime.plainError).Error": [
        [0],
        []
    ],
    "(*runtime.plainError).RuntimeError": [
        [0]
    ],
    "(*runtime.pollCache).alloc": [
        [0],
        [0]
    ],
    "(*runtime.pollCache).free": [
        [0, 1]
    ],
    "(*runtime.pollDesc).info": [
        [0],
        [0]
    ],
    "(*runtime.pollDesc).makeArg": [
        [0],
        []
    ],
    "(*runtime.pollDesc).publishInfo": [
        [0]
    ],
    "(*runtime.pollDesc).setEventErr": [
        [0]
    ],
    "(*runtime.pollInfo).closing": [
        [0],
        []
    ],
    "(*runtime.pollInfo).eventErr": [
        [0],
        []
    ],
    "(*runtime.pollInfo).expiredReadDeadline": [
        [0],
        []
    ],
    "(*runtime.pollInfo).expiredWriteDeadline": [
        [0],
        []
    ],
    "(*runtime.profAtomic).cas": [
        [0],
        []
    ],
    "(*runtime.profAtomic).load": [
        [0],
        [0]
    ],
    "(*runtime.profAtomic).store": [
        [0]
    ],
    "(*runtime.profBuf).canWriteRecord": [
        [0],
        [0, 1]
    ],
    "(*runtime.profBuf).canWriteTwoRecords": [
        [0],
        [0, 1, 2]
    ],
    "(*runtime.profBuf).close": [
        [0]
    ],
    "(*runtime.profBuf).hasOverflow": [
        [0],
        [0]
    ],
    "(*runtime.profBuf).incrementOverflow": [
        [0]
    ],
    "(*runtime.profBuf).read": [
        [0],
        [0],
        [0],
        []
    ],
    "(*runtime.profBuf).takeOverflow": [
        [0],
        [0],
        [0]
    ],
    "(*runtime.profBuf).wakeupExtra": [
        [0]
    ],
    "(*runtime.profBuf).write": [
        [0]
    ],
    "(*runtime.puintptr).ptr": [
        [0],
        []
    ],
    "(*runtime.puintptr).set": [
        [0, 1]
    ],
    "(*runtime.randomEnum).done": [
        [0],
        [0]
    ],
    "(*runtime.randomEnum).next": [
        [0]
    ],
    "(*runtime.randomEnum).position": [
        [0],
        [0]
    ],
    "(*runtime.randomOrder).reset": [
        [0, 1]
    ],
    "(*runtime.randomOrder).start": [
        [0],
        [0, 1]
    ],
    "(*runtime.rwmutex).lock": [
        [0]
    ],
    "(*runtime.rwmutex).lock$1": [],
    "(*runtime.rwmutex).rlock": [
        [0]
    ],
    "(*runtime.rwmutex).rlock$1": [],
    "(*runtime.rwmutex).runlock": [
        [0]
    ],
    "(*runtime.rwmutex).unlock": [
        [0]
    ],
    "(*runtime.semaRoot).dequeue": [
        [0],
        [0],
        []
    ],
    "(*runtime.semaRoot).queue": [
        [0, 1, 2]
    ],
    "(*runtime.semaRoot).rotateLeft": [
        [0, 1]
    ],
    "(*runtime.semaRoot).rotateRight": [
        [0, 1]
    ],
    "(*runtime.sigctxt).cs": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).fault": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).fixsigcode": [
        [0]
    ],
    "(*runtime.sigctxt).fs": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).gs": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).preparePanic": [
        [0]
    ],
    "(*runtime.sigctxt).pushCall": [
        [0]
    ],
    "(*runtime.sigctxt).r10": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r11": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r12": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r13": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r14": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r15": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r8": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).r9": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rax": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rbp": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rbx": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rcx": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rdi": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rdx": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).regs": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rflags": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rip": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rsi": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).rsp": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).set_rip": [
        [0]
    ],
    "(*runtime.sigctxt).set_rsp": [
        [0]
    ],
    "(*runtime.sigctxt).set_sigaddr": [
        [0]
    ],
    "(*runtime.sigctxt).set_sigcode": [
        [0]
    ],
    "(*runtime.sigctxt).sigaddr": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).sigcode": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).siglr": [
        [0],
        []
    ],
    "(*runtime.sigctxt).sigpc": [
        [0],
        [0]
    ],
    "(*runtime.sigctxt).sigsp": [
        [0],
        [0]
    ],
    "(*runtime.spanClass).noscan": [
        [0],
        []
    ],
    "(*runtime.spanClass).sizeclass": [
        [0],
        []
    ],
    "(*runtime.spanSet).pop": [
        [0],
        [0]
    ],
    "(*runtime.spanSet).push": [
        [0]
    ],
    "(*runtime.spanSet).reset": [
        [0]
    ],
    "(*runtime.spanSetBlockAlloc).alloc": [
        [0],
        [0]
    ],
    "(*runtime.spanSetBlockAlloc).free": [
        [0]
    ],
    "(*runtime.specialsIter).next": [
        [0]
    ],
    "(*runtime.specialsIter).unlinkAndNext": [
        [0],
        [0]
    ],
    "(*runtime.specialsIter).valid": [
        [0],
        [0]
    ],
    "(*runtime.stackObject).setRecord": [
        [0]
    ],
    "(*runtime.stackObjectRecord).gcdata": [
        [0],
        [0]
    ],
    "(*runtime.stackObjectRecord).ptrdata": [
        [0],
        [0]
    ],
    "(*runtime.stackObjectRecord).useGCProg": [
        [0],
        [0]
    ],
    "(*runtime.stackScanState).addObject": [
        [0]
    ],
    "(*runtime.stackScanState).buildIndex": [
        [0]
    ],
    "(*runtime.stackScanState).findObject": [
        [0],
        [0]
    ],
    "(*runtime.stackScanState).getPtr": [
        [0],
        [0],
        [0]
    ],
    "(*runtime.stackScanState).putPtr": [
        [0]
    ],
    "(*runtime.statAggregate).ensure": [
        [0, 1]
    ],
    "(*runtime.statDepSet).empty": [
        [0],
        []
    ],
    "(*runtime.statDepSet).has": [
        [0],
        [0, 1]
    ],
    "(*runtime.structfield).offset": [
        [0],
        [0]
    ],
    "(*runtime.sweepClass).clear": [
        [0]
    ],
    "(*runtime.sweepClass).load": [
        [0],
        [0]
    ],
    "(*runtime.sweepClass).update": [
        [0]
    ],
    "(*runtime.sweepLocked).sweep": [
        [0],
        []
    ],
    "(*runtime.sweepLocker).tryAcquire": [
        [0],
        [1],
        []
    ],
    "(*runtime.sysMemStat).add": [
        [0]
    ],
    "(*runtime.sysMemStat).load": [
        [0],
        [0]
    ],
    "(*runtime.sysStatsAggregate).compute": [
        [0]
    ],
    "(*runtime.sysStatsAggregate).compute$1": [],
    "(*runtime.timeHistogram).record": [
        [0]
    ],
    "(*runtime.timespec).setNsec": [
        [0, 1]
    ],
    "(*runtime.timeval).set_usec": [
        [0, 1]
    ],
    "(*runtime.traceAlloc).alloc": [
        [0, 1],
        [0]
    ],
    "(*runtime.traceAlloc).drop": [
        [0]
    ],
    "(*runtime.traceAllocBlockPtr).set": [
        [0, 1]
    ],
    "(*runtime.traceBuf).byte": [
        [0]
    ],
    "(*runtime.traceBuf).varint": [
        [0]
    ],
    "(*runtime.traceBufPtr).ptr": [
        [0],
        []
    ],
    "(*runtime.traceBufPtr).set": [
        [0, 1]
    ],
    "(*runtime.traceStack).stack": [
        [0],
        [0]
    ],
    "(*runtime.traceStackTable).dump": [
        [0]
    ],
    "(*runtime.traceStackTable).find": [
        [0],
        [0]
    ],
    "(*runtime.traceStackTable).newStack": [
        [0, 1],
        [0, 1]
    ],
    "(*runtime.traceStackTable).put": [
        [0],
        [0]
    ],
    "(*runtime.waitReason).String": [
        [0],
        []
    ],
    "(*runtime.waitq).dequeue": [
        [0],
        [0]
    ],
    "(*runtime.waitq).dequeueSudoG": [
        [0, 1]
    ],
    "(*runtime.waitq).enqueue": [
        [0, 1]
    ],
    "(*runtime.wbBuf).discard": [
        [0]
    ],
    "(*runtime.wbBuf).empty": [
        [0],
        [0]
    ],
    "(*runtime.wbBuf).putFast": [
        [0],
        [0]
    ],
    "(*runtime.wbBuf).reset": [
        [0]
    ],
    "(*runtime.workbuf).checkempty": [
        [0]
    ],
    "(*runtime.workbuf).checknonempty": [
        [0]
    ],
    "(*runtime/internal/atomic.Float64).Load": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Float64).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Int32).Add": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int32).CompareAndSwap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int32).Load": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int32).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Int32).Swap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int64).Add": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int64).CompareAndSwap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int64).Load": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Int64).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Int64).Swap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint32).Add": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint32).And": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint32).CompareAndSwap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint32).CompareAndSwapRelease": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint32).Load": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Uint32).LoadAcquire": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Uint32).Or": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint32).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint32).StoreRelease": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint32).Swap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint64).Add": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint64).CompareAndSwap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint64).Load": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Uint64).LoadAcquire": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Uint64).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint64).StoreRelease": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint64).Swap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uint8).And": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint8).Load": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Uint8).Or": [
        [0]
    ],
    "(*runtime/internal/atomic.Uint8).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Uintptr).Add": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uintptr).CompareAndSwap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uintptr).Load": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.Uintptr).LoadAcquire": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.Uintptr).Store": [
        [0]
    ],
    "(*runtime/internal/atomic.Uintptr).StoreRelease": [
        [0]
    ],
    "(*runtime/internal/atomic.Uintptr).Swap": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.UnsafePointer).CompareAndSwapNoWB": [
        [0],
        []
    ],
    "(*runtime/internal/atomic.UnsafePointer).Load": [
        [0],
        [0]
    ],
    "(*runtime/internal/atomic.UnsafePointer).StoreNoWB": [
        [0]
    ],
    "(*runtime/internal/atomic.noCopy).Lock": [
        [0]
    ],
    "(*runtime/internal/atomic.noCopy).Unlock": [
        [0]
    ],
    "(*sort.Float64Slice).Len": [
        [0],
        []
    ],
    "(*sort.Float64Slice).Less": [
        [0],
        []
    ],
    "(*sort.Float64Slice).Search": [
        [0],
        []
    ],
    "(*sort.Float64Slice).Sort": [
        [0]
    ],
    "(*sort.Float64Slice).Swap": [
        [0]
    ],
    "(*sort.IntSlice).Len": [
        [0],
        []
    ],
    "(*sort.IntSlice).Less": [
        [0],
        []
    ],
    "(*sort.IntSlice).Search": [
        [0],
        []
    ],
    "(*sort.IntSlice).Sort": [
        [0]
    ],
    "(*sort.IntSlice).Swap": [
        [0]
    ],
    "(*sort.StringSlice).Len": [
        [0],
        []
    ],
    "(*sort.StringSlice).Less": [
        [0],
        []
    ],
    "(*sort.StringSlice).Search": [
        [0],
        []
    ],
    "(*sort.StringSlice).Sort": [
        [0]
    ],
    "(*sort.StringSlice).Swap": [
        [0]
    ],
    "(*sort.reverse).Len": [
        [0],
        []
    ],
    "(*sort.reverse).Less": [
        [0],
        []
    ],
    "(*sort.reverse).Swap": [
        [0]
    ],
    "(*strconv.NumError).Error": [
        [0],
        [0]
    ],
    "(*strconv.NumError).Unwrap": [
        [0],
        [0]
    ],
    "(*strconv.decimal).Assign": [
        [0]
    ],
    "(*strconv.decimal).Round": [
        [0, 1]
    ],
    "(*strconv.decimal).RoundDown": [
        [0, 1]
    ],
    "(*strconv.decimal).RoundUp": [
        [0, 1]
    ],
    "(*strconv.decimal).RoundedInteger": [
        [0],
        [0]
    ],
    "(*strconv.decimal).Shift": [
        [0]
    ],
    "(*strconv.decimal).floatBits": [
        [0],
        [0, 1],
        []
    ],
    "(*strconv.decimal).set": [
        [0, 1],
        []
    ],
    "(*sync.Cond).Broadcast": [
        [0]
    ],
    "(*sync.Cond).Signal": [
        [0]
    ],
    "(*sync.Cond).Wait": [
        [0]
    ],
    "(*sync.Map).Delete": [
        [0]
    ],
    "(*sync.Map).Load": [
        [0],
        [],
        []
    ],
    "(*sync.Map).LoadAndDelete": [
        [0],
        [],
        []
    ],
    "(*sync.Map).LoadOrStore": [
        [0],
        [2],
        []
    ],
    "(*sync.Map).Range": [
        [0]
    ],
    "(*sync.Map).Store": [
        [0]
    ],
    "(*sync.Map).dirtyLocked": [
        [0]
    ],
    "(*sync.Map).missLocked": [
        [0]
    ],
    "(*sync.Mutex).Lock": [
        [0]
    ],
    "(*sync.Mutex).TryLock": [
        [0],
        []
    ],
    "(*sync.Mutex).Unlock": [
        [0]
    ],
    "(*sync.Mutex).lockSlow": [
        [0]
    ],
    "(*sync.Mutex).unlockSlow": [
        [0]
    ],
    "(*sync.Once).Do": [
        [0]
    ],
    "(*sync.Once).doSlow": [
        [0]
    ],
    "(*sync.Pool).Get": [
        [0],
        [0]
    ],
    "(*sync.Pool).Put": [
        [0]
    ],
    "(*sync.Pool).getSlow": [
        [0],
        [0, 1]
    ],
    "(*sync.Pool).pin": [
        [0],
        [0],
        []
    ],
    "(*sync.Pool).pinSlow": [
        [0],
        [0],
        []
    ],
    "(*sync.RWMutex).Lock": [
        [0]
    ],
    "(*sync.RWMutex).RLock": [
        [0]
    ],
    "(*sync.RWMutex).RLocker": [
        [0],
        [0]
    ],
    "(*sync.RWMutex).RUnlock": [
        [0]
    ],
    "(*sync.RWMutex).TryLock": [
        [0],
        []
    ],
    "(*sync.RWMutex).TryRLock": [
        [0],
        []
    ],
    "(*sync.RWMutex).Unlock": [
        [0]
    ],
    "(*sync.RWMutex).rUnlockSlow": [
        [0]
    ],
    "(*sync.WaitGroup).Add": [
        [0]
    ],
    "(*sync.WaitGroup).Done": [
        [0]
    ],
    "(*sync.WaitGroup).Wait": [
        [0]
    ],
    "(*sync.WaitGroup).state": [
        [0],
        [0],
        [0]
    ],
    "(*sync.copyChecker).check": [
        [0]
    ],
    "(*sync.entry).delete": [
        [0],
        [],
        []
    ],
    "(*sync.entry).load": [
        [0],
        [],
        []
    ],
    "(*sync.entry).storeLocked": [
        [0]
    ],
    "(*sync.entry).tryExpungeLocked": [
        [0],
        []
    ],
    "(*sync.entry).tryLoadOrStore": [
        [0],
        [1],
        [],
        []
    ],
    "(*sync.entry).tryStore": [
        [0],
        []
    ],
    "(*sync.entry).unexpungeLocked": [
        [0],
        []
    ],
    "(*sync.noCopy).Lock": [
        [0]
    ],
    "(*sync.noCopy).Unlock": [
        [0]
    ],
    "(*sync.poolChain).popHead": [
        [0],
        [0],
        []
    ],
    "(*sync.poolChain).popTail": [
        [0],
        [],
        []
    ],
    "(*sync.poolChain).pushHead": [
        [0]
    ],
    "(*sync.poolChainElt).pack": [
        [0],
        [1, 2]
    ],
    "(*sync.poolChainElt).popHead": [
        [0],
        [0],
        []
    ],
    "(*sync.poolChainElt).popTail": [
        [0],
        [0],
        []
    ],
    "(*sync.poolChainElt).pushHead": [
        [0],
        []
    ],
    "(*sync.poolChainElt).unpack": [
        [0],
        [1],
        [1]
    ],
    "(*sync.poolDequeue).pack": [
        [0],
        [1, 2]
    ],
    "(*sync.poolDequeue).popHead": [
        [0],
        [0],
        []
    ],
    "(*sync.poolDequeue).popTail": [
        [0],
        [0],
        []
    ],
    "(*sync.poolDequeue).pushHead": [
        [0],
        []
    ],
    "(*sync.poolDequeue).unpack": [
        [0],
        [1],
        [1]
    ],
    "(*sync.rlocker).Lock": [
        [0]
    ],
    "(*sync.rlocker).Unlock": [
        [0]
    ],
    "(*sync/atomic.Value).CompareAndSwap": [
        [0],
        []
    ],
    "(*sync/atomic.Value).Load": [
        [0],
        []
    ],
    "(*sync/atomic.Value).Store": [
        [0]
    ],
    "(*sync/atomic.Value).Swap": [
        [0],
        []
    ],
    "(*syscall.Cmsghdr).SetLen": [
        [0, 1]
    ],
    "(*syscall.Cmsghdr).data": [
        [0],
        [0, 1]
    ],
    "(*syscall.Errno).Error": [
        [0],
        []
    ],
    "(*syscall.Errno).Is": [
        [0],
        []
    ],
    "(*syscall.Errno).Temporary": [
        [0],
        []
    ],
    "(*syscall.Errno).Timeout": [
        [0],
        []
    ],
    "(*syscall.InterfaceAddrMessage).sockaddr": [
        [0],
        [0],
        []
    ],
    "(*syscall.InterfaceMessage).sockaddr": [
        [0],
        [0],
        []
    ],
    "(*syscall.InterfaceMulticastAddrMessage).sockaddr": [
        [0],
        [0],
        []
    ],
    "(*syscall.Iovec).SetLen": [
        [0, 1]
    ],
    "(*syscall.Msghdr).SetControllen": [
        [0, 1]
    ],
    "(*syscall.RouteMessage).sockaddr": [
        [0],
        [0],
        []
    ],
    "(*syscall.Signal).Signal": [
        [0]
    ],
    "(*syscall.Signal).String": [
        [0],
        []
    ],
    "(*syscall.SockaddrDatalink).sockaddr": [
        [0],
        [0],
        [],
        []
    ],
    "(*syscall.SockaddrInet4).sockaddr": [
        [0],
        [0],
        [0],
        []
    ],
    "(*syscall.SockaddrInet6).sockaddr": [
        [0],
        [0],
        [0],
        []
    ],
    "(*syscall.SockaddrUnix).sockaddr": [
        [0],
        [0],
        [0],
        []
    ],
    "(*syscall.Timespec).Nano": [
        [0],
        [0]
    ],
    "(*syscall.Timespec).Unix": [
        [0],
        [0],
        [0]
    ],
    "(*syscall.Timeval).Nano": [
        [0],
        [0]
    ],
    "(*syscall.Timeval).Unix": [
        [0],
        [0],
        [0]
    ],
    "(*syscall.WaitStatus).Continued": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).CoreDump": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).ExitStatus": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).Exited": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).Signal": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).Signaled": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).StopSignal": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).Stopped": [
        [0],
        []
    ],
    "(*syscall.WaitStatus).TrapCause": [
        [0],
        []
    ],
    "(*syscall.anyMessage).toRoutingMessage": [
        [0],
        [0, 1]
    ],
    "(*syscall.mmapper).Mmap": [
        [0],
        [],
        []
    ],
    "(*syscall.mmapper).Munmap": [
        [0],
        []
    ],
    "(*time.Duration).Hours": [
        [0],
        []
    ],
    "(*time.Duration).Microseconds": [
        [0],
        []
    ],
    "(*time.Duration).Milliseconds": [
        [0],
        []
    ],
    "(*time.Duration).Minutes": [
        [0],
        []
    ],
    "(*time.Duration).Nanoseconds": [
        [0],
        []
    ],
    "(*time.Duration).Round": [
        [0],
        [1]
    ],
    "(*time.Duration).Seconds": [
        [0],
        []
    ],
    "(*time.Duration).String": [
        [0],
        []
    ],
    "(*time.Duration).Truncate": [
        [0],
        [1]
    ],
    "(*time.Location).String": [
        [0],
        [0]
    ],
    "(*time.Location).firstZoneUsed": [
        [0],
        []
    ],
    "(*time.Location).get": [
        [0],
        [0]
    ],
    "(*time.Location).lookup": [
        [0],
        [0],
        [0],
        [0, 1],
        [0, 1],
        [0]
    ],
    "(*time.Location).lookupFirstZone": [
        [0],
        [0]
    ],
    "(*time.Location).lookupName": [
        [0],
        [0],
        []
    ],
    "(*time.Month).String": [
        [0],
        []
    ],
    "(*time.ParseError).Error": [
        [0],
        [0]
    ],
    "(*time.Ticker).Reset": [
        [0]
    ],
    "(*time.Ticker).Stop": [
        [0]
    ],
    "(*time.Time).Add": [
        [0],
        [1]
    ],
    "(*time.Time).AddDate": [
        [0],
        [1, 2, 3]
    ],
    "(*time.Time).After": [
        [0],
        [1]
    ],
    "(*time.Time).AppendFormat": [
        [0],
        [1]
    ],
    "(*time.Time).Before": [
        [0],
        [1]
    ],
    "(*time.Time).Clock": [
        [0],
        [],
        [],
        []
    ],
    "(*time.Time).Date": [
        [0],
        [],
        [],
        []
    ],
    "(*time.Time).Day": [
        [0],
        []
    ],
    "(*time.Time).Equal": [
        [0],
        [1]
    ],
    "(*time.Time).Format": [
        [0],
        []
    ],
    "(*time.Time).GoString": [
        [0],
        []
    ],
    "(*time.Time).GobDecode": [
        [0],
        []
    ],
    "(*time.Time).GobEncode": [
        [0],
        [],
        []
    ],
    "(*time.Time).Hour": [
        [0],
        []
    ],
    "(*time.Time).ISOWeek": [
        [0],
        [],
        []
    ],
    "(*time.Time).In": [
        [0],
        [1]
    ],
    "(*time.Time).IsDST": [
        [0],
        []
    ],
    "(*time.Time).IsZero": [
        [0],
        []
    ],
    "(*time.Time).Local": [
        [0],
        []
    ],
    "(*time.Time).Location": [
        [0],
        []
    ],
    "(*time.Time).MarshalBinary": [
        [0],
        [],
        []
    ],
    "(*time.Time).MarshalJSON": [
        [0],
        [],
        []
    ],
    "(*time.Time).MarshalText": [
        [0],
        [],
        []
    ],
    "(*time.Time).Minute": [
        [0],
        []
    ],
    "(*time.Time).Month": [
        [0],
        []
    ],
    "(*time.Time).Nanosecond": [
        [0],
        []
    ],
    "(*time.Time).Round": [
        [0],
        [1]
    ],
    "(*time.Time).Second": [
        [0],
        []
    ],
    "(*time.Time).String": [
        [0],
        []
    ],
    "(*time.Time).Sub": [
        [0],
        [1]
    ],
    "(*time.Time).Truncate": [
        [0],
        [1]
    ],
    "(*time.Time).UTC": [
        [0],
        []
    ],
    "(*time.Time).Unix": [
        [0],
        []
    ],
    "(*time.Time).UnixMicro": [
        [0],
        []
    ],
    "(*time.Time).UnixMilli": [
        [0],
        []
    ],
    "(*time.Time).UnixNano": [
        [0],
        []
    ],
    "(*time.Time).UnmarshalBinary": [
        [0],
        []
    ],
    "(*time.Time).UnmarshalJSON": [
        [0, 1],
        [1]
    ],
    "(*time.Time).UnmarshalText": [
        [0, 1],
        [1]
    ],
    "(*time.Time).Weekday": [
        [0],
        []
    ],
    "(*time.Time).Year": [
        [0],
        []
    ],
    "(*time.Time).YearDay": [
        [0],
        []
    ],
    "(*time.Time).Zone": [
        [0],
        [],
        []
    ],
    "(*time.Time).abs": [
        [0],
        []
    ],
    "(*time.Time).addSec": [
        [0, 1]
    ],
    "(*time.Time).date": [
        [0],
        [],
        [],
        [],
        []
    ],
    "(*time.Time).locabs": [
        [0],
        [],
        [],
        []
    ],
    "(*time.Time).mono": [
        [0],
        [0]
    ],
    "(*time.Time).nsec": [
        [0],
        [0]
    ],
    "(*time.Time).sec": [
        [0],
        [0]
    ],
    "(*time.Time).setLoc": [
        [0, 1]
    ],
    "(*time.Time).setMono": [
        [0, 1]
    ],
    "(*time.Time).stripMono": [
        [0]
    ],
    "(*time.Time).unixSec": [
        [0],
        [0]
    ],
    "(*time.Timer).Reset": [
        [0],
        []
    ],
    "(*time.Timer).Stop": [
        [0],
        []
    ],
    "(*time.Weekday).String": [
        [0],
        []
    ],
    "(*time.dataIO).big4": [
        [0],
        [0],
        []
    ],
    "(*time.dataIO).big8": [
        [0],
        [0],
        []
    ],
    "(*time.dataIO).byte": [
        [0],
        [0],
        []
    ],
    "(*time.dataIO).read": [
        [0],
        [0]
    ],
    "(*time.dataIO).rest": [
        [0],
        [0]
    ],
    "(*time.fileSizeError).Error": [
        [0],
        []
    ],
    "(*unicode.SpecialCase).ToLower": [
        [0],
        [1]
    ],
    "(*unicode.SpecialCase).ToTitle": [
        [0],
        [1]
    ],
    "(*unicode.SpecialCase).ToUpper": [
        [0],
        [1]
    ],
    "(internal/poll.errNetClosing).Error": [
        [0],
        []
    ],
    "(internal/poll.errNetClosing).Temporary": [
        [0],
        []
    ],
    "(internal/poll.errNetClosing).Timeout": [
        [0],
        []
    ],
    "(internal/reflectlite.Kind).String": [
        [0],
        []
    ],
    "(internal/reflectlite.Value).CanSet": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).Elem": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).IsNil": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).IsValid": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).Kind": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).Len": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).Set": [
        [0]
    ],
    "(internal/reflectlite.Value).Type": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).assignTo": [
        [0],
        [0, 2, 3]
    ],
    "(internal/reflectlite.Value).kind": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).mustBeAssignable": [
        [0]
    ],
    "(internal/reflectlite.Value).mustBeExported": [
        [0]
    ],
    "(internal/reflectlite.Value).numMethod": [
        [0],
        []
    ],
    "(internal/reflectlite.Value).pointer": [
        [0],
        [0]
    ],
    "(internal/reflectlite.Value).ro": [
        [0],
        []
    ],
    "(internal/reflectlite.flag).kind": [
        [0],
        [0]
    ],
    "(internal/reflectlite.flag).mustBeAssignable": [
        [0]
    ],
    "(internal/reflectlite.flag).mustBeExported": [
        [0]
    ],
    "(internal/reflectlite.flag).ro": [
        [0],
        []
    ],
    "(internal/reflectlite.name).data": [
        [0],
        [0, 1]
    ],
    "(internal/reflectlite.name).hasTag": [
        [0],
        [0]
    ],
    "(internal/reflectlite.name).isExported": [
        [0],
        [0]
    ],
    "(internal/reflectlite.name).name": [
        [0],
        []
    ],
    "(internal/reflectlite.name).pkgPath": [
        [0],
        []
    ],
    "(internal/reflectlite.name).readVarint": [
        [0],
        [],
        [0, 1]
    ],
    "(internal/reflectlite.name).tag": [
        [0],
        []
    ],
    "(io.discard).ReadFrom": [
        [0],
        [],
        []
    ],
    "(io.discard).Write": [
        [0],
        [],
        []
    ],
    "(io.discard).WriteString": [
        [0],
        [],
        []
    ],
    "(io.eofReader).Read": [
        [0],
        [],
        []
    ],
    "(io.nopCloser).Close": [
        [0],
        []
    ],
    "(io.nopCloser).Read": [
        [0],
        [],
        []
    ],
    "(io/fs.FileMode).IsDir": [
        [0],
        [0]
    ],
    "(io/fs.FileMode).IsRegular": [
        [0],
        [0]
    ],
    "(io/fs.FileMode).Perm": [
        [0],
        [0]
    ],
    "(io/fs.FileMode).String": [
        [0],
        []
    ],
    "(io/fs.FileMode).Type": [
        [0],
        [0]
    ],
    "(io/fs.dirInfo).Info": [
        [0],
        [0],
        []
    ],
    "(io/fs.dirInfo).IsDir": [
        [0],
        []
    ],
    "(io/fs.dirInfo).Name": [
        [0],
        []
    ],
    "(io/fs.dirInfo).Type": [
        [0],
        []
    ],
    "(os.File).close": [
        [0],
        [0]
    ],
    "(os.dirFS).Open": [
        [0],
        [0, 1],
        [0, 1]
    ],
    "(os.dirFS).Stat": [
        [0],
        [],
        [0, 1]
    ],
    "(os.onlyWriter).Write": [
        [0],
        [],
        []
    ],
    "(reflect.ChanDir).String": [
        [0],
        [0]
    ],
    "(reflect.Kind).String": [
        [0],
        [0]
    ],
    "(reflect.Method).IsExported": [
        [0],
        [0]
    ],
    "(reflect.StructField).IsExported": [
        [0],
        [0]
    ],
    "(reflect.StructTag).Get": [
        [0],
        [0]
    ],
    "(reflect.StructTag).Lookup": [
        [0],
        [0],
        []
    ],
    "(reflect.Value).Addr": [
        [0],
        [0]
    ],
    "(reflect.Value).Bool": [
        [0],
        [0]
    ],
    "(reflect.Value).Bytes": [
        [0],
        [0]
    ],
    "(reflect.Value).Call": [
        [0],
        [0]
    ],
    "(reflect.Value).CallSlice": [
        [0],
        [0]
    ],
    "(reflect.Value).CanAddr": [
        [0],
        [0]
    ],
    "(reflect.Value).CanComplex": [
        [0],
        []
    ],
    "(reflect.Value).CanConvert": [
        [0],
        []
    ],
    "(reflect.Value).CanFloat": [
        [0],
        []
    ],
    "(reflect.Value).CanInt": [
        [0],
        []
    ],
    "(reflect.Value).CanInterface": [
        [0],
        [0]
    ],
    "(reflect.Value).CanSet": [
        [0],
        [0]
    ],
    "(reflect.Value).CanUint": [
        [0],
        []
    ],
    "(reflect.Value).Cap": [
        [0],
        [0]
    ],
    "(reflect.Value).Close": [
        [0]
    ],
    "(reflect.Value).Complex": [
        [0],
        [0]
    ],
    "(reflect.Value).Convert": [
        [0],
        []
    ],
    "(reflect.Value).Elem": [
        [0],
        [0]
    ],
    "(reflect.Value).Field": [
        [0],
        [0]
    ],
    "(reflect.Value).FieldByIndex": [
        [0],
        [0]
    ],
    "(reflect.Value).FieldByIndexErr": [
        [0],
        [0],
        []
    ],
    "(reflect.Value).FieldByName": [
        [0],
        [0]
    ],
    "(reflect.Value).FieldByNameFunc": [
        [0],
        [0]
    ],
    "(reflect.Value).Float": [
        [0],
        [0]
    ],
    "(reflect.Value).Index": [
        [0],
        [0, 1]
    ],
    "(reflect.Value).Int": [
        [0],
        [0]
    ],
    "(reflect.Value).Interface": [
        [0],
        [0]
    ],
    "(reflect.Value).InterfaceData": [
        [0],
        [0]
    ],
    "(reflect.Value).IsNil": [
        [0],
        [0]
    ],
    "(reflect.Value).IsValid": [
        [0],
        [0]
    ],
    "(reflect.Value).IsZero": [
        [0],
        [0]
    ],
    "(reflect.Value).Kind": [
        [0],
        [0]
    ],
    "(reflect.Value).Len": [
        [0],
        [0]
    ],
    "(reflect.Value).MapIndex": [
        [0],
        [0]
    ],
    "(reflect.Value).MapKeys": [
        [0],
        [0]
    ],
    "(reflect.Value).MapRange": [
        [0],
        [0]
    ],
    "(reflect.Value).Method": [
        [0],
        [0, 1]
    ],
    "(reflect.Value).MethodByName": [
        [0],
        [0]
    ],
    "(reflect.Value).NumField": [
        [0],
        []
    ],
    "(reflect.Value).NumMethod": [
        [0],
        []
    ],
    "(reflect.Value).OverflowComplex": [
        [0],
        []
    ],
    "(reflect.Value).OverflowFloat": [
        [0],
        [1]
    ],
    "(reflect.Value).OverflowInt": [
        [0],
        [0, 1]
    ],
    "(reflect.Value).OverflowUint": [
        [0],
        [0, 1]
    ],
    "(reflect.Value).Pointer": [
        [0],
        [0]
    ],
    "(reflect.Value).Recv": [
        [0],
        [0],
        []
    ],
    "(reflect.Value).Send": [
        [0]
    ],
    "(reflect.Value).Set": [
        [0]
    ],
    "(reflect.Value).SetBool": [
        [0]
    ],
    "(reflect.Value).SetBytes": [
        [0]
    ],
    "(reflect.Value).SetCap": [
        [0]
    ],
    "(reflect.Value).SetComplex": [
        [0]
    ],
    "(reflect.Value).SetFloat": [
        [0]
    ],
    "(reflect.Value).SetInt": [
        [0]
    ],
    "(reflect.Value).SetIterKey": [
        [0]
    ],
    "(reflect.Value).SetIterValue": [
        [0]
    ],
    "(reflect.Value).SetLen": [
        [0]
    ],
    "(reflect.Value).SetMapIndex": [
        [0]
    ],
    "(reflect.Value).SetPointer": [
        [0]
    ],
    "(reflect.Value).SetString": [
        [0]
    ],
    "(reflect.Value).SetUint": [
        [0]
    ],
    "(reflect.Value).Slice": [
        [0],
        [0, 1, 2]
    ],
    "(reflect.Value).Slice3": [
        [0],
        [0]
    ],
    "(reflect.Value).String": [
        [0],
        [0]
    ],
    "(reflect.Value).TryRecv": [
        [0],
        [0],
        []
    ],
    "(reflect.Value).TrySend": [
        [0],
        []
    ],
    "(reflect.Value).Type": [
        [0],
        [0]
    ],
    "(reflect.Value).Uint": [
        [0],
        [0]
    ],
    "(reflect.Value).UnsafeAddr": [
        [0],
        [0]
    ],
    "(reflect.Value).UnsafePointer": [
        [0],
        [0]
    ],
    "(reflect.Value).assignTo": [
        [0],
        [0, 2, 3]
    ],
    "(reflect.Value).call": [
        [0],
        [0]
    ],
    "(reflect.Value).kind": [
        [0],
        [0]
    ],
    "(reflect.Value).mustBe": [
        [0]
    ],
    "(reflect.Value).mustBeAssignable": [
        [0]
    ],
    "(reflect.Value).mustBeAssignableSlow": [
        [0]
    ],
    "(reflect.Value).mustBeExported": [
        [0]
    ],
    "(reflect.Value).mustBeExportedSlow": [
        [0]
    ],
    "(reflect.Value).pointer": [
        [0],
        [0]
    ],
    "(reflect.Value).recv": [
        [0],
        [0],
        []
    ],
    "(reflect.Value).ro": [
        [0],
        []
    ],
    "(reflect.Value).runes": [
        [0],
        [0]
    ],
    "(reflect.Value).send": [
        [0],
        []
    ],
    "(reflect.Value).setRunes": [
        [0]
    ],
    "(reflect.flag).kind": [
        [0],
        [0]
    ],
    "(reflect.flag).mustBe": [
        [0]
    ],
    "(reflect.flag).mustBeAssignable": [
        [0]
    ],
    "(reflect.flag).mustBeAssignableSlow": [
        [0]
    ],
    "(reflect.flag).mustBeExported": [
        [0]
    ],
    "(reflect.flag).mustBeExportedSlow": [
        [0]
    ],
    "(reflect.flag).ro": [
        [0],
        []
    ],
    "(reflect.name).data": [
        [0],
        [0, 1]
    ],
    "(reflect.name).hasTag": [
        [0],
        [0]
    ],
    "(reflect.name).isExported": [
        [0],
        [0]
    ],
    "(reflect.name).name": [
        [0],
        []
    ],
    "(reflect.name).pkgPath": [
        [0],
        []
    ],
    "(reflect.name).readVarint": [
        [0],
        [],
        [0, 1]
    ],
    "(reflect.name).tag": [
        [0],
        []
    ],
    "(runtime.addrRange).contains": [
        [0],
        [0, 1]
    ],
    "(runtime.addrRange).removeGreaterEqual": [
        [0],
        [0, 1]
    ],
    "(runtime.addrRange).size": [
        [0],
        [0]
    ],
    "(runtime.addrRange).subtract": [
        [0],
        [0, 1]
    ],
    "(runtime.arenaIdx).l1": [
        [0],
        [0]
    ],
    "(runtime.arenaIdx).l2": [
        [0],
        [0]
    ],
    "(runtime.boundsError).Error": [
        [0],
        []
    ],
    "(runtime.boundsError).RuntimeError": [
        [0]
    ],
    "(runtime.chunkIdx).l1": [
        [0],
        [0]
    ],
    "(runtime.chunkIdx).l2": [
        [0],
        [0]
    ],
    "(runtime.errorAddressString).Addr": [
        [0],
        [0]
    ],
    "(runtime.errorAddressString).Error": [
        [0],
        [0]
    ],
    "(runtime.errorAddressString).RuntimeError": [
        [0]
    ],
    "(runtime.errorString).Error": [
        [0],
        [0]
    ],
    "(runtime.errorString).RuntimeError": [
        [0]
    ],
    "(runtime.funcInfo)._Func": [
        [0],
        [0]
    ],
    "(runtime.funcInfo).entry": [
        [0],
        [0]
    ],
    "(runtime.funcInfo).funcInfo": [
        [0],
        [0]
    ],
    "(runtime.funcInfo).isInlined": [
        [0],
        [0]
    ],
    "(runtime.funcInfo).valid": [
        [0],
        [0]
    ],
    "(runtime.gcTrigger).test": [
        [0],
        [0]
    ],
    "(runtime.gclinkptr).ptr": [
        [0],
        [0]
    ],
    "(runtime.guintptr).ptr": [
        [0],
        [0]
    ],
    "(runtime.headTailIndex).head": [
        [0],
        [0]
    ],
    "(runtime.headTailIndex).split": [
        [0],
        [0],
        [0]
    ],
    "(runtime.headTailIndex).tail": [
        [0],
        [0]
    ],
    "(runtime.heapBits).bits": [
        [0],
        [0]
    ],
    "(runtime.heapBits).forward": [
        [0],
        [0, 1]
    ],
    "(runtime.heapBits).forwardOrBoundary": [
        [0],
        [0, 1],
        [0, 1]
    ],
    "(runtime.heapBits).initSpan": [
        [0]
    ],
    "(runtime.heapBits).isPointer": [
        [0],
        [0]
    ],
    "(runtime.heapBits).morePointers": [
        [0],
        [0]
    ],
    "(runtime.heapBits).next": [
        [0],
        [0]
    ],
    "(runtime.heapBits).nextArena": [
        [0],
        [0]
    ],
    "(runtime.lockRank).String": [
        [0],
        []
    ],
    "(runtime.markBits).clearMarked": [
        [0]
    ],
    "(runtime.markBits).isMarked": [
        [0],
        [0]
    ],
    "(runtime.markBits).setMarked": [
        [0]
    ],
    "(runtime.markBits).setMarkedNonAtomic": [
        [0]
    ],
    "(runtime.muintptr).ptr": [
        [0],
        [0]
    ],
    "(runtime.name).data": [
        [0],
        [0, 1]
    ],
    "(runtime.name).isBlank": [
        [0],
        [0]
    ],
    "(runtime.name).isExported": [
        [0],
        [0]
    ],
    "(runtime.name).name": [
        [0],
        []
    ],
    "(runtime.name).pkgPath": [
        [0],
        []
    ],
    "(runtime.name).readvarint": [
        [0],
        [],
        [0, 1]
    ],
    "(runtime.name).tag": [
        [0],
        []
    ],
    "(runtime.offAddr).add": [
        [0],
        [0, 1]
    ],
    "(runtime.offAddr).addr": [
        [0],
        [0]
    ],
    "(runtime.offAddr).diff": [
        [0],
        [0, 1]
    ],
    "(runtime.offAddr).equal": [
        [0],
        [0, 1]
    ],
    "(runtime.offAddr).lessEqual": [
        [0],
        [0, 1]
    ],
    "(runtime.offAddr).lessThan": [
        [0],
        [0, 1]
    ],
    "(runtime.offAddr).sub": [
        [0],
        [0, 1]
    ],
    "(runtime.pMask).clear": [
        [0]
    ],
    "(runtime.pMask).read": [
        [0],
        [0, 1]
    ],
    "(runtime.pMask).set": [
        [0]
    ],
    "(runtime.pallocSum).end": [
        [0],
        [0]
    ],
    "(runtime.pallocSum).max": [
        [0],
        [0]
    ],
    "(runtime.pallocSum).start": [
        [0],
        [0]
    ],
    "(runtime.pallocSum).unpack": [
        [0],
        [0],
        [0],
        [0]
    ],
    "(runtime.plainError).Error": [
        [0],
        [0]
    ],
    "(runtime.plainError).RuntimeError": [
        [0]
    ],
    "(runtime.pollInfo).closing": [
        [0],
        [0]
    ],
    "(runtime.pollInfo).eventErr": [
        [0],
        [0]
    ],
    "(runtime.pollInfo).expiredReadDeadline": [
        [0],
        [0]
    ],
    "(runtime.pollInfo).expiredWriteDeadline": [
        [0],
        [0]
    ],
    "(runtime.profIndex).addCountsAndClearFlags": [
        [0],
        [0, 1, 2]
    ],
    "(runtime.profIndex).dataCount": [
        [0],
        [0]
    ],
    "(runtime.profIndex).tagCount": [
        [0],
        [0]
    ],
    "(runtime.puintptr).ptr": [
        [0],
        [0]
    ],
    "(runtime.spanAllocType).manual": [
        [0],
        [0]
    ],
    "(runtime.spanClass).noscan": [
        [0],
        [0]
    ],
    "(runtime.spanClass).sizeclass": [
        [0],
        [0]
    ],
    "(runtime.statDepSet).difference": [
        [0],
        [0, 1]
    ],
    "(runtime.statDepSet).union": [
        [0],
        [0, 1]
    ],
    "(runtime.sweepClass).split": [
        [0],
        [0],
        [0]
    ],
    "(runtime.traceAllocBlockPtr).ptr": [
        [0],
        [0]
    ],
    "(runtime.traceBufPtr).ptr": [
        [0],
        [0]
    ],
    "(runtime.traceStackPtr).ptr": [
        [0],
        [0]
    ],
    "(runtime.waitReason).String": [
        [0],
        []
    ],
    "(sort.Float64Slice).Len": [
        [0],
        []
    ],
    "(sort.Float64Slice).Less": [
        [0],
        [0]
    ],
    "(sort.Float64Slice).Search": [
        [0],
        []
    ],
    "(sort.Float64Slice).Sort": [
        [0]
    ],
    "(sort.Float64Slice).Swap": [
        [0]
    ],
    "(sort.IntSlice).Len": [
        [0],
        []
    ],
    "(sort.IntSlice).Less": [
        [0],
        [0]
    ],
    "(sort.IntSlice).Search": [
        [0],
        []
    ],
    "(sort.IntSlice).Sort": [
        [0]
    ],
    "(sort.IntSlice).Swap": [
        [0]
    ],
    "(sort.StringSlice).Len": [
        [0],
        []
    ],
    "(sort.StringSlice).Less": [
        [0],
        [0]
    ],
    "(sort.StringSlice).Search": [
        [0],
        []
    ],
    "(sort.StringSlice).Sort": [
        [0]
    ],
    "(sort.StringSlice).Swap": [
        [0]
    ],
    "(sort.reverse).Len": [
        [0],
        []
    ],
    "(sort.reverse).Less": [
        [0],
        []
    ],
    "(sort.reverse).Swap": [
        [0]
    ],
    "(syscall.Errno).Error": [
        [0],
        [0]
    ],
    "(syscall.Errno).Is": [
        [0],
        [0]
    ],
    "(syscall.Errno).Temporary": [
        [0],
        [0]
    ],
    "(syscall.Errno).Timeout": [
        [0],
        [0]
    ],
    "(syscall.Signal).Signal": [
        [0]
    ],
    "(syscall.Signal).String": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).Continued": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).CoreDump": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).ExitStatus": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).Exited": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).Signal": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).Signaled": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).StopSignal": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).Stopped": [
        [0],
        [0]
    ],
    "(syscall.WaitStatus).TrapCause": [
        [0],
        []
    ],
    "(time.Duration).Hours": [
        [0],
        [0]
    ],
    "(time.Duration).Microseconds": [
        [0],
        [0]
    ],
    "(time.Duration).Milliseconds": [
        [0],
        [0]
    ],
    "(time.Duration).Minutes": [
        [0],
        [0]
    ],
    "(time.Duration).Nanoseconds": [
        [0],
        [0]
    ],
    "(time.Duration).Round": [
        [0],
        [0, 1]
    ],
    "(time.Duration).Seconds": [
        [0],
        [0]
    ],
    "(time.Duration).String": [
        [0],
        []
    ],
    "(time.Duration).Truncate": [
        [0],
        [0, 1]
    ],
    "(time.Month).String": [
        [0],
        []
    ],
    "(time.Time).Add": [
        [0],
        [0, 1]
    ],
    "(time.Time).AddDate": [
        [0],
        [0, 1, 2, 3]
    ],
    "(time.Time).After": [
        [0],
        [0, 1]
    ],
    "(time.Time).AppendFormat": [
        [0],
        [0, 1]
    ],
    "(time.Time).Before": [
        [0],
        [0, 1]
    ],
    "(time.Time).Clock": [
        [0],
        [0],
        [0],
        [0]
    ],
    "(time.Time).Date": [
        [0],
        [0],
        [0],
        [0]
    ],
    "(time.Time).Day": [
        [0],
        [0]
    ],
    "(time.Time).Equal": [
        [0],
        [0, 1]
    ],
    "(time.Time).Format": [
        [0],
        [0]
    ],
    "(time.Time).GoString": [
        [0],
        []
    ],
    "(time.Time).GobEncode": [
        [0],
        [0],
        []
    ],
    "(time.Time).Hour": [
        [0],
        [0]
    ],
    "(time.Time).ISOWeek": [
        [0],
        [0],
        [0]
    ],
    "(time.Time).In": [
        [0],
        [0, 1]
    ],
    "(time.Time).IsDST": [
        [0],
        [0]
    ],
    "(time.Time).IsZero": [
        [0],
        [0]
    ],
    "(time.Time).Local": [
        [0],
        [0]
    ],
    "(time.Time).Location": [
        [0],
        [0]
    ],
    "(time.Time).MarshalBinary": [
        [0],
        [0],
        []
    ],
    "(time.Time).MarshalJSON": [
        [0],
        [],
        []
    ],
    "(time.Time).MarshalText": [
        [0],
        [0],
        []
    ],
    "(time.Time).Minute": [
        [0],
        [0]
    ],
    "(time.Time).Month": [
        [0],
        [0]
    ],
    "(time.Time).Nanosecond": [
        [0],
        [0]
    ],
    "(time.Time).Round": [
        [0],
        [0, 1]
    ],
    "(time.Time).Second": [
        [0],
        [0]
    ],
    "(time.Time).String": [
        [0],
        [0]
    ],
    "(time.Time).Sub": [
        [0],
        [0, 1]
    ],
    "(time.Time).Truncate": [
        [0],
        [0, 1]
    ],
    "(time.Time).UTC": [
        [0],
        [0]
    ],
    "(time.Time).Unix": [
        [0],
        [0]
    ],
    "(time.Time).UnixMicro": [
        [0],
        [0]
    ],
    "(time.Time).UnixMilli": [
        [0],
        [0]
    ],
    "(time.Time).UnixNano": [
        [0],
        [0]
    ],
    "(time.Time).Weekday": [
        [0],
        [0]
    ],
    "(time.Time).Year": [
        [0],
        [0]
    ],
    "(time.Time).YearDay": [
        [0],
        [0]
    ],
    "(time.Time).Zone": [
        [0],
        [0],
        [0]
    ],
    "(time.Time).abs": [
        [0],
        [0]
    ],
    "(time.Time).date": [
        [0],
        [0],
        [0],
        [0],
        [0]
    ],
    "(time.Time).locabs": [
        [0],
        [0],
        [0],
        [0]
    ],
    "(time.Weekday).String": [
        [0],
        []
    ],
    "(time.fileSizeError).Error": [
        [0],
        [0]
    ],
    "(unicode.SpecialCase).ToLower": [
        [0],
        [0, 1]
    ],
    "(unicode.SpecialCase).ToTitle": [
        [0],
        [0, 1]
    ],
    "(unicode.SpecialCase).ToUpper": [
        [0],
        [0, 1]
    ],
    "errors.As": [
        []
    ],
    "errors.Is": [
        [0, 1]
    ],
    "errors.New": [
        [0]
    ],
    "errors.Unwrap": [
        []
    ],
    "errors.init": [],
    "fmt.Errorf": [
        [0, 1]
    ],
    "fmt.Fprint": [
        [],
        []
    ],
    "fmt.Fprintf": [
        [],
        []
    ],
    "fmt.Fprintln": [
        [],
        []
    ],
    "fmt.Fscan": [
        [],
        []
    ],
    "fmt.Fscanf": [
        [],
        []
    ],
    "fmt.Fscanln": [
        [],
        []
    ],
    "fmt.Print": [
        [],
        []
    ],
    "fmt.Printf": [
        [],
        []
    ],
    "fmt.Println": [
        [],
        []
    ],
    "fmt.Scan": [
        [],
        []
    ],
    "fmt.Scanf": [
        [],
        []
    ],
    "fmt.Scanln": [
        [],
        []
    ],
    "fmt.Sprint": [
        [0]
    ],
    "fmt.Sprintf": [
        [0, 1]
    ],
    "fmt.Sprintln": [
        [0]
    ],
    "fmt.Sscan": [
        [],
        []
    ],
    "fmt.Sscanf": [
        [],
        []
    ],
    "fmt.Sscanln": [
        [],
        []
    ],
    "fmt.errorHandler": [],
    "fmt.getField": [
        [0]
    ],
    "fmt.hasX": [
        []
    ],
    "fmt.hexDigit": [
        [0],
        []
    ],
    "fmt.indexRune": [
        [0]
    ],
    "fmt.init": [],
    "fmt.init$1": [
        []
    ],
    "fmt.init$2": [
        []
    ],
    "fmt.intFromArg": [
        [0],
        [],
        [1]
    ],
    "fmt.isSpace": [
        []
    ],
    "fmt.newPrinter": [
        []
    ],
    "fmt.newScanState": [
        [0, 1, 2],
        []
    ],
    "fmt.notSpace": [
        []
    ],
    "fmt.parseArgNumber": [
        [0],
        [],
        []
    ],
    "fmt.parsenum": [
        [0, 1],
        [],
        [1, 2]
    ],
    "fmt.tooLarge": [
        [0]
    ],
    "func (*fmt.pp).badVerb(verb rune)": [
        []
    ],
    "func (*fmt.pp).fmtInteger(v uint64, isSigned bool, verb rune)": [
        []
    ],
    "func (*fmt.pp).printValue(value reflect.Value, verb rune, depth int)": [
        []
    ],
    "func (*reflect.abiSeq).regAssign(t *reflect.rtype, offset uintptr) bool": [
        [],
        []
    ],
    "func (*reflect.visibleFieldsWalker).walk(t reflect.Type)": [
        []
    ],
    "func (*runtime.profBuf).write(tagPtr *unsafe.Pointer, now int64, hdr []uint64, stk []uintptr)": [
        []
    ],
    "func (error).Error() string": [
        [],
        []
    ],
    "func (fmt.Formatter).Format(f fmt.State, verb rune)": [
        []
    ],
    "func (fmt.GoStringer).GoString() string": [
        [],
        []
    ],
    "func (fmt.Scanner).Scan(state fmt.ScanState, verb rune) error": [
        [],
        []
    ],
    "func (fmt.Stringer).String() string": [
        [],
        []
    ],
    "func (interface).As(any) bool": [
        [],
        []
    ],
    "func (interface).Is(error) bool": [
        [],
        []
    ],
    "func (interface).Timeout() bool": [
        [],
        []
    ],
    "func (interface).Unwrap() error": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).AssignableTo(u internal/reflectlite.Type) bool": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).Comparable() bool": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).Elem() internal/reflectlite.Type": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).Implements(u internal/reflectlite.Type) bool": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).Kind() internal/reflectlite.Kind": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).Name() string": [
        [],
        []
    ],
    "func (internal/reflectlite.Type).common() *internal/reflectlite.rtype": [
        [],
        []
    ],
    "func (internal/testlog.Interface).Chdir(dir string)": [
        []
    ],
    "func (internal/testlog.Interface).Getenv(key string)": [
        []
    ],
    "func (internal/testlog.Interface).Open(file string)": [
        []
    ],
    "func (internal/testlog.Interface).Stat(file string)": [
        []
    ],
    "func (io.Reader).Read(p []byte) (n int, err error)": [
        [],
        [],
        []
    ],
    "func (io.ReaderAt).ReadAt(p []byte, off int64) (n int, err error)": [
        [],
        [],
        []
    ],
    "func (io.ReaderFrom).ReadFrom(r io.Reader) (n int64, err error)": [
        [],
        [],
        []
    ],
    "func (io.RuneReader).ReadRune() (r rune, size int, err error)": [
        [],
        [],
        [],
        []
    ],
    "func (io.RuneScanner).UnreadRune() error": [
        [],
        []
    ],
    "func (io.StringWriter).WriteString(s string) (n int, err error)": [
        [],
        [],
        []
    ],
    "func (io.Writer).Write(p []byte) (n int, err error)": [
        [],
        [],
        []
    ],
    "func (io.WriterTo).WriteTo(w io.Writer) (n int64, err error)": [
        [],
        [],
        []
    ],
    "func (io/fs.DirEntry).IsDir() bool": [
        [],
        []
    ],
    "func (io/fs.DirEntry).Name() string": [
        [],
        []
    ],
    "func (io/fs.FS).Open(name string) (io/fs.File, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.File).Read([]byte) (int, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.File).Stat() (io/fs.FileInfo, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.FileInfo).IsDir() bool": [
        [],
        []
    ],
    "func (io/fs.FileInfo).Mode() io/fs.FileMode": [
        [],
        []
    ],
    "func (io/fs.FileInfo).Name() string": [
        [],
        []
    ],
    "func (io/fs.FileInfo).Size() int64": [
        [],
        []
    ],
    "func (io/fs.FileInfo).Sys() any": [
        [],
        []
    ],
    "func (io/fs.GlobFS).Glob(pattern string) ([]string, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.ReadDirFS).ReadDir(name string) ([]io/fs.DirEntry, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.ReadDirFile).ReadDir(n int) ([]io/fs.DirEntry, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.ReadFileFS).ReadFile(name string) ([]byte, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.StatFS).Stat(name string) (io/fs.FileInfo, error)": [
        [],
        [],
        []
    ],
    "func (io/fs.SubFS).Sub(dir string) (io/fs.FS, error)": [
        [],
        [],
        []
    ],
    "func (os.timeout).Timeout() bool": [
        [],
        []
    ],
    "func (reflect.Type).AssignableTo(u reflect.Type) bool": [
        [],
        []
    ],
    "func (reflect.Type).Bits() int": [
        [],
        []
    ],
    "func (reflect.Type).ChanDir() reflect.ChanDir": [
        [],
        []
    ],
    "func (reflect.Type).ConvertibleTo(u reflect.Type) bool": [
        [],
        []
    ],
    "func (reflect.Type).Elem() reflect.Type": [
        [],
        []
    ],
    "func (reflect.Type).Field(i int) reflect.StructField": [
        [],
        []
    ],
    "func (reflect.Type).Kind() reflect.Kind": [
        [],
        []
    ],
    "func (reflect.Type).Len() int": [
        [],
        []
    ],
    "func (reflect.Type).Name() string": [
        [],
        []
    ],
    "func (reflect.Type).NumField() int": [
        [],
        []
    ],
    "func (reflect.Type).NumMethod() int": [
        [],
        []
    ],
    "func (reflect.Type).PkgPath() string": [
        [],
        []
    ],
    "func (reflect.Type).Size() uintptr": [
        [],
        []
    ],
    "func (reflect.Type).String() string": [
        [],
        []
    ],
    "func (reflect.Type).common() *reflect.rtype": [
        [],
        []
    ],
    "func (reflect.Value).IsZero() bool": [
        [],
        []
    ],
    "func (runtime.stringer).String() string": [
        [],
        []
    ],
    "func (sort.Interface).Len() int": [
        [],
        []
    ],
    "func (sort.Interface).Less(i int, j int) bool": [
        [],
        []
    ],
    "func (sort.Interface).Swap(i int, j int)": [
        []
    ],
    "func (sync.Locker).Lock()": [
        []
    ],
    "func (sync.Locker).Unlock()": [
        []
    ],
    "func (syscall.RoutingMessage).sockaddr() ([]syscall.Sockaddr, error)": [
        [],
        [],
        []
    ],
    "func (syscall.Sockaddr).sockaddr() (ptr unsafe.Pointer, len syscall._Socklen, err error)": [
        [],
        [],
        [],
        []
    ],
    "func internal/abi.FuncPCABI0(f any) uintptr": [
        []
    ],
    "func internal/abi.FuncPCABIInternal(f any) uintptr": [
        []
    ],
    "func internal/bytealg.IndexByteString(s string, c byte) int": [
        []
    ],
    "func internal/cpu.cpuid(eaxArg uint32, ecxArg uint32) (eax uint32, ebx uint32, ecx uint32, edx uint32)": [
        [],
        [],
        [],
        []
    ],
    "func internal/cpu.xgetbv() (eax uint32, edx uint32)": [
        [],
        []
    ],
    "func internal/fmtsort.compare(aVal reflect.Value, bVal reflect.Value) int": [
        []
    ],
    "func internal/poll.fcntl(fd int, cmd int, arg int) (int, error)": [
        [],
        []
    ],
    "func internal/poll.fdopendir(fd int) (dir uintptr, err error)": [
        [],
        []
    ],
    "func internal/poll.runtime_Semacquire(sema *uint32)": [],
    "func internal/poll.runtime_Semrelease(sema *uint32)": [],
    "func internal/poll.runtime_isPollServerDescriptor(fd uintptr) bool": [
        []
    ],
    "func internal/poll.runtime_pollClose(ctx uintptr)": [],
    "func internal/poll.runtime_pollOpen(fd uintptr) (uintptr, int)": [
        [],
        []
    ],
    "func internal/poll.runtime_pollReset(ctx uintptr, mode int) int": [
        []
    ],
    "func internal/poll.runtime_pollUnblock(ctx uintptr)": [],
    "func internal/poll.runtime_pollWait(ctx uintptr, mode int) int": [
        []
    ],
    "func internal/poll.runtime_pollWaitCanceled(ctx uintptr, mode int) int": [
        []
    ],
    "func internal/reflectlite.chanlen(unsafe.Pointer) int": [
        []
    ],
    "func internal/reflectlite.haveIdenticalUnderlyingType(T *internal/reflectlite.rtype, V *internal/reflectlite.rtype, cmpTags bool) bool": [
        []
    ],
    "func internal/reflectlite.ifaceE2I(t *internal/reflectlite.rtype, src any, dst unsafe.Pointer)": [],
    "func internal/reflectlite.maplen(unsafe.Pointer) int": [
        []
    ],
    "func internal/reflectlite.resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer": [
        []
    ],
    "func internal/reflectlite.resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer": [
        []
    ],
    "func internal/reflectlite.typedmemmove(t *internal/reflectlite.rtype, dst unsafe.Pointer, src unsafe.Pointer)": [],
    "func internal/reflectlite.unsafe_New(*internal/reflectlite.rtype) unsafe.Pointer": [
        []
    ],
    "func internal/syscall/unix.RecvfromInet4(fd int, p []byte, flags int, from *syscall.SockaddrInet4) (int, error)": [
        [],
        []
    ],
    "func internal/syscall/unix.RecvmsgInet6(fd int, p []byte, oob []byte, flags int, from *syscall.SockaddrInet6) (n int, oobn int, recvflags int, err error)": [
        [],
        [],
        [],
        []
    ],
    "func internal/syscall/unix.SendtoInet6(fd int, p []byte, flags int, to *syscall.SockaddrInet6) (err error)": [
        []
    ],
    "func internal/syscall/unix.fcntl(fd int, cmd int, arg int) (int, error)": [
        [],
        []
    ],
    "func internal/syscall/unix.fstatat(dirfd int, path string, stat *syscall.Stat_t, flags int) error": [
        []
    ],
    "func internal/syscall/unix.unlinkat(dirfd int, path string, flags int) error": [
        []
    ],
    "func io/fs.Glob(fsys io/fs.FS, pattern string) (matches []string, err error)": [
        [],
        []
    ],
    "func io/fs.walkDir(fsys io/fs.FS, name string, d io/fs.DirEntry, walkDirFn io/fs.WalkDirFunc) error": [
        []
    ],
    "func math.Modf(f float64) (int float64, frac float64)": [
        [],
        []
    ],
    "func math.Pow(x float64, y float64) float64": [
        []
    ],
    "func math.archExp(x float64) float64": [
        []
    ],
    "func math.archFloor(x float64) float64": [
        []
    ],
    "func math.archHypot(p float64, q float64) float64": [
        []
    ],
    "func math.archLog(x float64) float64": [
        []
    ],
    "func math.archMax(x float64, y float64) float64": [
        []
    ],
    "func math.archSqrt(x float64) float64": [
        []
    ],
    "func math.archTrunc(x float64) float64": [
        []
    ],
    "func os.MkdirAll(path string, perm io/fs.FileMode) error": [
        []
    ],
    "func os.closedir(dir uintptr) (err error)": [
        []
    ],
    "func os.fastrand() uint32": [
        []
    ],
    "func os.readdir_r(dir uintptr, entry *syscall.Dirent, result **syscall.Dirent) (res syscall.Errno)": [
        []
    ],
    "func os.removeAllFrom(parent *os.File, base string) error": [
        []
    ],
    "func os.runtime_args() []string": [
        []
    ],
    "func os.runtime_beforeExit()": [],
    "func os.sigpipe()": [],
    "func reflect.StructOf(fields []reflect.StructField) reflect.Type": [
        []
    ],
    "func reflect.addReflectOff(ptr unsafe.Pointer) int32": [
        []
    ],
    "func reflect.addTypeBits(bv *reflect.bitVector, offset uintptr, t *reflect.rtype)": [],
    "func reflect.call(stackArgsType *reflect.rtype, f unsafe.Pointer, stackArgs unsafe.Pointer, stackArgsSize uint32, stackRetOffset uint32, frameSize uint32, regArgs *internal/abi.RegArgs)": [],
    "func reflect.chancap(ch unsafe.Pointer) int": [
        []
    ],
    "func reflect.chanlen(ch unsafe.Pointer) int": [
        []
    ],
    "func reflect.chanrecv(ch unsafe.Pointer, nb bool, val unsafe.Pointer) (selected bool, received bool)": [
        [],
        []
    ],
    "func reflect.chansend(ch unsafe.Pointer, val unsafe.Pointer, nb bool) bool": [
        []
    ],
    "func reflect.deepValueEqual(v1 reflect.Value, v2 reflect.Value, visited map[reflect.visit]bool) bool": [
        []
    ],
    "func reflect.hashMightPanic(t *reflect.rtype) bool": [
        []
    ],
    "func reflect.haveIdenticalType(T reflect.Type, V reflect.Type, cmpTags bool) bool": [
        []
    ],
    "func reflect.ifaceE2I(t *reflect.rtype, src any, dst unsafe.Pointer)": [],
    "func reflect.isReflexive(t *reflect.rtype) bool": [
        []
    ],
    "func reflect.makechan(typ *reflect.rtype, size int) (ch unsafe.Pointer)": [
        []
    ],
    "func reflect.mapaccess(t *reflect.rtype, m unsafe.Pointer, key unsafe.Pointer) (val unsafe.Pointer)": [
        []
    ],
    "func reflect.mapaccess_faststr(t *reflect.rtype, m unsafe.Pointer, key string) (val unsafe.Pointer)": [
        []
    ],
    "func reflect.mapiterelem(it *reflect.hiter) (elem unsafe.Pointer)": [
        []
    ],
    "func reflect.mapiterinit(t *reflect.rtype, m unsafe.Pointer, it *reflect.hiter)": [],
    "func reflect.mapiterkey(it *reflect.hiter) (key unsafe.Pointer)": [
        []
    ],
    "func reflect.mapiternext(it *reflect.hiter)": [],
    "func reflect.maplen(m unsafe.Pointer) int": [
        []
    ],
    "func reflect.memmove(dst unsafe.Pointer, src unsafe.Pointer, size uintptr)": [],
    "func reflect.needKeyUpdate(t *reflect.rtype) bool": [
        []
    ],
    "func reflect.resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer": [
        []
    ],
    "func reflect.resolveTextOff(rtype unsafe.Pointer, off int32) unsafe.Pointer": [
        []
    ],
    "func reflect.resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer": [
        []
    ],
    "func reflect.typedmemclr(t *reflect.rtype, ptr unsafe.Pointer)": [],
    "func reflect.typedmemclrpartial(t *reflect.rtype, ptr unsafe.Pointer, off uintptr, size uintptr)": [],
    "func reflect.typedmemmove(t *reflect.rtype, dst unsafe.Pointer, src unsafe.Pointer)": [],
    "func reflect.typedslicecopy(elemType *reflect.rtype, dst internal/unsafeheader.Slice, src internal/unsafeheader.Slice) int": [
        []
    ],
    "func reflect.typelinks() (sections []unsafe.Pointer, offset [][]int32)": [
        [],
        []
    ],
    "func reflect.unsafe_New(*reflect.rtype) unsafe.Pointer": [
        []
    ],
    "func reflect.unsafe_NewArray(*reflect.rtype, int) unsafe.Pointer": [
        []
    ],
    "func reflect.verifyNotInHeapPtr(p uintptr) bool": [
        []
    ],
    "func runtime._ExternalCode()": [],
    "func runtime._GC()": [],
    "func runtime._LostExternalCode()": [],
    "func runtime._LostSIGPROFDuringAtomic64()": [],
    "func runtime._System()": [],
    "func runtime._VDSO()": [],
    "func runtime.asmcgocall(fn unsafe.Pointer, arg unsafe.Pointer) int32": [
        []
    ],
    "func runtime.asmcgocall_no_g(fn unsafe.Pointer, arg unsafe.Pointer)": [],
    "func runtime.binarySearchTree(x *runtime.stackObjectBuf, idx int, n int) (root *runtime.stackObject, restBuf *runtime.stackObjectBuf, restIdx int)": [
        [],
        [],
        []
    ],
    "func runtime.cgoCheckArg(t *runtime._type, p unsafe.Pointer, indir bool, top bool, msg string)": [],
    "func runtime.cgoCheckUsingType(typ *runtime._type, src unsafe.Pointer, off uintptr, size uintptr)": [],
    "func runtime.checkASM() bool": [
        []
    ],
    "func runtime.cputicks() int64": [
        []
    ],
    "func runtime.doInit(t *runtime.initTask)": [],
    "func runtime.gcWriteBarrierBX()": [],
    "func runtime.getcallerpc() uintptr": [
        []
    ],
    "func runtime.getcallersp() uintptr": [
        []
    ],
    "func runtime.getclosureptr() uintptr": [
        []
    ],
    "func runtime.getg() *runtime.g": [
        []
    ],
    "func runtime.gogo(buf *runtime.gobuf)": [],
    "func runtime.itabAdd(m *runtime.itab)": [],
    "func runtime.main_main()": [],
    "func runtime.mcall(fn func(*runtime.g))": [],
    "func runtime.memclrNoHeapPointers(ptr unsafe.Pointer, n uintptr)": [],
    "func runtime.memequal(a unsafe.Pointer, b unsafe.Pointer, size uintptr) bool": [
        []
    ],
    "func runtime.memhash(p unsafe.Pointer, h uintptr, s uintptr) uintptr": [
        []
    ],
    "func runtime.memhash32(p unsafe.Pointer, h uintptr) uintptr": [
        []
    ],
    "func runtime.memhash64(p unsafe.Pointer, h uintptr) uintptr": [
        []
    ],
    "func runtime.memmove(to unsafe.Pointer, from unsafe.Pointer, n uintptr)": [],
    "func runtime.printpanics(p *runtime._panic)": [],
    "func runtime.procyield(cycles uint32)": [],
    "func runtime.publicationBarrier()": [],
    "func runtime.reflectcall(stackArgsType *runtime._type, fn unsafe.Pointer, stackArgs unsafe.Pointer, stackArgsSize uint32, stackRetOffset uint32, frameSize uint32, regArgs *internal/abi.RegArgs)": [],
    "func runtime.return0()": [],
    "func runtime.setg(gg *runtime.g)": [],
    "func runtime.sigfwd(fn uintptr, sig uint32, info *runtime.siginfo, ctx unsafe.Pointer)": [],
    "func runtime.strhash(p unsafe.Pointer, h uintptr) uintptr": [
        []
    ],
    "func runtime.sync_atomic_StoreUintptr(ptr *uintptr, new uintptr)": [],
    "func runtime.systemstack(fn func())": [],
    "func runtime.typehash(t *runtime._type, p unsafe.Pointer, h uintptr) uintptr": [
        []
    ],
    "func runtime.typesEqual(t *runtime._type, v *runtime._type, seen map[runtime._typePair]struct{}) bool": [
        []
    ],
    "func runtime/internal/atomic.And(ptr *uint32, val uint32)": [],
    "func runtime/internal/atomic.And8(ptr *uint8, val uint8)": [],
    "func runtime/internal/atomic.Cas(ptr *uint32, old uint32, new uint32) bool": [
        []
    ],
    "func runtime/internal/atomic.Cas64(ptr *uint64, old uint64, new uint64) bool": [
        []
    ],
    "func runtime/internal/atomic.CasRel(ptr *uint32, old uint32, new uint32) bool": [
        []
    ],
    "func runtime/internal/atomic.Casint32(ptr *int32, old int32, new int32) bool": [
        []
    ],
    "func runtime/internal/atomic.Casint64(ptr *int64, old int64, new int64) bool": [
        []
    ],
    "func runtime/internal/atomic.Casp1(ptr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) bool": [
        []
    ],
    "func runtime/internal/atomic.Casuintptr(ptr *uintptr, old uintptr, new uintptr) bool": [
        []
    ],
    "func runtime/internal/atomic.Loadint32(ptr *int32) int32": [
        []
    ],
    "func runtime/internal/atomic.Loadint64(ptr *int64) int64": [
        []
    ],
    "func runtime/internal/atomic.Loaduint(ptr *uint) uint": [
        []
    ],
    "func runtime/internal/atomic.Loaduintptr(ptr *uintptr) uintptr": [
        []
    ],
    "func runtime/internal/atomic.Or(ptr *uint32, val uint32)": [],
    "func runtime/internal/atomic.Or8(ptr *uint8, val uint8)": [],
    "func runtime/internal/atomic.Store(ptr *uint32, val uint32)": [],
    "func runtime/internal/atomic.Store64(ptr *uint64, val uint64)": [],
    "func runtime/internal/atomic.Store8(ptr *uint8, val uint8)": [],
    "func runtime/internal/atomic.StoreRel(ptr *uint32, val uint32)": [],
    "func runtime/internal/atomic.StoreRel64(ptr *uint64, val uint64)": [],
    "func runtime/internal/atomic.Storeint32(ptr *int32, new int32)": [],
    "func runtime/internal/atomic.Storeint64(ptr *int64, new int64)": [],
    "func runtime/internal/atomic.StorepNoWB(ptr unsafe.Pointer, val unsafe.Pointer)": [],
    "func runtime/internal/atomic.Storeuintptr(ptr *uintptr, new uintptr)": [],
    "func runtime/internal/atomic.Xadd(ptr *uint32, delta int32) uint32": [
        []
    ],
    "func runtime/internal/atomic.Xadd64(ptr *uint64, delta int64) uint64": [
        []
    ],
    "func runtime/internal/atomic.Xaddint64(ptr *int64, delta int64) int64": [
        []
    ],
    "func runtime/internal/atomic.Xadduintptr(ptr *uintptr, delta uintptr) uintptr": [
        []
    ],
    "func runtime/internal/atomic.Xchg(ptr *uint32, new uint32) uint32": [
        []
    ],
    "func runtime/internal/atomic.Xchg64(ptr *uint64, new uint64) uint64": [
        []
    ],
    "func runtime/internal/atomic.Xchgint32(ptr *int32, new int32) int32": [
        []
    ],
    "func runtime/internal/atomic.Xchguintptr(ptr *uintptr, new uintptr) uintptr": [
        []
    ],
    "func sort.quickSort(data sort.Interface, a int, b int, maxDepth int)": [],
    "func sort.quickSort_func(data sort.lessSwap, a int, b int, maxDepth int)": [],
    "func sort.symMerge(data sort.Interface, a int, m int, b int)": [],
    "func sort.symMerge_func(data sort.lessSwap, a int, m int, b int)": [],
    "func sync.fastrandn(n uint32) uint32": [
        []
    ],
    "func sync.runtime_LoadAcquintptr(ptr *uintptr) uintptr": [
        []
    ],
    "func sync.runtime_SemacquireMutex(s *uint32, lifo bool, skipframes int)": [],
    "func sync.runtime_Semrelease(s *uint32, handoff bool, skipframes int)": [],
    "func sync.runtime_StoreReluintptr(ptr *uintptr, val uintptr) uintptr": [
        []
    ],
    "func sync.runtime_canSpin(i int) bool": [
        []
    ],
    "func sync.runtime_doSpin()": [],
    "func sync.runtime_nanotime() int64": [
        []
    ],
    "func sync.runtime_notifyListCheck(size uintptr)": [],
    "func sync.runtime_notifyListWait(l *sync.notifyList, t uint32)": [],
    "func sync.runtime_procPin() int": [
        []
    ],
    "func sync.runtime_procUnpin()": [],
    "func sync.runtime_registerPoolCleanup(cleanup func())": [],
    "func sync.throw(string)": [],
    "func sync/atomic.AddInt32(addr *int32, delta int32) (new int32)": [
        []
    ],
    "func sync/atomic.AddUint64(addr *uint64, delta uint64) (new uint64)": [
        []
    ],
    "func sync/atomic.CompareAndSwapInt32(addr *int32, old int32, new int32) (swapped bool)": [
        []
    ],
    "func sync/atomic.CompareAndSwapPointer(addr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) (swapped bool)": [
        []
    ],
    "func sync/atomic.CompareAndSwapUint64(addr *uint64, old uint64, new uint64) (swapped bool)": [
        []
    ],
    "func sync/atomic.LoadInt32(addr *int32) (val int32)": [
        []
    ],
    "func sync/atomic.LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)": [
        []
    ],
    "func sync/atomic.LoadUint32(addr *uint32) (val uint32)": [
        []
    ],
    "func sync/atomic.LoadUint64(addr *uint64) (val uint64)": [
        []
    ],
    "func sync/atomic.LoadUintptr(addr *uintptr) (val uintptr)": [
        []
    ],
    "func sync/atomic.StoreInt32(addr *int32, val int32)": [],
    "func sync/atomic.StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)": [],
    "func sync/atomic.StoreUint32(addr *uint32, val uint32)": [],
    "func sync/atomic.StoreUintptr(addr *uintptr, val uintptr)": [],
    "func sync/atomic.SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)": [
        []
    ],
    "func sync/atomic.runtime_procPin()": [],
    "func sync/atomic.runtime_procUnpin()": [],
    "func syscall.Exit(code int)": [],
    "func syscall.RawSyscall(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)": [
        [],
        [],
        []
    ],
    "func syscall.rawSyscall(fn uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)": [
        [],
        [],
        []
    ],
    "func syscall.runtime_AfterFork()": [],
    "func syscall.runtime_AfterForkInChild()": [],
    "func syscall.runtime_BeforeExec()": [],
    "func syscall.runtime_BeforeFork()": [],
    "func syscall.runtime_envs() []string": [
        []
    ],
    "func syscall.syscall(fn uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)": [
        [],
        [],
        []
    ],
    "func syscall.syscall6(fn uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)": [
        [],
        [],
        []
    ],
    "func syscall.syscall6X(fn uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)": [
        [],
        [],
        []
    ],
    "func syscall.syscallX(fn uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)": [
        [],
        [],
        []
    ],
    "func syscall.unsetenv_c(k string)": [],
    "func time.runtimeNano() int64": [
        []
    ],
    "internal/abi.FuncPCABI0": [
        []
    ],
    "internal/abi.FuncPCABIInternal": [
        []
    ],
    "internal/abi.init": [],
    "internal/bytealg.Compare": [
        []
    ],
    "internal/bytealg.Count": [
        []
    ],
    "internal/bytealg.CountString": [
        []
    ],
    "internal/bytealg.Cutover": [
        [0]
    ],
    "internal/bytealg.Equal": [
        [0, 1]
    ],
    "internal/bytealg.HashStr": [
        [0],
        []
    ],
    "internal/bytealg.HashStrBytes": [
        [0],
        []
    ],
    "internal/bytealg.HashStrRev": [
        [0],
        []
    ],
    "internal/bytealg.HashStrRevBytes": [
        [0],
        []
    ],
    "internal/bytealg.Index": [
        []
    ],
    "internal/bytealg.IndexByte": [
        []
    ],
    "internal/bytealg.IndexByteString": [
        []
    ],
    "internal/bytealg.IndexRabinKarp": [
        []
    ],
    "internal/bytealg.IndexRabinKarpBytes": [
        []
    ],
    "internal/bytealg.IndexString": [
        []
    ],
    "internal/bytealg.abigen_runtime_cmpstring": [
        []
    ],
    "internal/bytealg.abigen_runtime_memequal": [
        []
    ],
    "internal/bytealg.abigen_runtime_memequal_varlen": [
        []
    ],
    "internal/bytealg.countGeneric": [
        []
    ],
    "internal/bytealg.countGenericString": [
        []
    ],
    "internal/bytealg.init": [],
    "internal/bytealg.init#1": [],
    "internal/cpu.Initialize": [],
    "internal/cpu.Name": [
        []
    ],
    "internal/cpu.appendBytes": [
        [0, 1]
    ],
    "internal/cpu.cpuid": [
        [],
        [],
        [],
        []
    ],
    "internal/cpu.doinit": [],
    "internal/cpu.indexByte": [
        []
    ],
    "internal/cpu.init": [],
    "internal/cpu.isSet": [
        [0, 1]
    ],
    "internal/cpu.processOptions": [],
    "internal/cpu.xgetbv": [
        [],
        []
    ],
    "internal/fmtsort.Sort": [
        [0]
    ],
    "internal/fmtsort.compare": [
        []
    ],
    "internal/fmtsort.floatCompare": [
        []
    ],
    "internal/fmtsort.init": [],
    "internal/fmtsort.isNaN": [
        [0]
    ],
    "internal/fmtsort.nilCompare": [
        [],
        []
    ],
    "internal/goarch.init": [],
    "internal/goexperiment.init": [],
    "internal/goos.init": [],
    "internal/itoa.Itoa": [
        [0]
    ],
    "internal/itoa.Uitoa": [
        [0]
    ],
    "internal/itoa.init": [],
    "internal/oserror.init": [],
    "internal/poll.DupCloseOnExec": [
        [],
        [],
        []
    ],
    "internal/poll.IsPollDescriptor": [
        []
    ],
    "internal/poll.SendFile": [
        [3],
        []
    ],
    "internal/poll.accept": [
        [],
        [],
        [],
        []
    ],
    "internal/poll.consume": [],
    "internal/poll.convertErr": [
        []
    ],
    "internal/poll.dupCloseOnExecOld": [
        [],
        [],
        []
    ],
    "internal/poll.errClosing": [
        []
    ],
    "internal/poll.errnoErr": [
        [0]
    ],
    "internal/poll.fcntl": [
        [],
        []
    ],
    "internal/poll.fdopendir": [
        [],
        []
    ],
    "internal/poll.ignoringEINTR": [
        []
    ],
    "internal/poll.ignoringEINTRIO": [
        [],
        []
    ],
    "internal/poll.init": [],
    "internal/poll.init$1": [],
    "internal/poll.newIovecWithBase": [
        [0]
    ],
    "internal/poll.runtimeNano": [
        []
    ],
    "internal/poll.runtime_Semacquire": [],
    "internal/poll.runtime_Semrelease": [],
    "internal/poll.runtime_isPollServerDescriptor": [
        []
    ],
    "internal/poll.runtime_pollClose": [],
    "internal/poll.runtime_pollOpen": [
        [],
        []
    ],
    "internal/poll.runtime_pollReset": [
        []
    ],
    "internal/poll.runtime_pollServerInit": [],
    "internal/poll.runtime_pollSetDeadline": [],
    "internal/poll.runtime_pollUnblock": [],
    "internal/poll.runtime_pollWait": [
        []
    ],
    "internal/poll.runtime_pollWaitCanceled": [
        []
    ],
    "internal/poll.setDeadlineImpl": [
        []
    ],
    "internal/poll.writev": [
        [],
        []
    ],
    "internal/race.Acquire": [],
    "internal/race.Disable": [],
    "internal/race.Enable": [],
    "internal/race.Errors": [
        []
    ],
    "internal/race.Read": [],
    "internal/race.ReadRange": [],
    "internal/race.Release": [],
    "internal/race.ReleaseMerge": [],
    "internal/race.Write": [],
    "internal/race.WriteRange": [],
    "internal/race.init": [],
    "internal/reflectlite.Swapper": [
        []
    ],
    "internal/reflectlite.Swapper$1": [],
    "internal/reflectlite.Swapper$2": [],
    "internal/reflectlite.Swapper$3": [],
    "internal/reflectlite.Swapper$4": [],
    "internal/reflectlite.Swapper$5": [],
    "internal/reflectlite.Swapper$6": [],
    "internal/reflectlite.Swapper$7": [],
    "internal/reflectlite.Swapper$8": [],
    "internal/reflectlite.Swapper$9": [],
    "internal/reflectlite.TypeOf": [
        [0]
    ],
    "internal/reflectlite.ValueOf": [
        [0]
    ],
    "internal/reflectlite.add": [
        [0, 1]
    ],
    "internal/reflectlite.arrayAt": [
        [0, 1, 2]
    ],
    "internal/reflectlite.chanlen": [
        []
    ],
    "internal/reflectlite.directlyAssignable": [
        [0, 1]
    ],
    "internal/reflectlite.escapes": [],
    "internal/reflectlite.haveIdenticalType": [
        [0, 1]
    ],
    "internal/reflectlite.haveIdenticalUnderlyingType": [
        [0, 1]
    ],
    "internal/reflectlite.ifaceE2I": [],
    "internal/reflectlite.ifaceIndir": [
        [0]
    ],
    "internal/reflectlite.implements": [
        []
    ],
    "internal/reflectlite.init": [],
    "internal/reflectlite.maplen": [
        []
    ],
    "internal/reflectlite.methodName": [
        []
    ],
    "internal/reflectlite.packEface": [
        []
    ],
    "internal/reflectlite.resolveNameOff": [
        []
    ],
    "internal/reflectlite.resolveTypeOff": [
        []
    ],
    "internal/reflectlite.toType": [
        [0]
    ],
    "internal/reflectlite.typedmemmove": [],
    "internal/reflectlite.unpackEface": [
        [0]
    ],
    "internal/reflectlite.unsafe_New": [
        []
    ],
    "internal/reflectlite.valueInterface": [
        [0]
    ],
    "internal/syscall/execenv.Default": [
        [],
        []
    ],
    "internal/syscall/execenv.init": [],
    "internal/syscall/unix.Fstatat": [
        []
    ],
    "internal/syscall/unix.GetEntropy": [
        []
    ],
    "internal/syscall/unix.IsNonblock": [
        [],
        []
    ],
    "internal/syscall/unix.Openat": [
        [],
        []
    ],
    "internal/syscall/unix.RecvfromInet4": [
        [],
        []
    ],
    "internal/syscall/unix.RecvfromInet6": [
        [],
        []
    ],
    "internal/syscall/unix.RecvmsgInet4": [
        [],
        [],
        [],
        []
    ],
    "internal/syscall/unix.RecvmsgInet6": [
        [],
        [],
        [],
        []
    ],
    "internal/syscall/unix.SendmsgNInet4": [
        [],
        []
    ],
    "internal/syscall/unix.SendmsgNInet6": [
        [],
        []
    ],
    "internal/syscall/unix.SendtoInet4": [
        []
    ],
    "internal/syscall/unix.SendtoInet6": [
        []
    ],
    "internal/syscall/unix.Unlinkat": [
        []
    ],
    "internal/syscall/unix.fcntl": [
        [],
        []
    ],
    "internal/syscall/unix.fstatat": [
        []
    ],
    "internal/syscall/unix.init": [],
    "internal/syscall/unix.libc_getentropy_trampoline": [],
    "internal/syscall/unix.openat": [
        [],
        []
    ],
    "internal/syscall/unix.syscall_syscall": [
        [],
        [],
        []
    ],
    "internal/syscall/unix.unlinkat": [
        []
    ],
    "internal/testlog.Getenv": [],
    "internal/testlog.Logger": [
        []
    ],
    "internal/testlog.Open": [],
    "internal/testlog.PanicOnExit0": [
        []
    ],
    "internal/testlog.SetLogger": [],
    "internal/testlog.SetPanicOnExit0": [],
    "internal/testlog.Stat": [],
    "internal/testlog.init": [],
    "internal/unsafeheader.init": [],
    "io.Copy": [
        [],
        []
    ],
    "io.CopyBuffer": [
        [],
        []
    ],
    "io.CopyN": [
        [2],
        []
    ],
    "io.LimitReader": [
        [0, 1]
    ],
    "io.MultiReader": [
        [0]
    ],
    "io.MultiWriter": [
        [0]
    ],
    "io.NewSectionReader": [
        [0, 1, 2]
    ],
    "io.NopCloser": [
        [0]
    ],
    "io.Pipe": [
        [],
        []
    ],
    "io.ReadAll": [
        [],
        []
    ],
    "io.ReadAtLeast": [
        [],
        []
    ],
    "io.ReadFull": [
        [],
        []
    ],
    "io.TeeReader": [
        [0, 1]
    ],
    "io.WriteString": [
        [],
        []
    ],
    "io.copyBuffer": [
        [],
        []
    ],
    "io.init": [],
    "io.init$1": [
        []
    ],
    "io/fs.FileInfoToDirEntry": [
        [0]
    ],
    "io/fs.Glob": [
        [1],
        []
    ],
    "io/fs.ReadDir": [
        [],
        [1]
    ],
    "io/fs.ReadDir$1": [
        []
    ],
    "io/fs.ReadFile": [
        [],
        []
    ],
    "io/fs.Stat": [
        [],
        []
    ],
    "io/fs.Sub": [
        [0, 1],
        [1]
    ],
    "io/fs.ValidPath": [
        []
    ],
    "io/fs.WalkDir": [
        []
    ],
    "io/fs.cleanGlobPath": [
        [0]
    ],
    "io/fs.errClosed": [
        []
    ],
    "io/fs.errExist": [
        []
    ],
    "io/fs.errInvalid": [
        []
    ],
    "io/fs.errNotExist": [
        []
    ],
    "io/fs.errPermission": [
        []
    ],
    "io/fs.glob": [
        [1, 3],
        []
    ],
    "io/fs.hasMeta": [
        []
    ],
    "io/fs.init": [],
    "io/fs.walkDir": [
        []
    ],
    "math.Abs": [
        [0]
    ],
    "math.Acos": [
        [0]
    ],
    "math.Acosh": [
        [0]
    ],
    "math.Asin": [
        [0]
    ],
    "math.Asinh": [
        [0]
    ],
    "math.Atan": [
        [0]
    ],
    "math.Atan2": [
        [0, 1]
    ],
    "math.Atanh": [
        [0]
    ],
    "math.Cbrt": [
        [0]
    ],
    "math.Ceil": [
        [0]
    ],
    "math.Copysign": [
        [0, 1]
    ],
    "math.Cos": [
        [0]
    ],
    "math.Cosh": [
        [0]
    ],
    "math.Dim": [
        [0, 1]
    ],
    "math.Erf": [
        [0]
    ],
    "math.Erfc": [
        [0]
    ],
    "math.Erfcinv": [
        [0]
    ],
    "math.Erfinv": [
        [0]
    ],
    "math.Exp": [
        [0]
    ],
    "math.Exp2": [
        [0]
    ],
    "math.Expm1": [
        [0]
    ],
    "math.FMA": [
        [0, 1, 2]
    ],
    "math.Float32bits": [
        [0]
    ],
    "math.Float32frombits": [
        [0]
    ],
    "math.Float64bits": [
        [0]
    ],
    "math.Float64frombits": [
        [0]
    ],
    "math.Floor": [
        [0]
    ],
    "math.Frexp": [
        [0],
        [0]
    ],
    "math.Gamma": [
        [0]
    ],
    "math.Hypot": [
        [0, 1]
    ],
    "math.Ilogb": [
        [0]
    ],
    "math.Inf": [
        []
    ],
    "math.IsInf": [
        [0]
    ],
    "math.IsNaN": [
        [0]
    ],
    "math.J0": [
        [0]
    ],
    "math.J1": [
        [0]
    ],
    "math.Jn": [
        [0, 1]
    ],
    "math.Ldexp": [
        [0, 1]
    ],
    "math.Lgamma": [
        [0],
        []
    ],
    "math.Log": [
        [0]
    ],
    "math.Log10": [
        [0]
    ],
    "math.Log1p": [
        [0]
    ],
    "math.Log2": [
        [0]
    ],
    "math.Logb": [
        [0]
    ],
    "math.Max": [
        [0, 1]
    ],
    "math.Min": [
        [0, 1]
    ],
    "math.Mod": [
        [0, 1]
    ],
    "math.Modf": [
        [0],
        [0]
    ],
    "math.NaN": [
        []
    ],
    "math.Nextafter": [
        [0, 1]
    ],
    "math.Nextafter32": [
        [0, 1]
    ],
    "math.Pow": [
        [0, 1]
    ],
    "math.Pow10": [
        []
    ],
    "math.Remainder": [
        [0, 1]
    ],
    "math.Round": [
        [0]
    ],
    "math.RoundToEven": [
        [0]
    ],
    "math.Signbit": [
        [0]
    ],
    "math.Sin": [
        [0]
    ],
    "math.Sincos": [
        [0],
        [0]
    ],
    "math.Sinh": [
        [0]
    ],
    "math.Sqrt": [
        [0]
    ],
    "math.Tan": [
        [0]
    ],
    "math.Tanh": [
        [0]
    ],
    "math.Trunc": [
        [0]
    ],
    "math.Y0": [
        [0]
    ],
    "math.Y1": [
        [0]
    ],
    "math.Yn": [
        [1]
    ],
    "math.acos": [
        [0]
    ],
    "math.acosh": [
        [0]
    ],
    "math.archAcos": [
        []
    ],
    "math.archAcosh": [
        []
    ],
    "math.archAsin": [
        []
    ],
    "math.archAsinh": [
        []
    ],
    "math.archAtan": [
        []
    ],
    "math.archAtan2": [
        []
    ],
    "math.archAtanh": [
        []
    ],
    "math.archCbrt": [
        []
    ],
    "math.archCeil": [
        []
    ],
    "math.archCos": [
        []
    ],
    "math.archCosh": [
        []
    ],
    "math.archErf": [
        []
    ],
    "math.archErfc": [
        []
    ],
    "math.archExp": [
        []
    ],
    "math.archExp2": [
        []
    ],
    "math.archExpm1": [
        []
    ],
    "math.archFloor": [
        []
    ],
    "math.archFrexp": [
        [],
        []
    ],
    "math.archHypot": [
        []
    ],
    "math.archLdexp": [
        []
    ],
    "math.archLog": [
        []
    ],
    "math.archLog10": [
        []
    ],
    "math.archLog1p": [
        []
    ],
    "math.archLog2": [
        []
    ],
    "math.archMax": [
        []
    ],
    "math.archMin": [
        []
    ],
    "math.archMod": [
        []
    ],
    "math.archModf": [
        [],
        []
    ],
    "math.archPow": [
        []
    ],
    "math.archRemainder": [
        []
    ],
    "math.archSin": [
        []
    ],
    "math.archSinh": [
        []
    ],
    "math.archSqrt": [
        []
    ],
    "math.archTan": [
        []
    ],
    "math.archTanh": [
        []
    ],
    "math.archTrunc": [
        []
    ],
    "math.asin": [
        [0]
    ],
    "math.asinh": [
        [0]
    ],
    "math.atan": [
        [0]
    ],
    "math.atan2": [
        [0, 1]
    ],
    "math.atanh": [
        [0]
    ],
    "math.cbrt": [
        [0]
    ],
    "math.ceil": [
        [0]
    ],
    "math.cos": [
        [0]
    ],
    "math.cosh": [
        [0]
    ],
    "math.erf": [
        [0]
    ],
    "math.erfc": [
        [0]
    ],
    "math.exp": [
        [0]
    ],
    "math.exp2": [
        [0]
    ],
    "math.expm1": [
        [0]
    ],
    "math.expmulti": [
        [0, 1, 2]
    ],
    "math.floor": [
        [0]
    ],
    "math.frexp": [
        [0],
        [0]
    ],
    "math.hypot": [
        [0, 1]
    ],
    "math.ilogb": [
        [0]
    ],
    "math.init": [],
    "math.isNegInt": [
        [0]
    ],
    "math.isOddInt": [
        [0]
    ],
    "math.ldexp": [
        [0, 1]
    ],
    "math.log": [
        [0]
    ],
    "math.log10": [
        [0]
    ],
    "math.log1p": [
        [0]
    ],
    "math.log2": [
        [0]
    ],
    "math.lz": [
        [0, 1]
    ],
    "math.max": [
        [0, 1]
    ],
    "math.min": [
        [0, 1]
    ],
    "math.mod": [
        [0, 1]
    ],
    "math.modf": [
        [0],
        [0]
    ],
    "math.nonzero": [
        []
    ],
    "math.normalize": [
        [0],
        []
    ],
    "math.pone": [
        [0]
    ],
    "math.pow": [
        [0, 1]
    ],
    "math.pzero": [
        [0]
    ],
    "math.qone": [
        [0]
    ],
    "math.qzero": [
        [0]
    ],
    "math.remainder": [
        [0, 1]
    ],
    "math.satan": [
        [0]
    ],
    "math.shl": [
        [0, 1, 2],
        [1, 2]
    ],
    "math.shr": [
        [0, 2],
        [0, 1, 2]
    ],
    "math.shrcompress": [
        [0, 2],
        [0, 1, 2]
    ],
    "math.sin": [
        [0]
    ],
    "math.sinPi": [
        [0]
    ],
    "math.sinh": [
        [0]
    ],
    "math.split": [
        [0],
        [0],
        [0]
    ],
    "math.sqrt": [
        [0]
    ],
    "math.stirling": [
        [0],
        [0]
    ],
    "math.tan": [
        [0]
    ],
    "math.tanh": [
        [0]
    ],
    "math.trigReduce": [
        [0],
        [0]
    ],
    "math.trunc": [
        [0]
    ],
    "math.xatan": [
        [0]
    ],
    "math.zero": [
        []
    ],
    "math/bits.Add": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Add32": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Add64": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Div": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Div32": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Div64": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.LeadingZeros": [
        [0]
    ],
    "math/bits.LeadingZeros16": [
        [0]
    ],
    "math/bits.LeadingZeros32": [
        [0]
    ],
    "math/bits.LeadingZeros64": [
        [0]
    ],
    "math/bits.LeadingZeros8": [
        [0]
    ],
    "math/bits.Len": [
        [0]
    ],
    "math/bits.Len16": [
        [0]
    ],
    "math/bits.Len32": [
        [0]
    ],
    "math/bits.Len64": [
        [0]
    ],
    "math/bits.Len8": [
        [0]
    ],
    "math/bits.Mul": [
        [0, 1],
        [0, 1]
    ],
    "math/bits.Mul32": [
        [0, 1],
        [0, 1]
    ],
    "math/bits.Mul64": [
        [0, 1],
        [0, 1]
    ],
    "math/bits.OnesCount": [
        [0]
    ],
    "math/bits.OnesCount16": [
        [0]
    ],
    "math/bits.OnesCount32": [
        [0]
    ],
    "math/bits.OnesCount64": [
        [0]
    ],
    "math/bits.OnesCount8": [
        [0]
    ],
    "math/bits.Rem": [
        [0, 1, 2]
    ],
    "math/bits.Rem32": [
        [0, 1, 2]
    ],
    "math/bits.Rem64": [
        [0, 1, 2]
    ],
    "math/bits.Reverse": [
        [0]
    ],
    "math/bits.Reverse16": [
        [0]
    ],
    "math/bits.Reverse32": [
        [0]
    ],
    "math/bits.Reverse64": [
        [0]
    ],
    "math/bits.Reverse8": [
        [0]
    ],
    "math/bits.ReverseBytes": [
        [0]
    ],
    "math/bits.ReverseBytes16": [
        [0]
    ],
    "math/bits.ReverseBytes32": [
        [0]
    ],
    "math/bits.ReverseBytes64": [
        [0]
    ],
    "math/bits.RotateLeft": [
        [0, 1]
    ],
    "math/bits.RotateLeft16": [
        [0, 1]
    ],
    "math/bits.RotateLeft32": [
        [0, 1]
    ],
    "math/bits.RotateLeft64": [
        [0, 1]
    ],
    "math/bits.RotateLeft8": [
        [0, 1]
    ],
    "math/bits.Sub": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Sub32": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.Sub64": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "math/bits.TrailingZeros": [
        []
    ],
    "math/bits.TrailingZeros16": [
        []
    ],
    "math/bits.TrailingZeros32": [
        []
    ],
    "math/bits.TrailingZeros64": [
        []
    ],
    "math/bits.TrailingZeros8": [
        [0]
    ],
    "math/bits.init": [],
    "os.Chdir": [
        [0]
    ],
    "os.Chmod": [
        [0]
    ],
    "os.Chown": [
        [0]
    ],
    "os.Chown$1": [
        []
    ],
    "os.Chtimes": [
        [0]
    ],
    "os.Clearenv": [],
    "os.Create": [
        [0],
        [0]
    ],
    "os.CreateTemp": [
        [0, 1],
        [0, 1]
    ],
    "os.DirFS": [
        [0]
    ],
    "os.Environ": [
        []
    ],
    "os.Executable": [
        [],
        []
    ],
    "os.Exit": [],
    "os.Expand": [
        [0]
    ],
    "os.ExpandEnv": [
        [0]
    ],
    "os.FindProcess": [
        [0],
        []
    ],
    "os.Getegid": [
        []
    ],
    "os.Getenv": [
        []
    ],
    "os.Geteuid": [
        []
    ],
    "os.Getgid": [
        []
    ],
    "os.Getgroups": [
        [],
        []
    ],
    "os.Getpagesize": [
        []
    ],
    "os.Getpid": [
        []
    ],
    "os.Getppid": [
        []
    ],
    "os.Getuid": [
        []
    ],
    "os.Getwd": [
        [],
        []
    ],
    "os.Hostname": [
        [],
        []
    ],
    "os.IsExist": [
        [0]
    ],
    "os.IsNotExist": [
        [0]
    ],
    "os.IsPathSeparator": [
        [0]
    ],
    "os.IsPermission": [
        [0]
    ],
    "os.IsTimeout": [
        []
    ],
    "os.Lchown": [
        [0]
    ],
    "os.Lchown$1": [
        []
    ],
    "os.Link": [
        [0, 1]
    ],
    "os.Link$1": [
        []
    ],
    "os.LookupEnv": [
        [],
        []
    ],
    "os.Lstat": [
        [],
        [0]
    ],
    "os.Mkdir": [
        [0]
    ],
    "os.Mkdir$1": [
        []
    ],
    "os.MkdirAll": [
        [0]
    ],
    "os.MkdirTemp": [
        [0, 1],
        [0, 1]
    ],
    "os.NewFile": [
        [0, 1]
    ],
    "os.NewSyscallError": [
        [0, 1]
    ],
    "os.Open": [
        [0],
        [0]
    ],
    "os.OpenFile": [
        [0],
        [0]
    ],
    "os.Pipe": [
        [],
        [],
        []
    ],
    "os.ReadDir": [
        [0],
        [0]
    ],
    "os.ReadDir$1": [
        []
    ],
    "os.ReadFile": [
        [],
        [0]
    ],
    "os.Readlink": [
        [],
        [0]
    ],
    "os.Remove": [
        [0]
    ],
    "os.Remove$1": [
        []
    ],
    "os.Remove$2": [
        []
    ],
    "os.RemoveAll": [
        [0]
    ],
    "os.Rename": [
        [0, 1]
    ],
    "os.SameFile": [
        [0, 1]
    ],
    "os.Setenv": [
        []
    ],
    "os.StartProcess": [
        [],
        [0, 2]
    ],
    "os.Stat": [
        [],
        [0]
    ],
    "os.Symlink": [
        [0, 1]
    ],
    "os.Symlink$1": [
        []
    ],
    "os.TempDir": [
        []
    ],
    "os.Truncate": [
        [0]
    ],
    "os.Truncate$1": [
        []
    ],
    "os.Unsetenv": [
        []
    ],
    "os.UserCacheDir": [
        [],
        []
    ],
    "os.UserConfigDir": [
        [],
        []
    ],
    "os.UserHomeDir": [
        [],
        []
    ],
    "os.WriteFile": [
        [0]
    ],
    "os.atime": [
        []
    ],
    "os.basename": [
        [0]
    ],
    "os.chmod": [
        [0]
    ],
    "os.chmod$1": [
        []
    ],
    "os.closedir": [
        []
    ],
    "os.containsAny": [
        []
    ],
    "os.dtToType": [
        []
    ],
    "os.endsWithDot": [
        []
    ],
    "os.epipecheck": [],
    "os.errClosed": [
        []
    ],
    "os.errDeadlineExceeded": [
        []
    ],
    "os.errNoDeadline": [
        []
    ],
    "os.executable": [
        [],
        []
    ],
    "os.fastrand": [
        []
    ],
    "os.fillFileStatFromSys": [],
    "os.findProcess": [
        [0],
        []
    ],
    "os.fixCount": [
        [0],
        [1]
    ],
    "os.fixLongPath": [
        [0]
    ],
    "os.fixRootDirectory": [
        [0]
    ],
    "os.genericReadFrom": [
        [],
        []
    ],
    "os.getShellName": [
        [0],
        []
    ],
    "os.hostname": [
        [],
        []
    ],
    "os.ignoringEINTR": [
        []
    ],
    "os.init": [],
    "os.init#1": [],
    "os.isAlphaNum": [
        [0]
    ],
    "os.isShellSpecialVar": [
        []
    ],
    "os.isWindowsNulName": [
        []
    ],
    "os.itox": [
        [0]
    ],
    "os.joinPath": [
        [0, 1]
    ],
    "os.lastIndex": [
        []
    ],
    "os.lstatNolog": [
        [],
        [0]
    ],
    "os.lstatNolog$1": [
        []
    ],
    "os.newFile": [
        [0, 1]
    ],
    "os.newFile$1": [
        []
    ],
    "os.newProcess": [
        [0, 1]
    ],
    "os.newRawConn": [
        [0],
        []
    ],
    "os.newUnixDirent": [
        [0, 1, 2],
        [0, 1]
    ],
    "os.nextRandom": [
        []
    ],
    "os.openFdAt": [
        [1],
        []
    ],
    "os.openFileNolog": [
        [0],
        [0]
    ],
    "os.prefixAndSuffix": [
        [0],
        [0],
        []
    ],
    "os.readdir_r": [
        []
    ],
    "os.removeAll": [
        [0]
    ],
    "os.removeAllFrom": [
        [1]
    ],
    "os.rename": [
        [0, 1]
    ],
    "os.rename$1": [
        []
    ],
    "os.runtime_args": [
        []
    ],
    "os.runtime_beforeExit": [],
    "os.sameFile": [
        [0, 1]
    ],
    "os.setStickyBit": [
        [0]
    ],
    "os.sigpipe": [],
    "os.splitPath": [
        [0],
        [0]
    ],
    "os.startProcess": [
        [],
        [0, 2]
    ],
    "os.statNolog": [
        [],
        [0]
    ],
    "os.statNolog$1": [
        []
    ],
    "os.syscallMode": [
        [0]
    ],
    "os.tempDir": [
        []
    ],
    "os.timespecToTime": [
        [0]
    ],
    "os.uitox": [
        [0]
    ],
    "os.underlyingError": [
        [0]
    ],
    "os.underlyingErrorIs": [
        [0]
    ],
    "os.wrapSyscallError": [
        [0, 1]
    ],
    "path.Base": [
        [0]
    ],
    "path.Clean": [
        [0]
    ],
    "path.Dir": [
        [0]
    ],
    "path.Ext": [
        [0]
    ],
    "path.IsAbs": [
        [0]
    ],
    "path.Join": [
        [0]
    ],
    "path.Match": [
        [],
        []
    ],
    "path.Split": [
        [0],
        [0]
    ],
    "path.getEsc": [
        [0],
        [0],
        []
    ],
    "path.init": [],
    "path.lastSlash": [
        []
    ],
    "path.matchChunk": [
        [1],
        [],
        []
    ],
    "path.scanChunk": [
        [],
        [0],
        [0]
    ],
    "reflect.Append": [
        [0]
    ],
    "reflect.AppendSlice": [
        [0, 1]
    ],
    "reflect.ArrayOf": [
        [0, 1]
    ],
    "reflect.ArrayOf$1": [
        []
    ],
    "reflect.ChanOf": [
        [0, 1]
    ],
    "reflect.Copy": [
        []
    ],
    "reflect.DeepEqual": [
        [0, 1]
    ],
    "reflect.FuncOf": [
        [0, 1]
    ],
    "reflect.FuncOf$1": [
        [0]
    ],
    "reflect.Indirect": [
        [0]
    ],
    "reflect.MakeChan": [
        [0]
    ],
    "reflect.MakeFunc": [
        [1]
    ],
    "reflect.MakeMap": [
        [0]
    ],
    "reflect.MakeMapWithSize": [
        [0]
    ],
    "reflect.MakeSlice": [
        [0, 1, 2]
    ],
    "reflect.MapOf": [
        [0, 1]
    ],
    "reflect.MapOf$1": [
        []
    ],
    "reflect.New": [
        [0]
    ],
    "reflect.NewAt": [
        [0, 1]
    ],
    "reflect.PointerTo": [
        [0]
    ],
    "reflect.PtrTo": [
        [0]
    ],
    "reflect.Select": [
        [],
        [],
        []
    ],
    "reflect.SliceOf": [
        [0]
    ],
    "reflect.StructOf": [
        []
    ],
    "reflect.StructOf$1": [
        [0]
    ],
    "reflect.StructOf$2": [
        [0]
    ],
    "reflect.StructOf$3": [
        [0]
    ],
    "reflect.StructOf$4": [
        [0]
    ],
    "reflect.StructOf$5": [
        [0]
    ],
    "reflect.StructOf$6": [
        []
    ],
    "reflect.Swapper": [
        []
    ],
    "reflect.Swapper$1": [],
    "reflect.Swapper$2": [],
    "reflect.Swapper$3": [],
    "reflect.Swapper$4": [],
    "reflect.Swapper$5": [],
    "reflect.Swapper$6": [],
    "reflect.Swapper$7": [],
    "reflect.Swapper$8": [],
    "reflect.Swapper$9": [],
    "reflect.TypeOf": [
        [0]
    ],
    "reflect.ValueOf": [
        [0]
    ],
    "reflect.VisibleFields": [
        []
    ],
    "reflect.Zero": [
        [0]
    ],
    "reflect.add": [
        [0, 1]
    ],
    "reflect.addReflectOff": [
        []
    ],
    "reflect.addTypeBits": [],
    "reflect.align": [
        [0, 1]
    ],
    "reflect.appendGCProg": [
        [0, 1]
    ],
    "reflect.appendVarint": [
        [0, 1]
    ],
    "reflect.archFloat32FromReg": [
        [0]
    ],
    "reflect.archFloat32ToReg": [
        [0]
    ],
    "reflect.arrayAt": [
        [0, 1, 2]
    ],
    "reflect.bucketOf": [
        [0, 1]
    ],
    "reflect.call": [],
    "reflect.callMethod": [],
    "reflect.callReflect": [],
    "reflect.chancap": [
        []
    ],
    "reflect.chanclose": [],
    "reflect.chanlen": [
        []
    ],
    "reflect.chanrecv": [
        [],
        []
    ],
    "reflect.chansend": [
        []
    ],
    "reflect.convertOp": [
        []
    ],
    "reflect.copyVal": [
        [0, 1, 2]
    ],
    "reflect.cvtBytesString": [
        [1]
    ],
    "reflect.cvtComplex": [
        []
    ],
    "reflect.cvtDirect": [
        [0]
    ],
    "reflect.cvtFloat": [
        []
    ],
    "reflect.cvtFloatInt": [
        []
    ],
    "reflect.cvtFloatUint": [
        []
    ],
    "reflect.cvtI2I": [
        [1]
    ],
    "reflect.cvtInt": [
        []
    ],
    "reflect.cvtIntFloat": [
        []
    ],
    "reflect.cvtIntString": [
        [1]
    ],
    "reflect.cvtRunesString": [
        [1]
    ],
    "reflect.cvtSliceArrayPtr": [
        [0]
    ],
    "reflect.cvtStringBytes": [
        [1]
    ],
    "reflect.cvtStringRunes": [
        [1]
    ],
    "reflect.cvtT2I": [
        []
    ],
    "reflect.cvtUint": [
        []
    ],
    "reflect.cvtUintFloat": [
        []
    ],
    "reflect.cvtUintString": [
        [1]
    ],
    "reflect.deepValueEqual": [
        [0, 1]
    ],
    "reflect.deepValueEqual$1": [
        [1]
    ],
    "reflect.deepValueEqual$2": [
        [0]
    ],
    "reflect.directlyAssignable": [
        []
    ],
    "reflect.dumpPtrBitMap": [],
    "reflect.emitGCMask": [],
    "reflect.escapes": [],
    "reflect.floatFromReg": [],
    "reflect.floatToReg": [],
    "reflect.fnv1": [
        [0, 1]
    ],
    "reflect.funcLayout": [
        [0],
        [0],
        [0]
    ],
    "reflect.funcLayout$1": [
        []
    ],
    "reflect.funcName": [
        []
    ],
    "reflect.funcStr": [
        []
    ],
    "reflect.grow": [
        [0, 1],
        [0],
        [0, 1]
    ],
    "reflect.hashMightPanic": [
        []
    ],
    "reflect.haveIdenticalType": [
        [0, 1]
    ],
    "reflect.haveIdenticalUnderlyingType": [
        []
    ],
    "reflect.ifaceE2I": [],
    "reflect.ifaceIndir": [
        [0]
    ],
    "reflect.implements": [
        []
    ],
    "reflect.init": [],
    "reflect.intFromReg": [],
    "reflect.intToReg": [],
    "reflect.isLetter": [
        [0]
    ],
    "reflect.isReflexive": [
        []
    ],
    "reflect.isValidFieldName": [
        []
    ],
    "reflect.makeBytes": [
        [0, 2]
    ],
    "reflect.makeComplex": [
        [0]
    ],
    "reflect.makeFloat": [
        [0]
    ],
    "reflect.makeFloat32": [
        [0]
    ],
    "reflect.makeFuncStub": [],
    "reflect.makeInt": [
        [0]
    ],
    "reflect.makeMethodValue": [
        [1]
    ],
    "reflect.makeRunes": [
        [0, 2]
    ],
    "reflect.makeString": [
        [0, 2]
    ],
    "reflect.makechan": [
        []
    ],
    "reflect.makemap": [
        []
    ],
    "reflect.mapaccess": [
        []
    ],
    "reflect.mapaccess_faststr": [
        []
    ],
    "reflect.mapassign": [],
    "reflect.mapassign_faststr": [],
    "reflect.mapdelete": [],
    "reflect.mapdelete_faststr": [],
    "reflect.mapiterelem": [
        []
    ],
    "reflect.mapiterinit": [],
    "reflect.mapiterkey": [
        []
    ],
    "reflect.mapiternext": [],
    "reflect.maplen": [
        []
    ],
    "reflect.memmove": [],
    "reflect.methodName": [
        []
    ],
    "reflect.methodNameSkip": [
        []
    ],
    "reflect.methodReceiver": [
        [1],
        [],
        [1]
    ],
    "reflect.methodValueCall": [],
    "reflect.methodValueCallCodePtr": [
        []
    ],
    "reflect.moveMakeFuncArgPtrs": [],
    "reflect.needKeyUpdate": [
        []
    ],
    "reflect.newAbiDesc": [
        [0]
    ],
    "reflect.newName": [
        []
    ],
    "reflect.overflowFloat32": [
        [0]
    ],
    "reflect.packEface": [
        []
    ],
    "reflect.resolveNameOff": [
        []
    ],
    "reflect.resolveReflectName": [
        []
    ],
    "reflect.resolveReflectText": [
        []
    ],
    "reflect.resolveReflectType": [
        []
    ],
    "reflect.resolveTextOff": [
        []
    ],
    "reflect.resolveTypeOff": [
        []
    ],
    "reflect.rselect": [
        [],
        []
    ],
    "reflect.rtypeOff": [
        [0, 1]
    ],
    "reflect.runtimeStructField": [
        [],
        [0]
    ],
    "reflect.specialChannelAssignability": [
        [0, 1]
    ],
    "reflect.storeRcvr": [],
    "reflect.toType": [
        [0]
    ],
    "reflect.typedmemclr": [],
    "reflect.typedmemclrpartial": [],
    "reflect.typedmemmove": [],
    "reflect.typedmemmovepartial": [],
    "reflect.typedslicecopy": [
        []
    ],
    "reflect.typehash": [
        []
    ],
    "reflect.typelinks": [
        [],
        []
    ],
    "reflect.typeptrdata": [
        [0]
    ],
    "reflect.typesByString": [
        []
    ],
    "reflect.typesMustMatch": [],
    "reflect.unpackEface": [
        [0]
    ],
    "reflect.unsafe_New": [
        []
    ],
    "reflect.unsafe_NewArray": [
        []
    ],
    "reflect.valueInterface": [
        [0]
    ],
    "reflect.verifyNotInHeapPtr": [
        []
    ],
    "reflect.writeVarint": [
        []
    ],
    "runtime.BlockProfile": [
        [],
        []
    ],
    "runtime.Breakpoint": [],
    "runtime.CPUProfile": [
        []
    ],
    "runtime.Caller": [
        [],
        [],
        [],
        []
    ],
    "runtime.Callers": [
        []
    ],
    "runtime.CallersFrames": [
        [0]
    ],
    "runtime.FuncForPC": [
        []
    ],
    "runtime.GC": [],
    "runtime.GOMAXPROCS": [
        []
    ],
    "runtime.GOROOT": [
        []
    ],
    "runtime.Goexit": [],
    "runtime.GoroutineProfile": [
        [],
        []
    ],
    "runtime.Gosched": [],
    "runtime.KeepAlive": [],
    "runtime.LockOSThread": [],
    "runtime.MemProfile": [
        [],
        []
    ],
    "runtime.MutexProfile": [
        [],
        []
    ],
    "runtime.NumCPU": [
        []
    ],
    "runtime.NumCgoCall": [
        []
    ],
    "runtime.NumGoroutine": [
        []
    ],
    "runtime.ReadMemStats": [],
    "runtime.ReadMemStats$1": [],
    "runtime.ReadTrace": [
        []
    ],
    "runtime.SetBlockProfileRate": [],
    "runtime.SetCPUProfileRate": [],
    "runtime.SetCgoTraceback": [],
    "runtime.SetFinalizer": [],
    "runtime.SetFinalizer$1": [],
    "runtime.SetFinalizer$2": [],
    "runtime.SetMutexProfileFraction": [
        []
    ],
    "runtime.Stack": [
        []
    ],
    "runtime.Stack$1": [],
    "runtime.StartTrace": [
        []
    ],
    "runtime.StartTrace$1": [],
    "runtime.StopTrace": [],
    "runtime.ThreadCreateProfile": [
        [],
        []
    ],
    "runtime.UnlockOSThread": [],
    "runtime.Version": [
        []
    ],
    "runtime._ExternalCode": [],
    "runtime._GC": [],
    "runtime._LostExternalCode": [],
    "runtime._LostSIGPROFDuringAtomic64": [],
    "runtime._System": [],
    "runtime._VDSO": [],
    "runtime._cgo_panic_internal": [],
    "runtime.abort": [],
    "runtime.abs": [
        [0]
    ],
    "runtime.acquireLockRank": [],
    "runtime.acquireSudog": [
        []
    ],
    "runtime.acquirem": [
        []
    ],
    "runtime.acquirep": [],
    "runtime.activeModules": [
        []
    ],
    "runtime.add": [
        [0, 1]
    ],
    "runtime.add1": [
        [0]
    ],
    "runtime.addAdjustedTimers": [],
    "runtime.addOneOpenDeferFrame": [],
    "runtime.addOneOpenDeferFrame$1": [],
    "runtime.addOneOpenDeferFrame$1$1": [
        []
    ],
    "runtime.addb": [
        [0, 1]
    ],
    "runtime.addfinalizer": [
        []
    ],
    "runtime.addmoduledata": [],
    "runtime.addrsToSummaryRange": [
        [1],
        [2]
    ],
    "runtime.addspecial": [
        []
    ],
    "runtime.addtimer": [],
    "runtime.adjustSignalStack": [
        []
    ],
    "runtime.adjustctxt": [],
    "runtime.adjustdefers": [],
    "runtime.adjustframe": [
        []
    ],
    "runtime.adjustpanics": [],
    "runtime.adjustpointer": [],
    "runtime.adjustpointers": [],
    "runtime.adjustsudogs": [],
    "runtime.adjusttimers": [],
    "runtime.advanceEvacuationMark": [],
    "runtime.alginit": [],
    "runtime.alignDown": [
        [0, 1]
    ],
    "runtime.alignUp": [
        [0, 1]
    ],
    "runtime.allFrames": [
        [0]
    ],
    "runtime.allGsSnapshot": [
        []
    ],
    "runtime.allgadd": [],
    "runtime.allocm": [
        [1]
    ],
    "runtime.allocm$1": [],
    "runtime.allocmcache": [
        []
    ],
    "runtime.allocmcache$1": [],
    "runtime.appendIntStr": [
        [0]
    ],
    "runtime.arenaBase": [
        [0]
    ],
    "runtime.arenaIndex": [
        [0]
    ],
    "runtime.args": [],
    "runtime.argv_index": [
        [0, 1]
    ],
    "runtime.asanpoison": [],
    "runtime.asanread": [],
    "runtime.asanunpoison": [],
    "runtime.asanwrite": [],
    "runtime.asmcgocall": [
        []
    ],
    "runtime.asmcgocall_no_g": [],
    "runtime.asminit": [],
    "runtime.assertE2I": [
        [0, 1]
    ],
    "runtime.assertE2I2": [
        [0, 1]
    ],
    "runtime.assertI2I": [
        [0, 1]
    ],
    "runtime.assertI2I2": [
        [0, 1]
    ],
    "runtime.assertLockHeld": [],
    "runtime.assertRankHeld": [],
    "runtime.assertWorldStopped": [],
    "runtime.assertWorldStoppedOrLockHeld": [],
    "runtime.asyncPreempt": [],
    "runtime.asyncPreempt2": [],
    "runtime.atoi": [
        [0],
        []
    ],
    "runtime.atoi32": [
        [0],
        []
    ],
    "runtime.atomicAllG": [
        [],
        []
    ],
    "runtime.atomicAllGIndex": [
        [0, 1]
    ],
    "runtime.atomicstorep": [],
    "runtime.atomicwb": [],
    "runtime.badPointer": [],
    "runtime.badTimer": [],
    "runtime.badcgocallback": [],
    "runtime.badctxt": [],
    "runtime.badmcall": [],
    "runtime.badmcall2": [],
    "runtime.badmorestackg0": [],
    "runtime.badmorestackgsignal": [],
    "runtime.badreflectcall": [],
    "runtime.badsignal": [],
    "runtime.badsystemstack": [],
    "runtime.badunlockosthread": [],
    "runtime.beforeIdle": [
        [],
        []
    ],
    "runtime.bgscavenge": [],
    "runtime.bgscavenge$1": [],
    "runtime.bgsweep": [],
    "runtime.binarySearchTree": [
        [],
        [0],
        [1]
    ],
    "runtime.block": [],
    "runtime.blockAlignSummaryRange": [
        [1],
        [2]
    ],
    "runtime.blockableSig": [
        []
    ],
    "runtime.blockevent": [],
    "runtime.blocksampled": [
        []
    ],
    "runtime.bool2int": [
        [0]
    ],
    "runtime.breakpoint": [],
    "runtime.bucketEvacuated": [
        [0, 1, 2]
    ],
    "runtime.bucketMask": [
        [0]
    ],
    "runtime.bucketShift": [
        [0]
    ],
    "runtime.bulkBarrierBitmap": [],
    "runtime.bulkBarrierPreWrite": [],
    "runtime.bulkBarrierPreWriteSrcOnly": [],
    "runtime.bytes": [
        []
    ],
    "runtime.bytesHash": [
        []
    ],
    "runtime.c128equal": [
        [0, 1]
    ],
    "runtime.c128hash": [
        [1]
    ],
    "runtime.c64equal": [
        [0, 1]
    ],
    "runtime.c64hash": [
        [1]
    ],
    "runtime.call1024": [],
    "runtime.call1048576": [],
    "runtime.call1073741824": [],
    "runtime.call128": [],
    "runtime.call131072": [],
    "runtime.call134217728": [],
    "runtime.call16": [],
    "runtime.call16384": [],
    "runtime.call16777216": [],
    "runtime.call2048": [],
    "runtime.call2097152": [],
    "runtime.call256": [],
    "runtime.call262144": [],
    "runtime.call268435456": [],
    "runtime.call32": [],
    "runtime.call32768": [],
    "runtime.call33554432": [],
    "runtime.call4096": [],
    "runtime.call4194304": [],
    "runtime.call512": [],
    "runtime.call524288": [],
    "runtime.call536870912": [],
    "runtime.call64": [],
    "runtime.call65536": [],
    "runtime.call67108864": [],
    "runtime.call8192": [],
    "runtime.call8388608": [],
    "runtime.callCgoSymbolizer": [],
    "runtime.callers": [
        []
    ],
    "runtime.callers$1": [],
    "runtime.canPreemptM": [
        [0]
    ],
    "runtime.canpanic": [
        []
    ],
    "runtime.cansemacquire": [
        []
    ],
    "runtime.casGFromPreempted": [
        []
    ],
    "runtime.casGToPreemptScan": [],
    "runtime.casfrom_Gscanstatus": [],
    "runtime.casgcopystack": [
        [0]
    ],
    "runtime.casgstatus": [],
    "runtime.casgstatus$1": [],
    "runtime.castogscanstatus": [
        []
    ],
    "runtime.cfuncname": [
        [0]
    ],
    "runtime.cfuncnameFromNameoff": [
        [0]
    ],
    "runtime.cgoCheckArg": [],
    "runtime.cgoCheckBits": [],
    "runtime.cgoCheckMemmove": [],
    "runtime.cgoCheckPointer": [],
    "runtime.cgoCheckResult": [],
    "runtime.cgoCheckSliceCopy": [],
    "runtime.cgoCheckTypedBlock": [],
    "runtime.cgoCheckTypedBlock$1": [],
    "runtime.cgoCheckUnknownPointer": [
        [0],
        []
    ],
    "runtime.cgoCheckUsingType": [],
    "runtime.cgoCheckWriteBarrier": [],
    "runtime.cgoCheckWriteBarrier$1": [],
    "runtime.cgoContextPCs": [],
    "runtime.cgoInRange": [
        [0, 2]
    ],
    "runtime.cgoIsGoPointer": [
        []
    ],
    "runtime.cgoSigtramp": [],
    "runtime.cgoUse": [],
    "runtime.cgocall": [
        []
    ],
    "runtime.cgocallback": [],
    "runtime.cgocallbackg": [],
    "runtime.cgocallbackg1": [],
    "runtime.cgocallbackg1$1": [],
    "runtime.cgounimpl": [],
    "runtime.chanbuf": [
        [0, 1]
    ],
    "runtime.chanparkcommit": [
        []
    ],
    "runtime.chanrecv": [
        [],
        [0, 1]
    ],
    "runtime.chanrecv$1": [],
    "runtime.chanrecv1": [],
    "runtime.chanrecv2": [
        [0, 1]
    ],
    "runtime.chansend": [
        []
    ],
    "runtime.chansend$1": [],
    "runtime.chansend1": [],
    "runtime.check": [],
    "runtime.checkASM": [
        []
    ],
    "runtime.checkIdleGCNoP": [
        [],
        []
    ],
    "runtime.checkRunqsNoP": [
        []
    ],
    "runtime.checkTimeouts": [],
    "runtime.checkTimers": [
        [1],
        [0],
        []
    ],
    "runtime.checkTimersNoP": [
        [0, 2]
    ],
    "runtime.checkdead": [],
    "runtime.checkdead$1": [],
    "runtime.checkmcount": [],
    "runtime.checkptrAlignment": [],
    "runtime.checkptrArithmetic": [],
    "runtime.checkptrBase": [
        [0]
    ],
    "runtime.checkptrStraddles": [
        [0, 1]
    ],
    "runtime.chunkBase": [
        [0]
    ],
    "runtime.chunkIndex": [
        [0]
    ],
    "runtime.chunkPageIndex": [
        [0]
    ],
    "runtime.cleantimers": [],
    "runtime.clearDeletedTimers": [],
    "runtime.clearSignalHandlers": [],
    "runtime.clearpools": [],
    "runtime.clobberfree": [],
    "runtime.close_trampoline": [],
    "runtime.closechan": [],
    "runtime.closefd": [
        []
    ],
    "runtime.closeonexec": [],
    "runtime.complex128div": [
        []
    ],
    "runtime.computeRZlog": [
        []
    ],
    "runtime.concatstring2": [
        [1, 2]
    ],
    "runtime.concatstring3": [
        [1, 2, 3]
    ],
    "runtime.concatstring4": [
        [1, 2, 3, 4]
    ],
    "runtime.concatstring5": [
        [1, 2, 3, 4, 5]
    ],
    "runtime.concatstrings": [
        [1]
    ],
    "runtime.convI2I": [
        [0, 1]
    ],
    "runtime.convT": [
        [0]
    ],
    "runtime.convT16": [
        []
    ],
    "runtime.convT32": [
        []
    ],
    "runtime.convT64": [
        []
    ],
    "runtime.convTnoptr": [
        [0]
    ],
    "runtime.convTslice": [
        []
    ],
    "runtime.convTstring": [
        []
    ],
    "runtime.copysign": [
        [0, 1]
    ],
    "runtime.copystack": [],
    "runtime.countSub": [
        [0, 1]
    ],
    "runtime.countrunes": [
        []
    ],
    "runtime.cpuinit": [],
    "runtime.cputicks": [
        []
    ],
    "runtime.crash": [],
    "runtime.createfing": [],
    "runtime.crypto_x509_syscall": [
        [0, 1, 2, 3, 4, 5, 6]
    ],
    "runtime.cstring": [
        [0]
    ],
    "runtime.debugCallCheck": [
        []
    ],
    "runtime.debugCallCheck$1": [],
    "runtime.debugCallPanicked": [],
    "runtime.debugCallV2": [],
    "runtime.debugCallWrap": [],
    "runtime.debugCallWrap$1": [],
    "runtime.debugCallWrap$2": [],
    "runtime.debugCallWrap1": [],
    "runtime.debugCallWrap1$1": [],
    "runtime.debugCallWrap2": [],
    "runtime.debugCallWrap2$1": [],
    "runtime.debug_modinfo": [
        []
    ],
    "runtime.decoderune": [
        [0],
        [1]
    ],
    "runtime.deductSweepCredit": [],
    "runtime.defaultMemProfileRate": [
        [0]
    ],
    "runtime.deferCallSave": [],
    "runtime.deferproc": [],
    "runtime.deferprocStack": [],
    "runtime.deferreturn": [],
    "runtime.deltimer": [
        []
    ],
    "runtime.dematerializeGCProg": [],
    "runtime.dieFromSignal": [],
    "runtime.divRoundUp": [
        [0, 1]
    ],
    "runtime.divlu": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "runtime.dlog": [
        []
    ],
    "runtime.doInit": [],
    "runtime.doSigPreempt": [],
    "runtime.doaddtimer": [],
    "runtime.dodeltimer": [
        [1]
    ],
    "runtime.dodeltimer0": [],
    "runtime.dolockOSThread": [],
    "runtime.dopanic_m": [
        []
    ],
    "runtime.dounlockOSThread": [],
    "runtime.dropg": [],
    "runtime.dropm": [],
    "runtime.duffcopy": [],
    "runtime.duffzero": [],
    "runtime.dumpGCProg": [],
    "runtime.dumpbool": [],
    "runtime.dumpbv": [],
    "runtime.dumpfields": [],
    "runtime.dumpfinalizer": [],
    "runtime.dumpframe": [
        []
    ],
    "runtime.dumpgoroutine": [],
    "runtime.dumpgs": [],
    "runtime.dumpgs$1": [],
    "runtime.dumpgstatus": [],
    "runtime.dumpint": [],
    "runtime.dumpitabs": [],
    "runtime.dumpmemprof": [],
    "runtime.dumpmemprof_callback": [],
    "runtime.dumpmemrange": [],
    "runtime.dumpmemstats": [],
    "runtime.dumpms": [],
    "runtime.dumpobj": [],
    "runtime.dumpobjs": [],
    "runtime.dumpotherroot": [],
    "runtime.dumpparams": [],
    "runtime.dumpregs": [],
    "runtime.dumproots": [],
    "runtime.dumpslice": [],
    "runtime.dumpstr": [],
    "runtime.dumptype": [],
    "runtime.dwrite": [],
    "runtime.dwritebyte": [],
    "runtime.efaceHash": [
        [1]
    ],
    "runtime.efaceOf": [
        [0]
    ],
    "runtime.efaceeq": [
        [1, 2]
    ],
    "runtime.elideWrapperCalling": [
        [0]
    ],
    "runtime.empty": [
        [0]
    ],
    "runtime.encoderune": [
        []
    ],
    "runtime.endCheckmarks": [],
    "runtime.ensureSigM": [],
    "runtime.ensureSigM$1": [],
    "runtime.entersyscall": [],
    "runtime.entersyscall_gcwait": [],
    "runtime.entersyscall_sysmon": [],
    "runtime.entersyscallblock": [],
    "runtime.entersyscallblock$1": [],
    "runtime.entersyscallblock$2": [],
    "runtime.entersyscallblock_handoff": [],
    "runtime.envKeyEqual": [
        [0, 1]
    ],
    "runtime.environ": [
        []
    ],
    "runtime.eqslice": [
        []
    ],
    "runtime.evacuate": [],
    "runtime.evacuate_fast32": [],
    "runtime.evacuate_fast64": [],
    "runtime.evacuate_faststr": [],
    "runtime.evacuated": [
        [0]
    ],
    "runtime.execute": [],
    "runtime.exit": [],
    "runtime.exitThread": [],
    "runtime.exit_trampoline": [],
    "runtime.exitsyscall": [],
    "runtime.exitsyscall0": [],
    "runtime.exitsyscallfast": [
        []
    ],
    "runtime.exitsyscallfast$1": [],
    "runtime.exitsyscallfast_pidle": [
        []
    ],
    "runtime.exitsyscallfast_reacquired": [],
    "runtime.exitsyscallfast_reacquired$1": [],
    "runtime.expandCgoFrames": [
        [0]
    ],
    "runtime.extendRandom": [],
    "runtime.f32equal": [
        [0, 1]
    ],
    "runtime.f32hash": [
        [1]
    ],
    "runtime.f32to64": [
        [0]
    ],
    "runtime.f32toint32": [
        [0]
    ],
    "runtime.f32toint64": [
        [0]
    ],
    "runtime.f32touint64": [
        [0]
    ],
    "runtime.f64equal": [
        [0, 1]
    ],
    "runtime.f64hash": [
        [1]
    ],
    "runtime.f64to32": [
        [0]
    ],
    "runtime.f64toint": [
        [0],
        []
    ],
    "runtime.f64toint32": [
        [0]
    ],
    "runtime.f64toint64": [
        [0]
    ],
    "runtime.f64touint64": [
        [0]
    ],
    "runtime.fadd32": [
        [0, 1]
    ],
    "runtime.fadd64": [
        [0, 1]
    ],
    "runtime.fastexprand": [
        [0]
    ],
    "runtime.fastlog2": [
        [0]
    ],
    "runtime.fastrand": [
        []
    ],
    "runtime.fastrandinit": [],
    "runtime.fastrandn": [
        [0]
    ],
    "runtime.fatalpanic": [],
    "runtime.fatalpanic$1": [],
    "runtime.fatalpanic$2": [],
    "runtime.fatalthrow": [],
    "runtime.fatalthrow$1": [],
    "runtime.fcmp64": [
        [],
        []
    ],
    "runtime.fcntl": [
        []
    ],
    "runtime.fcntl_trampoline": [],
    "runtime.fdiv32": [
        [0, 1]
    ],
    "runtime.fdiv64": [
        [0, 1]
    ],
    "runtime.feq32": [
        []
    ],
    "runtime.feq64": [
        []
    ],
    "runtime.fge32": [
        []
    ],
    "runtime.fge64": [
        []
    ],
    "runtime.fgt32": [
        []
    ],
    "runtime.fgt64": [
        []
    ],
    "runtime.fillAligned": [
        [0, 1]
    ],
    "runtime.fillAligned$1": [
        [0, 1]
    ],
    "runtime.fillstack": [],
    "runtime.findBitRange64": [
        []
    ],
    "runtime.findObject": [
        [0],
        [],
        [0]
    ],
    "runtime.findfunc": [
        []
    ],
    "runtime.findmoduledatap": [
        []
    ],
    "runtime.findnull": [
        [0]
    ],
    "runtime.findnullw": [
        []
    ],
    "runtime.findrunnable": [
        [],
        []
    ],
    "runtime.findsghi": [
        [0]
    ],
    "runtime.finishsweep_m": [],
    "runtime.finq_callback": [],
    "runtime.fint32to32": [
        [0]
    ],
    "runtime.fint32to64": [
        [0]
    ],
    "runtime.fint64to32": [
        [0]
    ],
    "runtime.fint64to64": [
        [0]
    ],
    "runtime.fintto32": [
        [0]
    ],
    "runtime.fintto64": [
        [0]
    ],
    "runtime.float64Inf": [
        []
    ],
    "runtime.float64NegInf": [
        []
    ],
    "runtime.float64bits": [
        [0]
    ],
    "runtime.float64frombits": [
        [0]
    ],
    "runtime.flush": [],
    "runtime.flushallmcaches": [],
    "runtime.flushmcache": [],
    "runtime.fmtNSAsMS": [
        [0, 1]
    ],
    "runtime.fmul32": [
        [0, 1]
    ],
    "runtime.fmul64": [
        [0, 1]
    ],
    "runtime.fneg64": [
        [0]
    ],
    "runtime.forEachG": [],
    "runtime.forEachGRace": [],
    "runtime.forEachP": [],
    "runtime.forcegchelper": [],
    "runtime.fpack32": [
        [0, 1, 2]
    ],
    "runtime.fpack64": [
        [0, 1, 2]
    ],
    "runtime.freeSomeWbufs": [
        []
    ],
    "runtime.freeSomeWbufs$1": [],
    "runtime.freeSpecial": [],
    "runtime.freeStackSpans": [],
    "runtime.freedefer": [],
    "runtime.freedeferfn": [],
    "runtime.freedeferpanic": [],
    "runtime.freemcache": [],
    "runtime.freemcache$1": [],
    "runtime.freezetheworld": [],
    "runtime.fsub64": [
        [0, 1]
    ],
    "runtime.fuint64to32": [
        [0]
    ],
    "runtime.fuint64to64": [
        [0]
    ],
    "runtime.full": [
        [0]
    ],
    "runtime.funcMaxSPDelta": [
        []
    ],
    "runtime.funcdata": [
        [0, 1]
    ],
    "runtime.funcfile": [
        [0]
    ],
    "runtime.funcline": [
        [0],
        []
    ],
    "runtime.funcline1": [
        [0],
        []
    ],
    "runtime.funcname": [
        [0]
    ],
    "runtime.funcnameFromNameoff": [
        [0]
    ],
    "runtime.funcpkgpath": [
        [0]
    ],
    "runtime.funcspdelta": [
        [2]
    ],
    "runtime.funpack32": [
        [0],
        [0],
        [0],
        [],
        []
    ],
    "runtime.funpack64": [
        [0],
        [0],
        [0],
        [],
        []
    ],
    "runtime.gcAssistAlloc": [],
    "runtime.gcAssistAlloc$1": [],
    "runtime.gcAssistAlloc1": [],
    "runtime.gcBgMarkPrepare": [],
    "runtime.gcBgMarkStartWorkers": [],
    "runtime.gcBgMarkWorker": [],
    "runtime.gcBgMarkWorker$1": [
        []
    ],
    "runtime.gcBgMarkWorker$2": [],
    "runtime.gcDrain": [],
    "runtime.gcDrainN": [
        [0]
    ],
    "runtime.gcDumpObject": [],
    "runtime.gcFlushBgCredit": [],
    "runtime.gcMark": [],
    "runtime.gcMarkDone": [],
    "runtime.gcMarkDone$1": [],
    "runtime.gcMarkDone$1$1": [],
    "runtime.gcMarkDone$2": [],
    "runtime.gcMarkDone$3": [],
    "runtime.gcMarkRootCheck": [],
    "runtime.gcMarkRootCheck$1": [],
    "runtime.gcMarkRootPrepare": [],
    "runtime.gcMarkRootPrepare$1": [
        [0]
    ],
    "runtime.gcMarkTermination": [],
    "runtime.gcMarkTermination$1": [],
    "runtime.gcMarkTermination$2": [],
    "runtime.gcMarkTermination$3": [],
    "runtime.gcMarkTermination$4": [],
    "runtime.gcMarkTermination$4$1": [],
    "runtime.gcMarkTinyAllocs": [],
    "runtime.gcMarkWorkAvailable": [
        []
    ],
    "runtime.gcPaceScavenger": [],
    "runtime.gcPaceSweeper": [],
    "runtime.gcParkAssist": [
        []
    ],
    "runtime.gcResetMarkState": [],
    "runtime.gcResetMarkState$1": [],
    "runtime.gcStart": [],
    "runtime.gcStart$1": [],
    "runtime.gcStart$2": [],
    "runtime.gcSweep": [],
    "runtime.gcTestIsReachable": [
        []
    ],
    "runtime.gcTestMoveStackOnNextCall": [],
    "runtime.gcTestPointerClass": [
        []
    ],
    "runtime.gcWaitOnMark": [],
    "runtime.gcWakeAllAssists": [],
    "runtime.gcWriteBarrier": [],
    "runtime.gcWriteBarrierBP": [],
    "runtime.gcWriteBarrierBX": [],
    "runtime.gcWriteBarrierCX": [],
    "runtime.gcWriteBarrierDX": [],
    "runtime.gcWriteBarrierR8": [],
    "runtime.gcWriteBarrierR9": [],
    "runtime.gcWriteBarrierSI": [],
    "runtime.gcallers": [
        []
    ],
    "runtime.gcd": [
        [0, 1]
    ],
    "runtime.gcenable": [],
    "runtime.gcinit": [],
    "runtime.gcmarknewobject": [],
    "runtime.gcount": [
        []
    ],
    "runtime.gcstopm": [],
    "runtime.gentraceback": [
        []
    ],
    "runtime.getArgInfo": [
        [0, 1, 3],
        [0, 3]
    ],
    "runtime.getArgInfoFast": [
        [0],
        [],
        [0]
    ],
    "runtime.getCachedDlogger": [
        []
    ],
    "runtime.getLockRank": [
        []
    ],
    "runtime.getMCache": [
        [0]
    ],
    "runtime.getPageSize": [
        []
    ],
    "runtime.getRandomData": [],
    "runtime.getStackMap": [
        [0, 1],
        [0, 1],
        []
    ],
    "runtime.getargp": [
        []
    ],
    "runtime.getcallerpc": [
        []
    ],
    "runtime.getcallersp": [
        []
    ],
    "runtime.getclosureptr": [
        []
    ],
    "runtime.getempty": [
        []
    ],
    "runtime.getempty$1": [],
    "runtime.getg": [
        []
    ],
    "runtime.getgcmask": [
        [0]
    ],
    "runtime.getgcmaskcb": [
        []
    ],
    "runtime.getitab": [
        [0, 1]
    ],
    "runtime.getm": [
        []
    ],
    "runtime.getncpu": [
        []
    ],
    "runtime.getsig": [
        []
    ],
    "runtime.gfget": [
        [0]
    ],
    "runtime.gfget$1": [],
    "runtime.gfpurge": [],
    "runtime.gfput": [],
    "runtime.globrunqget": [
        []
    ],
    "runtime.globrunqput": [],
    "runtime.globrunqputbatch": [],
    "runtime.globrunqputhead": [],
    "runtime.goPanicIndex": [],
    "runtime.goPanicIndexU": [],
    "runtime.goPanicSlice3Acap": [],
    "runtime.goPanicSlice3AcapU": [],
    "runtime.goPanicSlice3Alen": [],
    "runtime.goPanicSlice3AlenU": [],
    "runtime.goPanicSlice3B": [],
    "runtime.goPanicSlice3BU": [],
    "runtime.goPanicSlice3C": [],
    "runtime.goPanicSlice3CU": [],
    "runtime.goPanicSliceAcap": [],
    "runtime.goPanicSliceAcapU": [],
    "runtime.goPanicSliceAlen": [],
    "runtime.goPanicSliceAlenU": [],
    "runtime.goPanicSliceB": [],
    "runtime.goPanicSliceBU": [],
    "runtime.goPanicSliceConvert": [],
    "runtime.goargs": [],
    "runtime.gobytes": [
        []
    ],
    "runtime.goenvs": [],
    "runtime.goenvs_unix": [],
    "runtime.goexit": [],
    "runtime.goexit0": [],
    "runtime.goexit1": [],
    "runtime.gogetenv": [
        []
    ],
    "runtime.gogo": [],
    "runtime.gopanic": [],
    "runtime.gopark": [],
    "runtime.goparkunlock": [],
    "runtime.gopreempt_m": [],
    "runtime.goready": [],
    "runtime.goready$1": [],
    "runtime.gorecover": [
        []
    ],
    "runtime.goroutineProfileWithLabels": [
        [],
        []
    ],
    "runtime.goroutineProfileWithLabels$1": [
        []
    ],
    "runtime.goroutineProfileWithLabels$2": [],
    "runtime.goroutineProfileWithLabels$3": [],
    "runtime.goroutineProfileWithLabels$4": [],
    "runtime.goroutineProfileWithLabels$4$1": [],
    "runtime.goroutineReady": [],
    "runtime.goroutineheader": [],
    "runtime.goschedImpl": [],
    "runtime.gosched_m": [],
    "runtime.goschedguarded": [],
    "runtime.goschedguarded_m": [],
    "runtime.gostartcall": [],
    "runtime.gostartcallfn": [],
    "runtime.gostring": [
        []
    ],
    "runtime.gostringn": [
        []
    ],
    "runtime.gostringnocopy": [
        [0]
    ],
    "runtime.gostringw": [
        []
    ],
    "runtime.gotraceback": [
        [],
        [],
        []
    ],
    "runtime.goyield": [],
    "runtime.goyield_m": [],
    "runtime.greyobject": [],
    "runtime.growWork": [],
    "runtime.growWork_fast32": [],
    "runtime.growWork_fast64": [],
    "runtime.growWork_faststr": [],
    "runtime.growslice": [
        [0, 1, 2]
    ],
    "runtime.gwrite": [],
    "runtime.handoff": [
        [0]
    ],
    "runtime.handoffp": [],
    "runtime.hasPrefix": [
        [0, 1]
    ],
    "runtime.hashGrow": [],
    "runtime.heapBitsForAddr": [
        [0]
    ],
    "runtime.heapBitsSetType": [],
    "runtime.heapBitsSetTypeGCProg": [],
    "runtime.heapRetained": [
        []
    ],
    "runtime.hexdumpWords": [],
    "runtime.ifaceHash": [
        [1]
    ],
    "runtime.ifaceeq": [
        [1, 2]
    ],
    "runtime.inHeapOrStack": [
        [0]
    ],
    "runtime.inPersistentAlloc": [
        []
    ],
    "runtime.inRange": [
        [1, 3]
    ],
    "runtime.inVDSOPage": [
        []
    ],
    "runtime.incidlelocked": [],
    "runtime.inf2one": [
        [0]
    ],
    "runtime.inheap": [
        []
    ],
    "runtime.init": [],
    "runtime.init#1": [],
    "runtime.init#2": [],
    "runtime.init#3": [],
    "runtime.init#4": [],
    "runtime.init#5": [],
    "runtime.init#6": [],
    "runtime.init#7": [],
    "runtime.init#8": [],
    "runtime.initAlgAES": [],
    "runtime.initMetrics": [],
    "runtime.initMetrics$1": [],
    "runtime.initMetrics$10": [],
    "runtime.initMetrics$11": [],
    "runtime.initMetrics$12": [],
    "runtime.initMetrics$13": [],
    "runtime.initMetrics$14": [],
    "runtime.initMetrics$15": [],
    "runtime.initMetrics$16": [],
    "runtime.initMetrics$17": [],
    "runtime.initMetrics$18": [],
    "runtime.initMetrics$19": [],
    "runtime.initMetrics$2": [],
    "runtime.initMetrics$20": [],
    "runtime.initMetrics$21": [],
    "runtime.initMetrics$22": [],
    "runtime.initMetrics$23": [],
    "runtime.initMetrics$24": [],
    "runtime.initMetrics$25": [],
    "runtime.initMetrics$26": [],
    "runtime.initMetrics$27": [],
    "runtime.initMetrics$28": [],
    "runtime.initMetrics$29": [],
    "runtime.initMetrics$3": [],
    "runtime.initMetrics$4": [],
    "runtime.initMetrics$5": [],
    "runtime.initMetrics$6": [],
    "runtime.initMetrics$7": [],
    "runtime.initMetrics$8": [],
    "runtime.initMetrics$9": [],
    "runtime.initsig": [],
    "runtime.injectglist": [],
    "runtime.injectglist$1": [],
    "runtime.int32Hash": [
        []
    ],
    "runtime.int64Hash": [
        []
    ],
    "runtime.interequal": [
        [0, 1]
    ],
    "runtime.interhash": [
        [1]
    ],
    "runtime.internal_cpu_getsysctlbyname": [
        [],
        []
    ],
    "runtime.intstring": [
        []
    ],
    "runtime.isAbortPC": [
        []
    ],
    "runtime.isAsyncSafePoint": [
        [],
        [1]
    ],
    "runtime.isDirectIface": [
        [0]
    ],
    "runtime.isEmpty": [
        [0]
    ],
    "runtime.isExportedRuntime": [
        [0]
    ],
    "runtime.isFinite": [
        [0]
    ],
    "runtime.isInf": [
        [0]
    ],
    "runtime.isNaN": [
        [0]
    ],
    "runtime.isPowerOfTwo": [
        [0]
    ],
    "runtime.isShrinkStackSafe": [
        [0]
    ],
    "runtime.isSweepDone": [
        []
    ],
    "runtime.isSystemGoroutine": [
        []
    ],
    "runtime.itabAdd": [],
    "runtime.itabHashFunc": [
        [0, 1]
    ],
    "runtime.itab_callback": [],
    "runtime.itabsinit": [],
    "runtime.iterate_finq": [],
    "runtime.iterate_itabs": [],
    "runtime.iterate_memprof": [],
    "runtime.itoa": [
        [0, 1]
    ],
    "runtime.itoaDiv": [
        [0, 1]
    ],
    "runtime.kevent": [
        []
    ],
    "runtime.kevent_trampoline": [],
    "runtime.kqueue": [
        []
    ],
    "runtime.kqueue_trampoline": [],
    "runtime.less": [
        [0, 1]
    ],
    "runtime.levelIndexToOffAddr": [
        [1]
    ],
    "runtime.lfnodeValidate": [],
    "runtime.lfstackPack": [
        [0, 1]
    ],
    "runtime.lfstackUnpack": [
        [0]
    ],
    "runtime.libcCall": [
        []
    ],
    "runtime.libpreinit": [],
    "runtime.lock": [],
    "runtime.lock2": [],
    "runtime.lockInit": [],
    "runtime.lockOSThread": [],
    "runtime.lockWithRank": [],
    "runtime.lockWithRankMayAcquire": [],
    "runtime.lockedOSThread": [
        []
    ],
    "runtime.lockextra": [
        []
    ],
    "runtime.lowerASCII": [
        [0]
    ],
    "runtime.mPark": [],
    "runtime.mProf_Flush": [],
    "runtime.mProf_FlushLocked": [],
    "runtime.mProf_Free": [],
    "runtime.mProf_Malloc": [],
    "runtime.mProf_Malloc$1": [],
    "runtime.mProf_NextCycle": [],
    "runtime.mProf_PostSweep": [],
    "runtime.mReserveID": [
        []
    ],
    "runtime.mStackIsSystemAllocated": [
        []
    ],
    "runtime.madvise": [],
    "runtime.madvise_trampoline": [],
    "runtime.main": [],
    "runtime.main$1": [],
    "runtime.main$2": [],
    "runtime.main_main": [],
    "runtime.makeAddrRange": [
        [0, 1]
    ],
    "runtime.makeBucketArray": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "runtime.makeHeadTailIndex": [
        [0, 1]
    ],
    "runtime.makeSpanClass": [
        [0, 1]
    ],
    "runtime.makeStatDepSet": [
        [0]
    ],
    "runtime.makechan": [
        [0, 1]
    ],
    "runtime.makechan64": [
        [0, 1]
    ],
    "runtime.makeheapobjbv": [
        []
    ],
    "runtime.makemap": [
        [0, 2]
    ],
    "runtime.makemap64": [
        [0, 2]
    ],
    "runtime.makemap_small": [
        []
    ],
    "runtime.makeslice": [
        [0, 2]
    ],
    "runtime.makeslice64": [
        [0, 2]
    ],
    "runtime.makeslicecopy": [
        [0, 1]
    ],
    "runtime.malg": [
        []
    ],
    "runtime.malg$1": [],
    "runtime.mallocgc": [
        [0]
    ],
    "runtime.mallocinit": [],
    "runtime.mapaccess1": [
        [0, 1, 2]
    ],
    "runtime.mapaccess1_fast32": [
        [0, 1, 2]
    ],
    "runtime.mapaccess1_fast64": [
        [0, 1, 2]
    ],
    "runtime.mapaccess1_faststr": [
        [0, 1, 2]
    ],
    "runtime.mapaccess1_fat": [
        [0, 1, 2, 3]
    ],
    "runtime.mapaccess2": [
        [0, 1, 2],
        []
    ],
    "runtime.mapaccess2_fast32": [
        [0, 1, 2],
        []
    ],
    "runtime.mapaccess2_fast64": [
        [0, 1, 2],
        []
    ],
    "runtime.mapaccess2_faststr": [
        [0, 1, 2],
        []
    ],
    "runtime.mapaccess2_fat": [
        [0, 1, 2, 3],
        []
    ],
    "runtime.mapaccessK": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "runtime.mapassign": [
        [0, 1, 2]
    ],
    "runtime.mapassign_fast32": [
        [0, 1, 2]
    ],
    "runtime.mapassign_fast32ptr": [
        [0, 1, 2]
    ],
    "runtime.mapassign_fast64": [
        [0, 1, 2]
    ],
    "runtime.mapassign_fast64ptr": [
        [0, 1, 2]
    ],
    "runtime.mapassign_faststr": [
        [0, 1, 2]
    ],
    "runtime.mapclear": [],
    "runtime.mapdelete": [],
    "runtime.mapdelete_fast32": [],
    "runtime.mapdelete_fast64": [],
    "runtime.mapdelete_faststr": [],
    "runtime.mapiterinit": [],
    "runtime.mapiternext": [],
    "runtime.markBitsForAddr": [
        [0]
    ],
    "runtime.markBitsForSpan": [
        [0]
    ],
    "runtime.markroot": [
        [1]
    ],
    "runtime.markroot$1": [],
    "runtime.markrootBlock": [
        [1, 4]
    ],
    "runtime.markrootFreeGStacks": [],
    "runtime.markrootSpans": [],
    "runtime.materializeGCProg": [
        [0]
    ],
    "runtime.mayMoreStackMove": [],
    "runtime.mayMoreStackPreempt": [],
    "runtime.mcall": [],
    "runtime.mcommoninit": [],
    "runtime.mcount": [
        []
    ],
    "runtime.mdestroy": [],
    "runtime.mdump": [],
    "runtime.memclrHasPointers": [],
    "runtime.memclrNoHeapPointers": [],
    "runtime.memclrNoHeapPointersChunked": [],
    "runtime.memequal": [
        []
    ],
    "runtime.memequal0": [
        []
    ],
    "runtime.memequal128": [
        [0, 1]
    ],
    "runtime.memequal16": [
        [0, 1]
    ],
    "runtime.memequal32": [
        [0, 1]
    ],
    "runtime.memequal64": [
        [0, 1]
    ],
    "runtime.memequal8": [
        [0, 1]
    ],
    "runtime.memequal_varlen": [
        []
    ],
    "runtime.memhash": [
        []
    ],
    "runtime.memhash0": [
        [1]
    ],
    "runtime.memhash128": [
        []
    ],
    "runtime.memhash16": [
        []
    ],
    "runtime.memhash32": [
        []
    ],
    "runtime.memhash32Fallback": [
        [0, 1]
    ],
    "runtime.memhash64": [
        []
    ],
    "runtime.memhash64Fallback": [
        [0, 1]
    ],
    "runtime.memhash8": [
        []
    ],
    "runtime.memhashFallback": [
        [0, 1, 2]
    ],
    "runtime.memhash_varlen": [
        []
    ],
    "runtime.memmove": [],
    "runtime.mergeSummaries": [
        [0, 1]
    ],
    "runtime.mexit": [],
    "runtime.mget": [
        []
    ],
    "runtime.minit": [],
    "runtime.minitSignalMask": [],
    "runtime.minitSignalStack": [],
    "runtime.minitSignals": [],
    "runtime.mix": [
        [0, 1]
    ],
    "runtime.mlock": [],
    "runtime.mlock_trampoline": [],
    "runtime.mmap": [
        [0, 1, 2, 3, 4, 5],
        [0, 1, 2, 3, 4, 5]
    ],
    "runtime.mmap_trampoline": [],
    "runtime.modTimer": [],
    "runtime.modtimer": [
        []
    ],
    "runtime.moduledataverify": [],
    "runtime.moduledataverify1": [],
    "runtime.modulesinit": [],
    "runtime.morestack": [],
    "runtime.morestack_noctxt": [],
    "runtime.morestackc": [],
    "runtime.moveTimers": [],
    "runtime.mpreinit": [],
    "runtime.mput": [],
    "runtime.msanfree": [],
    "runtime.msanmalloc": [],
    "runtime.msanmove": [],
    "runtime.msanread": [],
    "runtime.msanwrite": [],
    "runtime.msigrestore": [],
    "runtime.mspinning": [],
    "runtime.mstart": [],
    "runtime.mstart0": [],
    "runtime.mstart1": [],
    "runtime.mstart_stub": [],
    "runtime.mstartm0": [],
    "runtime.mullu": [
        [0, 1],
        [0, 1]
    ],
    "runtime.munmap": [],
    "runtime.munmap_trampoline": [],
    "runtime.mutexevent": [],
    "runtime.nanotime": [
        []
    ],
    "runtime.nanotime1": [
        []
    ],
    "runtime.nanotime_trampoline": [],
    "runtime.needm": [],
    "runtime.net_fastrand": [
        []
    ],
    "runtime.netpoll": [
        []
    ],
    "runtime.netpollBreak": [],
    "runtime.netpollDeadline": [],
    "runtime.netpollGenericInit": [],
    "runtime.netpollIsPollDescriptor": [
        [0]
    ],
    "runtime.netpollReadDeadline": [],
    "runtime.netpollWriteDeadline": [],
    "runtime.netpollarm": [],
    "runtime.netpollblock": [
        []
    ],
    "runtime.netpollblockcommit": [
        []
    ],
    "runtime.netpollcheckerr": [
        []
    ],
    "runtime.netpollclose": [
        []
    ],
    "runtime.netpolldeadlineimpl": [],
    "runtime.netpollgoready": [],
    "runtime.netpollinit": [],
    "runtime.netpollinited": [
        []
    ],
    "runtime.netpollopen": [
        []
    ],
    "runtime.netpollready": [],
    "runtime.netpollunblock": [
        []
    ],
    "runtime.newAllocBits": [
        []
    ],
    "runtime.newArenaMayUnlock": [
        []
    ],
    "runtime.newBucket": [
        [0, 1]
    ],
    "runtime.newMarkBits": [
        []
    ],
    "runtime.newProfBuf": [
        [0]
    ],
    "runtime.newSpecialsIter": [
        [0]
    ],
    "runtime.newarray": [
        [0, 1]
    ],
    "runtime.newdefer": [
        []
    ],
    "runtime.newextram": [],
    "runtime.newm": [],
    "runtime.newm1": [],
    "runtime.newobject": [
        [0]
    ],
    "runtime.newosproc": [],
    "runtime.newosproc0": [],
    "runtime.newproc": [],
    "runtime.newproc$1": [],
    "runtime.newproc1": [
        [0, 2]
    ],
    "runtime.newstack": [],
    "runtime.nextFreeFast": [
        [0]
    ],
    "runtime.nextMarkBitArenaEpoch": [],
    "runtime.nextSample": [
        []
    ],
    "runtime.nextSampleNoFP": [
        []
    ],
    "runtime.nilfunc": [],
    "runtime.nilinterequal": [
        [0, 1]
    ],
    "runtime.nilinterhash": [
        [1]
    ],
    "runtime.noSignalStack": [],
    "runtime.nobarrierWakeTime": [
        [0]
    ],
    "runtime.noescape": [
        [0]
    ],
    "runtime.nonblockingPipe": [
        [],
        [],
        []
    ],
    "runtime.noteclear": [],
    "runtime.notesleep": [],
    "runtime.notetsleep": [
        []
    ],
    "runtime.notetsleep_internal": [
        []
    ],
    "runtime.notetsleepg": [
        []
    ],
    "runtime.notewakeup": [],
    "runtime.notifyListAdd": [
        []
    ],
    "runtime.notifyListCheck": [],
    "runtime.notifyListNotifyAll": [],
    "runtime.notifyListNotifyOne": [],
    "runtime.notifyListWait": [],
    "runtime.offAddrToLevelIndex": [
        [1]
    ],
    "runtime.oneNewExtraM": [],
    "runtime.open": [
        []
    ],
    "runtime.open_trampoline": [],
    "runtime.osPreemptExtEnter": [],
    "runtime.osPreemptExtExit": [],
    "runtime.osRelax": [],
    "runtime.osSetupTLS": [],
    "runtime.osStackAlloc": [],
    "runtime.osStackFree": [],
    "runtime.os_beforeExit": [],
    "runtime.os_fastrand": [
        []
    ],
    "runtime.os_runtime_args": [
        []
    ],
    "runtime.os_sigpipe": [],
    "runtime.osinit": [],
    "runtime.osyield": [],
    "runtime.osyield_no_g": [],
    "runtime.overLoadFactor": [
        [0, 1]
    ],
    "runtime.packPallocSum": [
        [0, 1, 2]
    ],
    "runtime.pageIndexOf": [
        [],
        [0],
        [0]
    ],
    "runtime.panicCheck1": [],
    "runtime.panicCheck2": [],
    "runtime.panicIndex": [],
    "runtime.panicIndexU": [],
    "runtime.panicSlice3Acap": [],
    "runtime.panicSlice3AcapU": [],
    "runtime.panicSlice3Alen": [],
    "runtime.panicSlice3AlenU": [],
    "runtime.panicSlice3B": [],
    "runtime.panicSlice3BU": [],
    "runtime.panicSlice3C": [],
    "runtime.panicSlice3CU": [],
    "runtime.panicSliceAcap": [],
    "runtime.panicSliceAcapU": [],
    "runtime.panicSliceAlen": [],
    "runtime.panicSliceAlenU": [],
    "runtime.panicSliceB": [],
    "runtime.panicSliceBU": [],
    "runtime.panicSliceConvert": [],
    "runtime.panicdivide": [],
    "runtime.panicdottypeE": [],
    "runtime.panicdottypeI": [],
    "runtime.panicfloat": [],
    "runtime.panicmakeslicecap": [],
    "runtime.panicmakeslicelen": [],
    "runtime.panicmem": [],
    "runtime.panicmemAddr": [],
    "runtime.panicnildottype": [],
    "runtime.panicoverflow": [],
    "runtime.panicshift": [],
    "runtime.panicunsafeslicelen": [],
    "runtime.panicwrap": [],
    "runtime.park_m": [],
    "runtime.parkunlock_c": [
        []
    ],
    "runtime.parsedebugvars": [],
    "runtime.pcdatastart": [
        [0, 1]
    ],
    "runtime.pcdatavalue": [
        [3]
    ],
    "runtime.pcdatavalue1": [
        [3]
    ],
    "runtime.pcdatavalue2": [
        [],
        [0]
    ],
    "runtime.pcvalue": [
        [3],
        [0]
    ],
    "runtime.pcvalueCacheKey": [
        [0]
    ],
    "runtime.persistentalloc": [
        []
    ],
    "runtime.persistentalloc$1": [],
    "runtime.persistentalloc1": [
        [0, 1]
    ],
    "runtime.pidleget": [
        []
    ],
    "runtime.pidleput": [],
    "runtime.pipe": [
        [],
        [],
        []
    ],
    "runtime.pipe_trampoline": [],
    "runtime.plugin_lastmoduleinit": [
        [],
        [],
        []
    ],
    "runtime.pluginftabverify": [],
    "runtime.pollFractionalWorkerExit": [
        []
    ],
    "runtime.pollWork": [
        []
    ],
    "runtime.poll_runtime_Semacquire": [],
    "runtime.poll_runtime_Semrelease": [],
    "runtime.poll_runtime_isPollServerDescriptor": [
        [0]
    ],
    "runtime.poll_runtime_pollClose": [],
    "runtime.poll_runtime_pollOpen": [
        [0],
        []
    ],
    "runtime.poll_runtime_pollReset": [
        []
    ],
    "runtime.poll_runtime_pollServerInit": [],
    "runtime.poll_runtime_pollSetDeadline": [],
    "runtime.poll_runtime_pollUnblock": [],
    "runtime.poll_runtime_pollWait": [
        []
    ],
    "runtime.poll_runtime_pollWaitCanceled": [],
    "runtime.preemptM": [],
    "runtime.preemptPark": [],
    "runtime.preemptall": [
        []
    ],
    "runtime.preemptone": [
        []
    ],
    "runtime.prepGoExitFrame": [],
    "runtime.prepareFreeWorkbufs": [],
    "runtime.preprintpanics": [],
    "runtime.preprintpanics$1": [],
    "runtime.printAncestorTraceback": [],
    "runtime.printAncestorTracebackFuncInfo": [],
    "runtime.printArgs": [],
    "runtime.printArgs$1": [
        [1]
    ],
    "runtime.printArgs$2": [],
    "runtime.printArgs$3": [],
    "runtime.printCgoTraceback": [],
    "runtime.printDebugLog": [],
    "runtime.printDebugLogPC": [],
    "runtime.printOneCgoTraceback": [
        []
    ],
    "runtime.printScavTrace": [],
    "runtime.printany": [],
    "runtime.printanycustomtype": [],
    "runtime.printbool": [],
    "runtime.printcomplex": [],
    "runtime.printcreatedby": [],
    "runtime.printcreatedby1": [],
    "runtime.printeface": [],
    "runtime.printfloat": [],
    "runtime.printhex": [],
    "runtime.printiface": [],
    "runtime.printint": [],
    "runtime.printlock": [],
    "runtime.printnl": [],
    "runtime.printpanics": [],
    "runtime.printpointer": [],
    "runtime.printslice": [],
    "runtime.printsp": [],
    "runtime.printstring": [],
    "runtime.printuint": [],
    "runtime.printuintptr": [],
    "runtime.printunlock": [],
    "runtime.procPin": [
        []
    ],
    "runtime.procUnpin": [],
    "runtime.procresize": [
        []
    ],
    "runtime.procyield": [],
    "runtime.profilealloc": [],
    "runtime.progToPointerMask": [
        [0]
    ],
    "runtime.pthread_attr_getstacksize": [
        []
    ],
    "runtime.pthread_attr_getstacksize_trampoline": [],
    "runtime.pthread_attr_init": [
        []
    ],
    "runtime.pthread_attr_init_trampoline": [],
    "runtime.pthread_attr_setdetachstate": [
        []
    ],
    "runtime.pthread_attr_setdetachstate_trampoline": [],
    "runtime.pthread_cond_init": [
        []
    ],
    "runtime.pthread_cond_init_trampoline": [],
    "runtime.pthread_cond_signal": [
        []
    ],
    "runtime.pthread_cond_signal_trampoline": [],
    "runtime.pthread_cond_timedwait_relative_np": [
        []
    ],
    "runtime.pthread_cond_timedwait_relative_np_trampoline": [],
    "runtime.pthread_cond_wait": [
        []
    ],
    "runtime.pthread_cond_wait_trampoline": [],
    "runtime.pthread_create": [
        []
    ],
    "runtime.pthread_create_trampoline": [],
    "runtime.pthread_kill": [],
    "runtime.pthread_kill_trampoline": [],
    "runtime.pthread_mutex_init": [
        []
    ],
    "runtime.pthread_mutex_init_trampoline": [],
    "runtime.pthread_mutex_lock": [
        []
    ],
    "runtime.pthread_mutex_lock_trampoline": [],
    "runtime.pthread_mutex_unlock": [
        []
    ],
    "runtime.pthread_mutex_unlock_trampoline": [],
    "runtime.pthread_self": [
        []
    ],
    "runtime.pthread_self_trampoline": [],
    "runtime.publicationBarrier": [],
    "runtime.putCachedDlogger": [
        []
    ],
    "runtime.putempty": [],
    "runtime.putfull": [],
    "runtime.queuefinalizer": [],
    "runtime.r4": [
        [0]
    ],
    "runtime.r8": [
        [0]
    ],
    "runtime.raceReadObjectPC": [],
    "runtime.raceWriteObjectPC": [],
    "runtime.raceacquire": [],
    "runtime.raceacquirectx": [],
    "runtime.raceacquireg": [],
    "runtime.racectxend": [],
    "runtime.racefingo": [],
    "runtime.racefini": [],
    "runtime.racefree": [],
    "runtime.racegoend": [],
    "runtime.racegostart": [
        []
    ],
    "runtime.raceinit": [
        [],
        []
    ],
    "runtime.racemalloc": [],
    "runtime.racemapshadow": [],
    "runtime.racenotify": [],
    "runtime.raceproccreate": [
        []
    ],
    "runtime.raceprocdestroy": [],
    "runtime.racereadpc": [],
    "runtime.racereadrangepc": [],
    "runtime.racerelease": [],
    "runtime.racereleaseacquire": [],
    "runtime.racereleaseacquireg": [],
    "runtime.racereleaseg": [],
    "runtime.racereleasemerge": [],
    "runtime.racereleasemergeg": [],
    "runtime.racesync": [],
    "runtime.racewritepc": [],
    "runtime.racewriterangepc": [],
    "runtime.raise": [],
    "runtime.raise_trampoline": [],
    "runtime.raisebadsignal": [],
    "runtime.raiseproc": [],
    "runtime.raiseproc_trampoline": [],
    "runtime.rawbyteslice": [
        []
    ],
    "runtime.rawruneslice": [
        []
    ],
    "runtime.rawstring": [
        [],
        []
    ],
    "runtime.rawstringtmp": [
        [],
        [0]
    ],
    "runtime.read": [
        []
    ],
    "runtime.readGCStats": [],
    "runtime.readGCStats$1": [],
    "runtime.readGCStats_m": [],
    "runtime.readGOGC": [
        []
    ],
    "runtime.readMetrics": [],
    "runtime.readUnaligned32": [
        [0]
    ],
    "runtime.readUnaligned64": [
        [0]
    ],
    "runtime.read_trampoline": [],
    "runtime.readgstatus": [
        [0]
    ],
    "runtime.readmemstats_m": [],
    "runtime.readvarint": [
        [],
        [0]
    ],
    "runtime.readvarintUnsafe": [
        [0],
        [0]
    ],
    "runtime.ready": [],
    "runtime.readyForScavenger": [],
    "runtime.readyWithTime": [],
    "runtime.record": [],
    "runtime.recordForPanic": [],
    "runtime.recordspan": [],
    "runtime.recovery": [],
    "runtime.recv": [],
    "runtime.recvDirect": [],
    "runtime.reentersyscall": [],
    "runtime.reentersyscall$1": [],
    "runtime.reflectOffsLock": [],
    "runtime.reflectOffsUnlock": [],
    "runtime.reflect_addReflectOff": [
        [0]
    ],
    "runtime.reflect_chancap": [
        [0]
    ],
    "runtime.reflect_chanclose": [],
    "runtime.reflect_chanlen": [
        [0]
    ],
    "runtime.reflect_chanrecv": [
        [],
        [0, 2]
    ],
    "runtime.reflect_chansend": [
        []
    ],
    "runtime.reflect_gcbits": [
        [0]
    ],
    "runtime.reflect_ifaceE2I": [],
    "runtime.reflect_makechan": [
        [0, 1]
    ],
    "runtime.reflect_makemap": [
        [0]
    ],
    "runtime.reflect_mapaccess": [
        [0, 1, 2]
    ],
    "runtime.reflect_mapaccess_faststr": [
        [0, 1, 2]
    ],
    "runtime.reflect_mapassign": [],
    "runtime.reflect_mapassign_faststr": [],
    "runtime.reflect_mapdelete": [],
    "runtime.reflect_mapdelete_faststr": [],
    "runtime.reflect_mapiterelem": [
        [0]
    ],
    "runtime.reflect_mapiterinit": [],
    "runtime.reflect_mapiterkey": [
        [0]
    ],
    "runtime.reflect_mapiternext": [],
    "runtime.reflect_maplen": [
        [0]
    ],
    "runtime.reflect_memclrNoHeapPointers": [],
    "runtime.reflect_memmove": [],
    "runtime.reflect_resolveNameOff": [
        [1]
    ],
    "runtime.reflect_resolveTextOff": [
        [1]
    ],
    "runtime.reflect_resolveTypeOff": [
        [1]
    ],
    "runtime.reflect_rselect": [
        [],
        []
    ],
    "runtime.reflect_typedmemclr": [],
    "runtime.reflect_typedmemclrpartial": [],
    "runtime.reflect_typedmemmove": [],
    "runtime.reflect_typedmemmovepartial": [],
    "runtime.reflect_typedslicecopy": [
        [1, 2]
    ],
    "runtime.reflect_typehash": [
        [2]
    ],
    "runtime.reflect_typelinks": [
        [],
        []
    ],
    "runtime.reflect_unsafe_New": [
        [0]
    ],
    "runtime.reflect_unsafe_NewArray": [
        [0, 1]
    ],
    "runtime.reflect_verifyNotInHeapPtr": [
        [0]
    ],
    "runtime.reflectcall": [],
    "runtime.reflectcallmove": [],
    "runtime.reflectlite_chanlen": [
        [0]
    ],
    "runtime.reflectlite_ifaceE2I": [],
    "runtime.reflectlite_maplen": [
        [0]
    ],
    "runtime.reflectlite_resolveNameOff": [
        [1]
    ],
    "runtime.reflectlite_resolveTypeOff": [
        [1]
    ],
    "runtime.reflectlite_typedmemmove": [],
    "runtime.reflectlite_unsafe_New": [
        [0]
    ],
    "runtime.releaseLockRank": [],
    "runtime.releaseSudog": [],
    "runtime.releasem": [],
    "runtime.releasep": [
        []
    ],
    "runtime.removefinalizer": [],
    "runtime.removespecial": [
        []
    ],
    "runtime.resetForSleep": [
        []
    ],
    "runtime.resetTimer": [
        []
    ],
    "runtime.resetspinning": [],
    "runtime.resettimer": [
        []
    ],
    "runtime.resolveNameOff": [
        [1]
    ],
    "runtime.resolveTypeOff": [
        [1]
    ],
    "runtime.restoreGsignalStack": [],
    "runtime.resumeG": [],
    "runtime.retake": [
        []
    ],
    "runtime.retpolineAX": [],
    "runtime.retpolineBP": [],
    "runtime.retpolineBX": [],
    "runtime.retpolineCX": [],
    "runtime.retpolineDI": [],
    "runtime.retpolineDX": [],
    "runtime.retpolineR10": [],
    "runtime.retpolineR11": [],
    "runtime.retpolineR12": [],
    "runtime.retpolineR13": [],
    "runtime.retpolineR14": [],
    "runtime.retpolineR15": [],
    "runtime.retpolineR8": [],
    "runtime.retpolineR9": [],
    "runtime.retpolineSI": [],
    "runtime.return0": [],
    "runtime.round2": [
        []
    ],
    "runtime.roundupsize": [
        [0]
    ],
    "runtime.rt0_go": [],
    "runtime.runGCProg": [
        [0, 1, 2]
    ],
    "runtime.runOneTimer": [],
    "runtime.runOpenDeferFrame": [
        [1]
    ],
    "runtime.runPerThreadSyscall": [],
    "runtime.runSafePointFn": [],
    "runtime.runfinq": [],
    "runtime.runqdrain": [
        [0],
        []
    ],
    "runtime.runqempty": [
        []
    ],
    "runtime.runqget": [
        [0],
        []
    ],
    "runtime.runqgrab": [
        [0]
    ],
    "runtime.runqput": [],
    "runtime.runqputbatch": [],
    "runtime.runqputbatch$1": [
        [0]
    ],
    "runtime.runqputslow": [
        []
    ],
    "runtime.runqsteal": [
        [0]
    ],
    "runtime.runtime_debug_WriteHeapDump": [],
    "runtime.runtime_debug_WriteHeapDump$1": [],
    "runtime.runtime_debug_freeOSMemory": [],
    "runtime.runtime_debug_freeOSMemory$1": [],
    "runtime.runtime_expandFinalInlineFrame": [
        [0]
    ],
    "runtime.runtime_getProfLabel": [
        []
    ],
    "runtime.runtime_goroutineProfileWithLabels": [
        [],
        []
    ],
    "runtime.runtime_pprof_readProfile": [
        [],
        [],
        []
    ],
    "runtime.runtime_pprof_runtime_cyclesPerSecond": [
        []
    ],
    "runtime.runtime_setProfLabel": [],
    "runtime.runtimer": [
        [0]
    ],
    "runtime.save": [],
    "runtime.saveAncestors": [
        []
    ],
    "runtime.saveblockevent": [],
    "runtime.saveg": [],
    "runtime.sbrk0": [
        []
    ],
    "runtime.scanConservative": [],
    "runtime.scanConservative$1": [
        []
    ],
    "runtime.scanblock": [],
    "runtime.scanframeworker": [],
    "runtime.scanobject": [],
    "runtime.scanstack": [
        [0]
    ],
    "runtime.scanstack$1": [
        []
    ],
    "runtime.scavengeSleep": [
        []
    ],
    "runtime.schedEnableUser": [],
    "runtime.schedEnabled": [
        []
    ],
    "runtime.schedinit": [],
    "runtime.schedtrace": [],
    "runtime.schedtrace$1": [],
    "runtime.schedule": [],
    "runtime.selectgo": [
        [1],
        []
    ],
    "runtime.selectgo$1": [
        []
    ],
    "runtime.selectgo$2": [],
    "runtime.selectgo$3": [],
    "runtime.selectnbrecv": [
        [],
        [0, 1]
    ],
    "runtime.selectnbsend": [
        []
    ],
    "runtime.selectsetpc": [],
    "runtime.sellock": [],
    "runtime.selparkcommit": [
        []
    ],
    "runtime.selunlock": [],
    "runtime.semacquire": [],
    "runtime.semacquire1": [],
    "runtime.semacreate": [],
    "runtime.semasleep": [
        []
    ],
    "runtime.semawakeup": [],
    "runtime.semrelease": [],
    "runtime.semrelease1": [],
    "runtime.semroot": [
        []
    ],
    "runtime.send": [],
    "runtime.sendDirect": [],
    "runtime.setCheckmark": [
        []
    ],
    "runtime.setGCPercent": [
        []
    ],
    "runtime.setGCPercent$1": [],
    "runtime.setGCPhase": [],
    "runtime.setGNoWB": [],
    "runtime.setGsignalStack": [],
    "runtime.setMNoWB": [],
    "runtime.setMaxStack": [
        []
    ],
    "runtime.setMaxThreads": [
        []
    ],
    "runtime.setNonblock": [],
    "runtime.setPanicOnFault": [
        []
    ],
    "runtime.setProcessCPUProfiler": [],
    "runtime.setProcessCPUProfilerTimer": [],
    "runtime.setSignalstackSP": [],
    "runtime.setThreadCPUProfiler": [],
    "runtime.setThreadCPUProfilerHz": [],
    "runtime.setTraceback": [],
    "runtime.setcpuprofilerate": [],
    "runtime.setg": [],
    "runtime.setitimer": [],
    "runtime.setitimer_trampoline": [],
    "runtime.setprofilebucket": [],
    "runtime.setsig": [],
    "runtime.setsigsegv": [],
    "runtime.setsigstack": [],
    "runtime.settls": [],
    "runtime.shade": [],
    "runtime.shouldPushSigpanic": [
        []
    ],
    "runtime.showframe": [
        [0]
    ],
    "runtime.showfuncinfo": [
        [0]
    ],
    "runtime.shrinkstack": [],
    "runtime.siftdownTimer": [],
    "runtime.siftupTimer": [
        [1]
    ],
    "runtime.sigFetchG": [
        []
    ],
    "runtime.sigInitIgnored": [],
    "runtime.sigInstallGoHandler": [
        []
    ],
    "runtime.sigNotOnStack": [],
    "runtime.sigNoteSetup": [],
    "runtime.sigNoteSleep": [],
    "runtime.sigNoteWakeup": [],
    "runtime.sigaction": [],
    "runtime.sigaction_trampoline": [],
    "runtime.sigaddset": [],
    "runtime.sigaltstack": [],
    "runtime.sigaltstack_trampoline": [],
    "runtime.sigblock": [],
    "runtime.sigdelset": [],
    "runtime.sigdisable": [],
    "runtime.sigenable": [],
    "runtime.sigfwd": [],
    "runtime.sigfwdgo": [
        []
    ],
    "runtime.sighandler": [],
    "runtime.sigignore": [],
    "runtime.signalDuringFork": [],
    "runtime.signalM": [],
    "runtime.signalWaitUntilIdle": [],
    "runtime.signal_disable": [],
    "runtime.signal_enable": [],
    "runtime.signal_ignore": [],
    "runtime.signal_ignored": [
        [0]
    ],
    "runtime.signal_recv": [
        []
    ],
    "runtime.signalstack": [],
    "runtime.signame": [
        []
    ],
    "runtime.sigpanic": [],
    "runtime.sigpanic0": [],
    "runtime.sigpipe": [],
    "runtime.sigprocmask": [],
    "runtime.sigprocmask_trampoline": [],
    "runtime.sigprof": [],
    "runtime.sigprofNonGo": [],
    "runtime.sigprofNonGoPC": [],
    "runtime.sigsave": [],
    "runtime.sigsend": [
        []
    ],
    "runtime.sigtramp": [],
    "runtime.sigtrampgo": [],
    "runtime.slicebytetostring": [
        []
    ],
    "runtime.slicebytetostringtmp": [
        []
    ],
    "runtime.slicecopy": [
        [1, 3]
    ],
    "runtime.slicerunetostring": [
        []
    ],
    "runtime.spanHasNoSpecials": [],
    "runtime.spanHasSpecials": [],
    "runtime.spanOf": [
        []
    ],
    "runtime.spanOfHeap": [
        []
    ],
    "runtime.spanOfUnchecked": [
        []
    ],
    "runtime.spillArgs": [],
    "runtime.stackalloc": [
        [0]
    ],
    "runtime.stackcache_clear": [],
    "runtime.stackcacherefill": [],
    "runtime.stackcacherelease": [],
    "runtime.stackcheck": [],
    "runtime.stackfree": [],
    "runtime.stackinit": [],
    "runtime.stacklog2": [
        []
    ],
    "runtime.stackmapdata": [
        [0, 1]
    ],
    "runtime.stackpoolalloc": [
        [0]
    ],
    "runtime.stackpoolfree": [],
    "runtime.startCheckmarks": [],
    "runtime.startPCforTrace": [
        [0]
    ],
    "runtime.startTemplateThread": [],
    "runtime.startTheWorld": [],
    "runtime.startTheWorld$1": [],
    "runtime.startTheWorldGC": [],
    "runtime.startTheWorldWithSema": [
        []
    ],
    "runtime.startTimer": [],
    "runtime.startlockedm": [],
    "runtime.startm": [],
    "runtime.startpanic_m": [
        []
    ],
    "runtime.stealWork": [
        [],
        [],
        [0],
        [],
        []
    ],
    "runtime.step": [
        [0],
        []
    ],
    "runtime.stkbucket": [
        [0, 1, 2]
    ],
    "runtime.stkobjinit": [],
    "runtime.stopTheWorld": [],
    "runtime.stopTheWorld$1": [],
    "runtime.stopTheWorldGC": [],
    "runtime.stopTheWorldWithSema": [],
    "runtime.stopTimer": [
        []
    ],
    "runtime.stoplockedm": [],
    "runtime.stopm": [],
    "runtime.strequal": [
        [0, 1]
    ],
    "runtime.strhash": [
        []
    ],
    "runtime.strhashFallback": [
        [0, 1]
    ],
    "runtime.stringDataOnStack": [
        [0]
    ],
    "runtime.stringHash": [
        []
    ],
    "runtime.stringStructOf": [
        [0]
    ],
    "runtime.stringtoslicebyte": [
        [0, 1]
    ],
    "runtime.stringtoslicerune": [
        [0, 1]
    ],
    "runtime.subtract1": [
        [0]
    ],
    "runtime.subtractb": [
        [0, 1]
    ],
    "runtime.suspendG": [
        [0]
    ],
    "runtime.sweepone": [
        []
    ],
    "runtime.sweepone$1": [],
    "runtime.sync_atomic_CompareAndSwapPointer": [
        []
    ],
    "runtime.sync_atomic_CompareAndSwapUintptr": [
        []
    ],
    "runtime.sync_atomic_StorePointer": [],
    "runtime.sync_atomic_StoreUintptr": [],
    "runtime.sync_atomic_SwapPointer": [
        []
    ],
    "runtime.sync_atomic_SwapUintptr": [
        []
    ],
    "runtime.sync_atomic_runtime_procPin": [
        []
    ],
    "runtime.sync_atomic_runtime_procUnpin": [],
    "runtime.sync_fastrandn": [
        [0]
    ],
    "runtime.sync_nanotime": [
        []
    ],
    "runtime.sync_runtime_Semacquire": [],
    "runtime.sync_runtime_SemacquireMutex": [],
    "runtime.sync_runtime_Semrelease": [],
    "runtime.sync_runtime_canSpin": [
        []
    ],
    "runtime.sync_runtime_doSpin": [],
    "runtime.sync_runtime_procPin": [
        []
    ],
    "runtime.sync_runtime_procUnpin": [],
    "runtime.sync_runtime_registerPoolCleanup": [],
    "runtime.sync_throw": [],
    "runtime.syncadjustsudogs": [
        [1, 2]
    ],
    "runtime.sysAlloc": [
        [0]
    ],
    "runtime.sysFault": [],
    "runtime.sysFree": [],
    "runtime.sysHugePage": [],
    "runtime.sysMap": [],
    "runtime.sysReserve": [
        [0, 1]
    ],
    "runtime.sysReserveAligned": [
        [0, 1, 2],
        [1, 2]
    ],
    "runtime.sysUnused": [],
    "runtime.sysUsed": [],
    "runtime.sysargs": [],
    "runtime.syscall": [],
    "runtime.syscall6": [],
    "runtime.syscall6X": [],
    "runtime.syscallPtr": [],
    "runtime.syscallX": [],
    "runtime.syscall_Exit": [],
    "runtime.syscall_Getpagesize": [
        []
    ],
    "runtime.syscall_cgocaller": [
        [1]
    ],
    "runtime.syscall_rawSyscall": [
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]
    ],
    "runtime.syscall_rawSyscall6": [
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 6]
    ],
    "runtime.syscall_runtime_AfterExec": [],
    "runtime.syscall_runtime_AfterFork": [],
    "runtime.syscall_runtime_AfterForkInChild": [],
    "runtime.syscall_runtime_BeforeExec": [],
    "runtime.syscall_runtime_BeforeFork": [],
    "runtime.syscall_runtime_envs": [
        []
    ],
    "runtime.syscall_setenv_c": [],
    "runtime.syscall_syscall": [
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]
    ],
    "runtime.syscall_syscall6": [
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 6]
    ],
    "runtime.syscall_syscall6X": [
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 6]
    ],
    "runtime.syscall_syscallPtr": [
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]
    ],
    "runtime.syscall_syscallX": [
        [0, 1, 2, 3],
        [0, 1, 2, 3],
        [0, 1, 2, 3]
    ],
    "runtime.syscall_unsetenv_c": [],
    "runtime.syscall_x509": [],
    "runtime.sysctl": [
        []
    ],
    "runtime.sysctl_trampoline": [],
    "runtime.sysctlbyname": [
        []
    ],
    "runtime.sysctlbynameInt32": [
        [],
        []
    ],
    "runtime.sysctlbyname_trampoline": [],
    "runtime.sysmon": [],
    "runtime.systemstack": [],
    "runtime.systemstack_switch": [],
    "runtime.templateThread": [],
    "runtime.testAtomic64": [],
    "runtime.throw": [],
    "runtime.throw$1": [],
    "runtime.tickspersecond": [
        []
    ],
    "runtime.timeHistogramMetricsBuckets": [
        []
    ],
    "runtime.timeSleep": [],
    "runtime.timeSleepUntil": [
        [],
        []
    ],
    "runtime.time_now": [
        [],
        [],
        []
    ],
    "runtime.timediv": [
        []
    ],
    "runtime.tooManyOverflowBuckets": [
        [0, 1]
    ],
    "runtime.tophash": [
        [0]
    ],
    "runtime.traceAcquireBuffer": [
        [],
        [],
        []
    ],
    "runtime.traceAppend": [
        [0, 1]
    ],
    "runtime.traceBufPtrOf": [
        [0]
    ],
    "runtime.traceEvent": [],
    "runtime.traceEventLocked": [],
    "runtime.traceFlush": [
        []
    ],
    "runtime.traceFrameForPC": [
        [2],
        [0]
    ],
    "runtime.traceFullDequeue": [
        []
    ],
    "runtime.traceFullQueue": [],
    "runtime.traceGCDone": [],
    "runtime.traceGCMarkAssistDone": [],
    "runtime.traceGCMarkAssistStart": [],
    "runtime.traceGCSTWDone": [],
    "runtime.traceGCSTWStart": [],
    "runtime.traceGCStart": [],
    "runtime.traceGCSweepDone": [],
    "runtime.traceGCSweepSpan": [],
    "runtime.traceGCSweepStart": [],
    "runtime.traceGoCreate": [],
    "runtime.traceGoEnd": [],
    "runtime.traceGoPark": [],
    "runtime.traceGoPreempt": [],
    "runtime.traceGoSched": [],
    "runtime.traceGoStart": [],
    "runtime.traceGoSysBlock": [],
    "runtime.traceGoSysCall": [],
    "runtime.traceGoSysExit": [],
    "runtime.traceGoUnpark": [],
    "runtime.traceGomaxprocs": [],
    "runtime.traceHeapAlloc": [],
    "runtime.traceHeapGoal": [],
    "runtime.traceProcFree": [],
    "runtime.traceProcStart": [],
    "runtime.traceProcStop": [],
    "runtime.traceReader": [
        []
    ],
    "runtime.traceReleaseBuffer": [],
    "runtime.traceStackID": [
        []
    ],
    "runtime.traceString": [
        [2],
        [0]
    ],
    "runtime.trace_userLog": [],
    "runtime.trace_userRegion": [],
    "runtime.trace_userTaskCreate": [],
    "runtime.trace_userTaskEnd": [],
    "runtime.tracealloc": [],
    "runtime.tracealloc$1": [],
    "runtime.traceback": [],
    "runtime.traceback1": [],
    "runtime.tracebackCgoContext": [
        [3]
    ],
    "runtime.tracebackHexdump": [],
    "runtime.tracebackHexdump$1": [
        []
    ],
    "runtime.tracebackothers": [],
    "runtime.tracebackothers$1": [],
    "runtime.tracebacktrap": [],
    "runtime.tracefree": [],
    "runtime.tracefree$1": [],
    "runtime.tracegc": [],
    "runtime.trygetfull": [
        []
    ],
    "runtime.typeBitsBulkBarrier": [],
    "runtime.typedmemclr": [],
    "runtime.typedmemmove": [],
    "runtime.typedslicecopy": [
        [2, 4]
    ],
    "runtime.typehash": [
        [2]
    ],
    "runtime.typelinksinit": [],
    "runtime.typesEqual": [
        [0, 1]
    ],
    "runtime.unblocksig": [],
    "runtime.unimplemented": [],
    "runtime.unlock": [],
    "runtime.unlock2": [],
    "runtime.unlockOSThread": [],
    "runtime.unlockWithRank": [],
    "runtime.unlockextra": [],
    "runtime.unminit": [],
    "runtime.unminitSignals": [],
    "runtime.unreachableMethod": [],
    "runtime.unsafeslice": [],
    "runtime.unsafeslice64": [],
    "runtime.unsafeslicecheckptr": [],
    "runtime.unspillArgs": [],
    "runtime.unwindm": [],
    "runtime.updateTimer0When": [],
    "runtime.updateTimerModifiedEarliest": [],
    "runtime.updateTimerPMask": [],
    "runtime.updatememstats": [],
    "runtime.usesLibcall": [
        []
    ],
    "runtime.usleep": [],
    "runtime.usleep_no_g": [],
    "runtime.usleep_trampoline": [],
    "runtime.validSIGPROF": [
        []
    ],
    "runtime.verifyTimerHeap": [],
    "runtime.wakeNetPoller": [],
    "runtime.wakeScavenger": [],
    "runtime.wakefing": [
        []
    ],
    "runtime.wakep": [],
    "runtime.walltime": [
        [],
        []
    ],
    "runtime.walltime_trampoline": [],
    "runtime.wantAsyncPreempt": [
        [0]
    ],
    "runtime.wbBufFlush": [],
    "runtime.wbBufFlush$1": [],
    "runtime.wbBufFlush1": [],
    "runtime.wirep": [],
    "runtime.worldStarted": [],
    "runtime.worldStopped": [],
    "runtime.write": [
        []
    ],
    "runtime.write1": [
        []
    ],
    "runtime.writeErr": [],
    "runtime.write_trampoline": [],
    "runtime.writeheapdump_m": [],
    "runtime/internal/atomic.And": [],
    "runtime/internal/atomic.And8": [],
    "runtime/internal/atomic.Cas": [
        []
    ],
    "runtime/internal/atomic.Cas64": [
        []
    ],
    "runtime/internal/atomic.CasRel": [
        []
    ],
    "runtime/internal/atomic.Casint32": [
        []
    ],
    "runtime/internal/atomic.Casint64": [
        []
    ],
    "runtime/internal/atomic.Casp1": [
        []
    ],
    "runtime/internal/atomic.Casuintptr": [
        []
    ],
    "runtime/internal/atomic.Load": [
        [0]
    ],
    "runtime/internal/atomic.Load64": [
        [0]
    ],
    "runtime/internal/atomic.Load8": [
        [0]
    ],
    "runtime/internal/atomic.LoadAcq": [
        [0]
    ],
    "runtime/internal/atomic.LoadAcq64": [
        [0]
    ],
    "runtime/internal/atomic.LoadAcquintptr": [
        [0]
    ],
    "runtime/internal/atomic.Loadint32": [
        []
    ],
    "runtime/internal/atomic.Loadint64": [
        []
    ],
    "runtime/internal/atomic.Loadp": [
        [0]
    ],
    "runtime/internal/atomic.Loaduint": [
        []
    ],
    "runtime/internal/atomic.Loaduintptr": [
        []
    ],
    "runtime/internal/atomic.Or": [],
    "runtime/internal/atomic.Or8": [],
    "runtime/internal/atomic.Store": [],
    "runtime/internal/atomic.Store64": [],
    "runtime/internal/atomic.Store8": [],
    "runtime/internal/atomic.StoreRel": [],
    "runtime/internal/atomic.StoreRel64": [],
    "runtime/internal/atomic.StoreReluintptr": [],
    "runtime/internal/atomic.Storeint32": [],
    "runtime/internal/atomic.Storeint64": [],
    "runtime/internal/atomic.StorepNoWB": [],
    "runtime/internal/atomic.Storeuintptr": [],
    "runtime/internal/atomic.Xadd": [
        []
    ],
    "runtime/internal/atomic.Xadd64": [
        []
    ],
    "runtime/internal/atomic.Xaddint32": [
        []
    ],
    "runtime/internal/atomic.Xaddint64": [
        []
    ],
    "runtime/internal/atomic.Xadduintptr": [
        []
    ],
    "runtime/internal/atomic.Xchg": [
        []
    ],
    "runtime/internal/atomic.Xchg64": [
        []
    ],
    "runtime/internal/atomic.Xchgint32": [
        []
    ],
    "runtime/internal/atomic.Xchgint64": [
        []
    ],
    "runtime/internal/atomic.Xchguintptr": [
        []
    ],
    "runtime/internal/atomic.init": [],
    "runtime/internal/atomic.panicUnaligned": [],
    "runtime/internal/math.Mul64": [
        [0, 1],
        [0, 1]
    ],
    "runtime/internal/math.MulUintptr": [
        [0, 1],
        [0, 1]
    ],
    "runtime/internal/math.init": [],
    "runtime/internal/sys.Bswap32": [
        [0]
    ],
    "runtime/internal/sys.Bswap64": [
        [0]
    ],
    "runtime/internal/sys.Ctz32": [
        [0]
    ],
    "runtime/internal/sys.Ctz64": [
        [0]
    ],
    "runtime/internal/sys.Ctz8": [
        []
    ],
    "runtime/internal/sys.LeadingZeros64": [
        []
    ],
    "runtime/internal/sys.LeadingZeros8": [
        []
    ],
    "runtime/internal/sys.Len64": [
        []
    ],
    "runtime/internal/sys.Len8": [
        []
    ],
    "runtime/internal/sys.OnesCount64": [
        [0]
    ],
    "runtime/internal/sys.Prefetch": [],
    "runtime/internal/sys.PrefetchStreamed": [],
    "runtime/internal/sys.TrailingZeros64": [
        []
    ],
    "runtime/internal/sys.TrailingZeros8": [
        []
    ],
    "runtime/internal/sys.init": [],
    "sort.Float64s": [],
    "sort.Float64sAreSorted": [
        []
    ],
    "sort.Ints": [],
    "sort.IntsAreSorted": [
        []
    ],
    "sort.IsSorted": [
        []
    ],
    "sort.Reverse": [
        [0]
    ],
    "sort.Search": [
        [0]
    ],
    "sort.SearchFloat64s": [
        []
    ],
    "sort.SearchFloat64s$1": [
        []
    ],
    "sort.SearchInts": [
        []
    ],
    "sort.SearchInts$1": [
        []
    ],
    "sort.SearchStrings": [
        []
    ],
    "sort.SearchStrings$1": [
        []
    ],
    "sort.Slice": [],
    "sort.SliceIsSorted": [
        []
    ],
    "sort.SliceStable": [],
    "sort.Sort": [],
    "sort.Stable": [],
    "sort.Strings": [],
    "sort.StringsAreSorted": [
        []
    ],
    "sort.doPivot": [
        [1],
        [2]
    ],
    "sort.doPivot_func": [
        [1],
        [2]
    ],
    "sort.heapSort": [],
    "sort.heapSort_func": [],
    "sort.init": [],
    "sort.insertionSort": [],
    "sort.insertionSort_func": [],
    "sort.isNaN": [
        [0]
    ],
    "sort.maxDepth": [
        []
    ],
    "sort.medianOfThree": [],
    "sort.medianOfThree_func": [],
    "sort.quickSort": [],
    "sort.quickSort_func": [],
    "sort.rotate": [],
    "sort.rotate_func": [],
    "sort.siftDown": [],
    "sort.siftDown_func": [],
    "sort.stable": [],
    "sort.stable_func": [],
    "sort.swapRange": [],
    "sort.swapRange_func": [],
    "sort.symMerge": [],
    "sort.symMerge_func": [],
    "strconv.AppendBool": [
        [0]
    ],
    "strconv.AppendFloat": [
        [0, 1, 2, 3]
    ],
    "strconv.AppendInt": [
        [0, 1, 2]
    ],
    "strconv.AppendQuote": [
        [0, 1]
    ],
    "strconv.AppendQuoteRune": [
        []
    ],
    "strconv.AppendQuoteRuneToASCII": [
        []
    ],
    "strconv.AppendQuoteRuneToGraphic": [
        []
    ],
    "strconv.AppendQuoteToASCII": [
        [0, 1]
    ],
    "strconv.AppendQuoteToGraphic": [
        [0, 1]
    ],
    "strconv.AppendUint": [
        [0, 1, 2]
    ],
    "strconv.Atoi": [
        [0],
        [0]
    ],
    "strconv.CanBackquote": [
        []
    ],
    "strconv.FormatBool": [
        []
    ],
    "strconv.FormatComplex": [
        [1, 2]
    ],
    "strconv.FormatFloat": [
        [0, 1, 2]
    ],
    "strconv.FormatInt": [
        [0, 1]
    ],
    "strconv.FormatUint": [
        [0, 1]
    ],
    "strconv.IsGraphic": [
        [0]
    ],
    "strconv.IsPrint": [
        [0]
    ],
    "strconv.Itoa": [
        [0]
    ],
    "strconv.ParseBool": [
        [],
        [0]
    ],
    "strconv.ParseComplex": [
        [],
        [0]
    ],
    "strconv.ParseFloat": [
        [0],
        [0]
    ],
    "strconv.ParseInt": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "strconv.ParseUint": [
        [0, 1, 2],
        [0, 1, 2]
    ],
    "strconv.Quote": [
        [0]
    ],
    "strconv.QuoteRune": [
        []
    ],
    "strconv.QuoteRuneToASCII": [
        []
    ],
    "strconv.QuoteRuneToGraphic": [
        []
    ],
    "strconv.QuoteToASCII": [
        [0]
    ],
    "strconv.QuoteToGraphic": [
        [0]
    ],
    "strconv.QuotedPrefix": [
        [0],
        []
    ],
    "strconv.Unquote": [
        [0],
        []
    ],
    "strconv.UnquoteChar": [
        [0],
        [],
        [0],
        []
    ],
    "strconv.appendEscapedRune": [
        [0, 1]
    ],
    "strconv.appendQuotedRuneWith": [
        [2]
    ],
    "strconv.appendQuotedWith": [
        [0, 1, 2]
    ],
    "strconv.atof32": [
        [0],
        [],
        [0]
    ],
    "strconv.atof32exact": [
        [0],
        []
    ],
    "strconv.atof64": [
        [0],
        [],
        [0]
    ],
    "strconv.atof64exact": [
        [0],
        []
    ],
    "strconv.atofHex": [
        [1, 2, 3],
        [0]
    ],
    "strconv.baseError": [
        [0, 1, 2]
    ],
    "strconv.bigFtoa": [
        [0, 1, 2]
    ],
    "strconv.bitSizeError": [
        [0, 1, 2]
    ],
    "strconv.bsearch16": [
        []
    ],
    "strconv.bsearch32": [
        []
    ],
    "strconv.commonPrefixLenIgnoreCase": [
        []
    ],
    "strconv.computeBounds": [
        [0],
        [0],
        [0],
        [1]
    ],
    "strconv.contains": [
        []
    ],
    "strconv.convErr": [
        [0],
        [0, 1]
    ],
    "strconv.digitZero": [
        []
    ],
    "strconv.divisibleByPower5": [
        []
    ],
    "strconv.divmod1e9": [
        [0],
        [0]
    ],
    "strconv.eiselLemire32": [
        [0, 1],
        []
    ],
    "strconv.eiselLemire64": [
        [0, 1],
        []
    ],
    "strconv.fmtB": [
        [3, 4]
    ],
    "strconv.fmtE": [
        [2]
    ],
    "strconv.fmtF": [
        [0, 2]
    ],
    "strconv.fmtX": [
        [5]
    ],
    "strconv.formatBits": [
        [0, 1, 2],
        [1, 2]
    ],
    "strconv.formatDecimal": [],
    "strconv.formatDigits": [
        [0, 3, 5]
    ],
    "strconv.genericFtoa": [
        [0, 1, 2, 3]
    ],
    "strconv.index": [
        []
    ],
    "strconv.init": [],
    "strconv.isInGraphicList": [
        [0]
    ],
    "strconv.isPowerOfTwo": [
        [0]
    ],
    "strconv.leftShift": [],
    "strconv.lower": [
        [0]
    ],
    "strconv.max": [
        [0, 1]
    ],
    "strconv.min": [
        [0, 1]
    ],
    "strconv.mulByLog10Log2": [
        [0]
    ],
    "strconv.mulByLog2Log10": [
        [0]
    ],
    "strconv.mult128bitPow10": [
        [0],
        [1, 2],
        [0]
    ],
    "strconv.mult64bitPow10": [
        [0],
        [1, 2],
        [0]
    ],
    "strconv.parseFloatPrefix": [
        [0],
        [],
        [0]
    ],
    "strconv.prefixIsLessThan": [
        [0, 1]
    ],
    "strconv.quoteRuneWith": [
        [1]
    ],
    "strconv.quoteWith": [
        [0, 1]
    ],
    "strconv.rangeError": [
        [0, 1]
    ],
    "strconv.readFloat": [
        [0],
        [0],
        [],
        [],
        [],
        [],
        []
    ],
    "strconv.rightShift": [],
    "strconv.roundShortest": [],
    "strconv.ryuDigits": [],
    "strconv.ryuDigits32": [],
    "strconv.ryuFtoaFixed32": [],
    "strconv.ryuFtoaFixed64": [],
    "strconv.ryuFtoaShortest": [],
    "strconv.shouldRoundUp": [
        [0]
    ],
    "strconv.small": [
        []
    ],
    "strconv.special": [
        [],
        [],
        []
    ],
    "strconv.syntaxError": [
        [0, 1]
    ],
    "strconv.trim": [],
    "strconv.underscoreOK": [
        []
    ],
    "strconv.unhex": [
        [0],
        []
    ],
    "strconv.unquote": [
        [0],
        [0],
        []
    ],
    "sync.NewCond": [
        [0]
    ],
    "sync.fastrandn": [
        []
    ],
    "sync.indexLocal": [
        [0, 1]
    ],
    "sync.init": [],
    "sync.init#1": [],
    "sync.init#2": [],
    "sync.loadPoolChainElt": [
        []
    ],
    "sync.newEntry": [
        [0]
    ],
    "sync.poolCleanup": [],
    "sync.poolRaceAddr": [
        []
    ],
    "sync.runtime_LoadAcquintptr": [
        []
    ],
    "sync.runtime_Semacquire": [],
    "sync.runtime_SemacquireMutex": [],
    "sync.runtime_Semrelease": [],
    "sync.runtime_StoreReluintptr": [
        []
    ],
    "sync.runtime_canSpin": [
        []
    ],
    "sync.runtime_doSpin": [],
    "sync.runtime_nanotime": [
        []
    ],
    "sync.runtime_notifyListAdd": [
        []
    ],
    "sync.runtime_notifyListCheck": [],
    "sync.runtime_notifyListNotifyAll": [],
    "sync.runtime_notifyListNotifyOne": [],
    "sync.runtime_notifyListWait": [],
    "sync.runtime_procPin": [
        []
    ],
    "sync.runtime_procUnpin": [],
    "sync.runtime_registerPoolCleanup": [],
    "sync.storePoolChainElt": [],
    "sync.throw": [],
    "sync/atomic.AddInt32": [
        []
    ],
    "sync/atomic.AddInt64": [
        []
    ],
    "sync/atomic.AddUint32": [
        []
    ],
    "sync/atomic.AddUint64": [
        []
    ],
    "sync/atomic.AddUintptr": [
        []
    ],
    "sync/atomic.CompareAndSwapInt32": [
        []
    ],
    "sync/atomic.CompareAndSwapInt64": [
        []
    ],
    "sync/atomic.CompareAndSwapPointer": [
        []
    ],
    "sync/atomic.CompareAndSwapUint32": [
        []
    ],
    "sync/atomic.CompareAndSwapUint64": [
        []
    ],
    "sync/atomic.CompareAndSwapUintptr": [
        []
    ],
    "sync/atomic.LoadInt32": [
        []
    ],
    "sync/atomic.LoadInt64": [
        []
    ],
    "sync/atomic.LoadPointer": [
        []
    ],
    "sync/atomic.LoadUint32": [
        []
    ],
    "sync/atomic.LoadUint64": [
        []
    ],
    "sync/atomic.LoadUintptr": [
        []
    ],
    "sync/atomic.StoreInt32": [],
    "sync/atomic.StoreInt64": [],
    "sync/atomic.StorePointer": [],
    "sync/atomic.StoreUint32": [],
    "sync/atomic.StoreUint64": [],
    "sync/atomic.StoreUintptr": [],
    "sync/atomic.SwapInt32": [
        []
    ],
    "sync/atomic.SwapInt64": [
        []
    ],
    "sync/atomic.SwapPointer": [
        []
    ],
    "sync/atomic.SwapUint32": [
        []
    ],
    "sync/atomic.SwapUint64": [
        []
    ],
    "sync/atomic.SwapUintptr": [
        []
    ],
    "sync/atomic.init": [],
    "sync/atomic.runtime_procPin": [],
    "sync/atomic.runtime_procUnpin": [],
    "syscall.Accept": [
        [],
        [],
        []
    ],
    "syscall.Access": [
        []
    ],
    "syscall.Adjtime": [
        []
    ],
    "syscall.Bind": [
        []
    ],
    "syscall.BpfBuflen": [
        [],
        []
    ],
    "syscall.BpfDatalink": [
        [],
        []
    ],
    "syscall.BpfHeadercmpl": [
        [],
        []
    ],
    "syscall.BpfInterface": [
        [1],
        []
    ],
    "syscall.BpfJump": [
        [0, 1, 2, 3]
    ],
    "syscall.BpfStats": [
        [],
        []
    ],
    "syscall.BpfStmt": [
        [0, 1]
    ],
    "syscall.BpfTimeout": [
        [],
        []
    ],
    "syscall.BytePtrFromString": [
        [0],
        []
    ],
    "syscall.ByteSliceFromString": [
        [0],
        []
    ],
    "syscall.Chdir": [
        []
    ],
    "syscall.CheckBpfVersion": [
        []
    ],
    "syscall.Chflags": [
        []
    ],
    "syscall.Chmod": [
        []
    ],
    "syscall.Chown": [
        []
    ],
    "syscall.Chroot": [
        []
    ],
    "syscall.Clearenv": [],
    "syscall.Close": [
        []
    ],
    "syscall.CloseOnExec": [],
    "syscall.CmsgLen": [
        [0]
    ],
    "syscall.CmsgSpace": [
        [0]
    ],
    "syscall.Connect": [
        []
    ],
    "syscall.Dup": [
        [],
        []
    ],
    "syscall.Dup2": [
        []
    ],
    "syscall.Environ": [
        []
    ],
    "syscall.Exchangedata": [
        []
    ],
    "syscall.Exec": [
        []
    ],
    "syscall.Exit": [],
    "syscall.Fchdir": [
        []
    ],
    "syscall.Fchflags": [
        []
    ],
    "syscall.Fchmod": [
        []
    ],
    "syscall.Fchown": [
        []
    ],
    "syscall.FcntlFlock": [
        []
    ],
    "syscall.Flock": [
        []
    ],
    "syscall.FlushBpf": [
        []
    ],
    "syscall.ForkExec": [
        [],
        []
    ],
    "syscall.Fpathconf": [
        [],
        []
    ],
    "syscall.Fstat": [
        []
    ],
    "syscall.Fstatfs": [
        []
    ],
    "syscall.Fsync": [
        []
    ],
    "syscall.Ftruncate": [
        []
    ],
    "syscall.Futimes": [
        []
    ],
    "syscall.Getdirentries": [
        [],
        []
    ],
    "syscall.Getdtablesize": [
        []
    ],
    "syscall.Getegid": [
        []
    ],
    "syscall.Getenv": [
        [],
        []
    ],
    "syscall.Geteuid": [
        []
    ],
    "syscall.Getfsstat": [
        [],
        []
    ],
    "syscall.Getgid": [
        []
    ],
    "syscall.Getgroups": [
        [],
        []
    ],
    "syscall.Getpagesize": [
        []
    ],
    "syscall.Getpeername": [
        [],
        []
    ],
    "syscall.Getpgid": [
        [],
        []
    ],
    "syscall.Getpgrp": [
        []
    ],
    "syscall.Getpid": [
        []
    ],
    "syscall.Getppid": [
        []
    ],
    "syscall.Getpriority": [
        [],
        []
    ],
    "syscall.Getrlimit": [
        []
    ],
    "syscall.Getrusage": [
        []
    ],
    "syscall.Getsid": [
        [],
        []
    ],
    "syscall.Getsockname": [
        [],
        []
    ],
    "syscall.GetsockoptByte": [
        [],
        []
    ],
    "syscall.GetsockoptICMPv6Filter": [
        [],
        []
    ],
    "syscall.GetsockoptIPMreq": [
        [],
        []
    ],
    "syscall.GetsockoptIPv6MTUInfo": [
        [],
        []
    ],
    "syscall.GetsockoptIPv6Mreq": [
        [],
        []
    ],
    "syscall.GetsockoptInet4Addr": [
        [],
        []
    ],
    "syscall.GetsockoptInt": [
        [],
        []
    ],
    "syscall.Gettimeofday": [
        []
    ],
    "syscall.Getuid": [
        []
    ],
    "syscall.Getwd": [
        [],
        []
    ],
    "syscall.Issetugid": [
        []
    ],
    "syscall.Kevent": [
        [],
        []
    ],
    "syscall.Kill": [
        []
    ],
    "syscall.Kqueue": [
        [],
        []
    ],
    "syscall.Lchown": [
        []
    ],
    "syscall.Link": [
        []
    ],
    "syscall.Listen": [
        []
    ],
    "syscall.Lstat": [
        []
    ],
    "syscall.Mkdir": [
        []
    ],
    "syscall.Mkfifo": [
        []
    ],
    "syscall.Mknod": [
        []
    ],
    "syscall.Mlock": [
        []
    ],
    "syscall.Mlockall": [
        []
    ],
    "syscall.Mmap": [
        [],
        []
    ],
    "syscall.Mprotect": [
        []
    ],
    "syscall.Munlock": [
        []
    ],
    "syscall.Munlockall": [
        []
    ],
    "syscall.Munmap": [
        []
    ],
    "syscall.NsecToTimespec": [
        [0]
    ],
    "syscall.NsecToTimeval": [
        [0]
    ],
    "syscall.Open": [
        [],
        []
    ],
    "syscall.ParseDirent": [
        [],
        [],
        [0, 2]
    ],
    "syscall.ParseRoutingMessage": [
        [0],
        []
    ],
    "syscall.ParseRoutingSockaddr": [
        [],
        []
    ],
    "syscall.ParseSocketControlMessage": [
        [0],
        []
    ],
    "syscall.ParseUnixRights": [
        [0],
        []
    ],
    "syscall.Pathconf": [
        [],
        []
    ],
    "syscall.Pipe": [
        []
    ],
    "syscall.Pread": [
        [],
        []
    ],
    "syscall.PtraceAttach": [
        []
    ],
    "syscall.PtraceDetach": [
        []
    ],
    "syscall.Pwrite": [
        [],
        []
    ],
    "syscall.RawSyscall": [
        [],
        [],
        []
    ],
    "syscall.RawSyscall6": [
        [],
        [],
        []
    ],
    "syscall.Read": [
        [],
        []
    ],
    "syscall.ReadDirent": [
        [],
        []
    ],
    "syscall.Readlink": [
        [],
        []
    ],
    "syscall.Recvfrom": [
        [],
        [],
        []
    ],
    "syscall.Recvmsg": [
        [],
        [1, 2],
        [1, 2],
        [],
        []
    ],
    "syscall.Rename": [
        []
    ],
    "syscall.Revoke": [
        []
    ],
    "syscall.Rmdir": [
        []
    ],
    "syscall.RouteRIB": [
        [],
        []
    ],
    "syscall.Seek": [
        [],
        []
    ],
    "syscall.Select": [
        []
    ],
    "syscall.Sendfile": [
        [3],
        []
    ],
    "syscall.Sendmsg": [
        []
    ],
    "syscall.SendmsgN": [
        [],
        []
    ],
    "syscall.Sendto": [
        []
    ],
    "syscall.SetBpf": [
        []
    ],
    "syscall.SetBpfBuflen": [
        [1],
        []
    ],
    "syscall.SetBpfDatalink": [
        [1],
        []
    ],
    "syscall.SetBpfHeadercmpl": [
        []
    ],
    "syscall.SetBpfImmediate": [
        []
    ],
    "syscall.SetBpfInterface": [
        []
    ],
    "syscall.SetBpfPromisc": [
        []
    ],
    "syscall.SetBpfTimeout": [
        []
    ],
    "syscall.SetKevent": [],
    "syscall.SetNonblock": [
        []
    ],
    "syscall.Setegid": [
        []
    ],
    "syscall.Setenv": [
        []
    ],
    "syscall.Seteuid": [
        []
    ],
    "syscall.Setgid": [
        []
    ],
    "syscall.Setgroups": [
        []
    ],
    "syscall.Setlogin": [
        []
    ],
    "syscall.Setpgid": [
        []
    ],
    "syscall.Setpriority": [
        []
    ],
    "syscall.Setprivexec": [
        []
    ],
    "syscall.Setregid": [
        []
    ],
    "syscall.Setreuid": [
        []
    ],
    "syscall.Setrlimit": [
        []
    ],
    "syscall.Setsid": [
        [],
        []
    ],
    "syscall.SetsockoptByte": [
        []
    ],
    "syscall.SetsockoptICMPv6Filter": [
        []
    ],
    "syscall.SetsockoptIPMreq": [
        []
    ],
    "syscall.SetsockoptIPv6Mreq": [
        []
    ],
    "syscall.SetsockoptInet4Addr": [
        []
    ],
    "syscall.SetsockoptInt": [
        []
    ],
    "syscall.SetsockoptLinger": [
        []
    ],
    "syscall.SetsockoptString": [
        []
    ],
    "syscall.SetsockoptTimeval": [
        []
    ],
    "syscall.Settimeofday": [
        []
    ],
    "syscall.Setuid": [
        []
    ],
    "syscall.Shutdown": [
        []
    ],
    "syscall.SlicePtrFromStrings": [
        [],
        []
    ],
    "syscall.Socket": [
        [],
        []
    ],
    "syscall.Socketpair": [
        [],
        []
    ],
    "syscall.StartProcess": [
        [],
        [],
        []
    ],
    "syscall.Stat": [
        []
    ],
    "syscall.Statfs": [
        []
    ],
    "syscall.StringBytePtr": [
        [0]
    ],
    "syscall.StringByteSlice": [
        [0]
    ],
    "syscall.StringSlicePtr": [
        [0]
    ],
    "syscall.Symlink": [
        []
    ],
    "syscall.Sync": [
        []
    ],
    "syscall.Syscall": [
        [],
        [],
        []
    ],
    "syscall.Syscall6": [
        [],
        [],
        []
    ],
    "syscall.Syscall9": [
        [],
        [],
        []
    ],
    "syscall.Sysctl": [
        [],
        []
    ],
    "syscall.SysctlUint32": [
        [],
        []
    ],
    "syscall.TimespecToNsec": [
        [0]
    ],
    "syscall.TimevalToNsec": [
        [0]
    ],
    "syscall.Truncate": [
        []
    ],
    "syscall.Umask": [
        []
    ],
    "syscall.Undelete": [
        []
    ],
    "syscall.UnixRights": [
        []
    ],
    "syscall.Unlink": [
        []
    ],
    "syscall.Unmount": [
        []
    ],
    "syscall.Unsetenv": [
        []
    ],
    "syscall.Utimes": [
        []
    ],
    "syscall.UtimesNano": [
        []
    ],
    "syscall.Wait4": [
        [],
        []
    ],
    "syscall.Write": [
        [],
        []
    ],
    "syscall.accept": [
        [],
        []
    ],
    "syscall.anyToSockaddr": [
        [0],
        []
    ],
    "syscall.asanRead": [],
    "syscall.asanWrite": [],
    "syscall.bind": [
        []
    ],
    "syscall.clen": [
        []
    ],
    "syscall.closedir": [
        []
    ],
    "syscall.cmsgAlignOf": [
        [0]
    ],
    "syscall.connect": [
        []
    ],
    "syscall.copyenv": [],
    "syscall.direntIno": [
        [0],
        []
    ],
    "syscall.direntNamlen": [
        [0],
        []
    ],
    "syscall.direntReclen": [
        [0],
        []
    ],
    "syscall.errnoErr": [
        [0]
    ],
    "syscall.execve": [
        []
    ],
    "syscall.exit": [
        []
    ],
    "syscall.faketimeWrite": [
        []
    ],
    "syscall.fcntl": [
        [],
        []
    ],
    "syscall.fcntlPtr": [
        [],
        []
    ],
    "syscall.fdopendir": [
        [],
        []
    ],
    "syscall.fork": [
        [],
        []
    ],
    "syscall.forkAndExecInChild": [
        [],
        []
    ],
    "syscall.forkExec": [
        [],
        []
    ],
    "syscall.forkExecPipe": [
        []
    ],
    "syscall.fstatat": [
        []
    ],
    "syscall.futimes": [
        []
    ],
    "syscall.getcwd": [
        [],
        []
    ],
    "syscall.getgroups": [
        [],
        []
    ],
    "syscall.getpeername": [
        []
    ],
    "syscall.getsockname": [
        []
    ],
    "syscall.getsockopt": [
        []
    ],
    "syscall.init": [],
    "syscall.init#1": [],
    "syscall.ioctl": [
        []
    ],
    "syscall.ioctlPtr": [
        []
    ],
    "syscall.kevent": [
        [],
        []
    ],
    "syscall.kill": [
        []
    ],
    "syscall.libc_accept_trampoline": [],
    "syscall.libc_access_trampoline": [],
    "syscall.libc_adjtime_trampoline": [],
    "syscall.libc_bind_trampoline": [],
    "syscall.libc_chdir_trampoline": [],
    "syscall.libc_chflags_trampoline": [],
    "syscall.libc_chmod_trampoline": [],
    "syscall.libc_chown_trampoline": [],
    "syscall.libc_chroot_trampoline": [],
    "syscall.libc_close_trampoline": [],
    "syscall.libc_closedir_trampoline": [],
    "syscall.libc_connect_trampoline": [],
    "syscall.libc_dup2_trampoline": [],
    "syscall.libc_dup_trampoline": [],
    "syscall.libc_exchangedata_trampoline": [],
    "syscall.libc_execve_trampoline": [],
    "syscall.libc_exit_trampoline": [],
    "syscall.libc_fchdir_trampoline": [],
    "syscall.libc_fchflags_trampoline": [],
    "syscall.libc_fchmod_trampoline": [],
    "syscall.libc_fchown_trampoline": [],
    "syscall.libc_fcntl_trampoline": [],
    "syscall.libc_fdopendir_trampoline": [],
    "syscall.libc_flock_trampoline": [],
    "syscall.libc_fork_trampoline": [],
    "syscall.libc_fpathconf_trampoline": [],
    "syscall.libc_fstat64_trampoline": [],
    "syscall.libc_fstatat64_trampoline": [],
    "syscall.libc_fstatfs64_trampoline": [],
    "syscall.libc_fsync_trampoline": [],
    "syscall.libc_ftruncate_trampoline": [],
    "syscall.libc_futimes_trampoline": [],
    "syscall.libc_getcwd_trampoline": [],
    "syscall.libc_getdtablesize_trampoline": [],
    "syscall.libc_getegid_trampoline": [],
    "syscall.libc_geteuid_trampoline": [],
    "syscall.libc_getfsstat_trampoline": [],
    "syscall.libc_getgid_trampoline": [],
    "syscall.libc_getgroups_trampoline": [],
    "syscall.libc_getpeername_trampoline": [],
    "syscall.libc_getpgid_trampoline": [],
    "syscall.libc_getpgrp_trampoline": [],
    "syscall.libc_getpid_trampoline": [],
    "syscall.libc_getppid_trampoline": [],
    "syscall.libc_getpriority_trampoline": [],
    "syscall.libc_getrlimit_trampoline": [],
    "syscall.libc_getrusage_trampoline": [],
    "syscall.libc_getsid_trampoline": [],
    "syscall.libc_getsockname_trampoline": [],
    "syscall.libc_getsockopt_trampoline": [],
    "syscall.libc_gettimeofday_trampoline": [],
    "syscall.libc_getuid_trampoline": [],
    "syscall.libc_ioctl_trampoline": [],
    "syscall.libc_issetugid_trampoline": [],
    "syscall.libc_kevent_trampoline": [],
    "syscall.libc_kill_trampoline": [],
    "syscall.libc_kqueue_trampoline": [],
    "syscall.libc_lchown_trampoline": [],
    "syscall.libc_link_trampoline": [],
    "syscall.libc_listen_trampoline": [],
    "syscall.libc_lseek_trampoline": [],
    "syscall.libc_lstat64_trampoline": [],
    "syscall.libc_mkdir_trampoline": [],
    "syscall.libc_mkfifo_trampoline": [],
    "syscall.libc_mknod_trampoline": [],
    "syscall.libc_mlock_trampoline": [],
    "syscall.libc_mlockall_trampoline": [],
    "syscall.libc_mmap_trampoline": [],
    "syscall.libc_mprotect_trampoline": [],
    "syscall.libc_munlock_trampoline": [],
    "syscall.libc_munlockall_trampoline": [],
    "syscall.libc_munmap_trampoline": [],
    "syscall.libc_open_trampoline": [],
    "syscall.libc_openat_trampoline": [],
    "syscall.libc_pathconf_trampoline": [],
    "syscall.libc_pipe_trampoline": [],
    "syscall.libc_pread_trampoline": [],
    "syscall.libc_ptrace_trampoline": [],
    "syscall.libc_pwrite_trampoline": [],
    "syscall.libc_read_trampoline": [],
    "syscall.libc_readdir_r_trampoline": [],
    "syscall.libc_readlink_trampoline": [],
    "syscall.libc_recvfrom_trampoline": [],
    "syscall.libc_recvmsg_trampoline": [],
    "syscall.libc_rename_trampoline": [],
    "syscall.libc_revoke_trampoline": [],
    "syscall.libc_rmdir_trampoline": [],
    "syscall.libc_select_trampoline": [],
    "syscall.libc_sendfile_trampoline": [],
    "syscall.libc_sendmsg_trampoline": [],
    "syscall.libc_sendto_trampoline": [],
    "syscall.libc_setegid_trampoline": [],
    "syscall.libc_seteuid_trampoline": [],
    "syscall.libc_setgid_trampoline": [],
    "syscall.libc_setgroups_trampoline": [],
    "syscall.libc_setlogin_trampoline": [],
    "syscall.libc_setpgid_trampoline": [],
    "syscall.libc_setpriority_trampoline": [],
    "syscall.libc_setprivexec_trampoline": [],
    "syscall.libc_setregid_trampoline": [],
    "syscall.libc_setreuid_trampoline": [],
    "syscall.libc_setrlimit_trampoline": [],
    "syscall.libc_setsid_trampoline": [],
    "syscall.libc_setsockopt_trampoline": [],
    "syscall.libc_settimeofday_trampoline": [],
    "syscall.libc_setuid_trampoline": [],
    "syscall.libc_shutdown_trampoline": [],
    "syscall.libc_socket_trampoline": [],
    "syscall.libc_socketpair_trampoline": [],
    "syscall.libc_stat64_trampoline": [],
    "syscall.libc_statfs64_trampoline": [],
    "syscall.libc_symlink_trampoline": [],
    "syscall.libc_sync_trampoline": [],
    "syscall.libc_sysctl_trampoline": [],
    "syscall.libc_truncate_trampoline": [],
    "syscall.libc_umask_trampoline": [],
    "syscall.libc_undelete_trampoline": [],
    "syscall.libc_unlink_trampoline": [],
    "syscall.libc_unlinkat_trampoline": [],
    "syscall.libc_unmount_trampoline": [],
    "syscall.libc_utimensat_trampoline": [],
    "syscall.libc_utimes_trampoline": [],
    "syscall.libc_wait4_trampoline": [],
    "syscall.libc_write_trampoline": [],
    "syscall.libc_writev_trampoline": [],
    "syscall.mmap": [
        [],
        []
    ],
    "syscall.msanRead": [],
    "syscall.msanWrite": [],
    "syscall.munmap": [
        []
    ],
    "syscall.nametomib": [
        [],
        []
    ],
    "syscall.openat": [
        [],
        []
    ],
    "syscall.parseLinkLayerAddr": [
        [0],
        [0],
        []
    ],
    "syscall.parseNetworkLayerAddr": [
        [],
        []
    ],
    "syscall.parseSockaddrInet": [
        [0],
        []
    ],
    "syscall.parseSockaddrLink": [
        [0],
        []
    ],
    "syscall.pipe": [
        []
    ],
    "syscall.ptrace": [
        []
    ],
    "syscall.ptrace1": [
        []
    ],
    "syscall.rawSyscall": [
        [],
        [],
        []
    ],
    "syscall.rawSyscall6": [
        [],
        [],
        []
    ],
    "syscall.read": [
        [],
        []
    ],
    "syscall.readInt": [
        [0],
        []
    ],
    "syscall.readIntBE": [
        [0]
    ],
    "syscall.readIntLE": [
        [0]
    ],
    "syscall.readdir_r": [
        []
    ],
    "syscall.readlen": [
        [],
        []
    ],
    "syscall.recvfrom": [
        [],
        []
    ],
    "syscall.recvfromInet4": [
        [],
        []
    ],
    "syscall.recvfromInet6": [
        [],
        []
    ],
    "syscall.recvmsg": [
        [],
        []
    ],
    "syscall.recvmsgInet4": [
        [],
        [1, 2],
        [1, 2],
        []
    ],
    "syscall.recvmsgInet6": [
        [],
        [1, 2],
        [1, 2],
        []
    ],
    "syscall.recvmsgRaw": [
        [],
        [1, 2, 4],
        [1, 2, 4],
        []
    ],
    "syscall.rsaAlignOf": [
        [0]
    ],
    "syscall.runtime_AfterExec": [],
    "syscall.runtime_AfterFork": [],
    "syscall.runtime_AfterForkInChild": [],
    "syscall.runtime_BeforeExec": [],
    "syscall.runtime_BeforeFork": [],
    "syscall.runtime_envs": [
        []
    ],
    "syscall.sendfile": [
        [3],
        []
    ],
    "syscall.sendmsg": [
        [],
        []
    ],
    "syscall.sendmsgN": [
        [],
        []
    ],
    "syscall.sendmsgNInet4": [
        [],
        []
    ],
    "syscall.sendmsgNInet6": [
        [],
        []
    ],
    "syscall.sendto": [
        []
    ],
    "syscall.sendtoInet4": [
        []
    ],
    "syscall.sendtoInet6": [
        []
    ],
    "syscall.setTimespec": [
        [0, 1]
    ],
    "syscall.setTimeval": [
        [0, 1]
    ],
    "syscall.setenv_c": [],
    "syscall.setgroups": [
        []
    ],
    "syscall.setsockopt": [
        []
    ],
    "syscall.socket": [
        [],
        []
    ],
    "syscall.socketControlMessageHeaderAndData": [
        [0],
        [0],
        []
    ],
    "syscall.socketpair": [
        []
    ],
    "syscall.syscall": [
        [],
        [],
        []
    ],
    "syscall.syscall6": [
        [],
        [],
        []
    ],
    "syscall.syscall6X": [
        [],
        [],
        []
    ],
    "syscall.syscallPtr": [
        [],
        [],
        []
    ],
    "syscall.syscallX": [
        [],
        [],
        []
    ],
    "syscall.sysctl": [
        []
    ],
    "syscall.unlinkat": [
        []
    ],
    "syscall.unsetenv_c": [],
    "syscall.utimensat": [
        []
    ],
    "syscall.utimes": [
        []
    ],
    "syscall.wait4": [
        [],
        []
    ],
    "syscall.write": [
        [],
        []
    ],
    "syscall.writelen": [
        [],
        []
    ],
    "syscall.writev": [
        [],
        []
    ],
    "time.After": [
        [0]
    ],
    "time.AfterFunc": [
        [0, 1]
    ],
    "time.Date": [
        [0, 1, 2, 3, 4, 5, 6, 7]
    ],
    "time.FixedZone": [
        [0]
    ],
    "time.LoadLocation": [
        [0],
        [0]
    ],
    "time.LoadLocation$1": [],
    "time.LoadLocationFromTZData": [
        [0, 1],
        []
    ],
    "time.NewTicker": [
        [0]
    ],
    "time.NewTimer": [
        [0]
    ],
    "time.Now": [
        []
    ],
    "time.Parse": [
        [1],
        [0, 1]
    ],
    "time.ParseDuration": [
        [0],
        [0]
    ],
    "time.ParseInLocation": [
        [1, 2],
        [0, 1]
    ],
    "time.Since": [
        [0]
    ],
    "time.Sleep": [],
    "time.Tick": [
        [0]
    ],
    "time.Unix": [
        [0, 1]
    ],
    "time.UnixMicro": [
        [0]
    ],
    "time.UnixMilli": [
        [0]
    ],
    "time.Until": [
        [0]
    ],
    "time.absClock": [
        [0],
        [0],
        [0]
    ],
    "time.absDate": [
        [0],
        [0],
        [0],
        [0]
    ],
    "time.absWeekday": [
        [0]
    ],
    "time.appendInt": [
        [0, 1]
    ],
    "time.atoi": [
        [0],
        []
    ],
    "time.byteString": [
        [0]
    ],
    "time.closefd": [],
    "time.commaOrPeriod": [
        [0]
    ],
    "time.containsDotDot": [
        []
    ],
    "time.cutspace": [
        [0]
    ],
    "time.daysIn": [
        []
    ],
    "time.daysSinceEpoch": [
        [0]
    ],
    "time.digitsLen": [
        [0]
    ],
    "time.div": [
        [0, 1],
        [0, 1]
    ],
    "time.findZone": [
        []
    ],
    "time.fmtFrac": [
        [],
        [1]
    ],
    "time.fmtInt": [
        []
    ],
    "time.formatNano": [
        [0, 1]
    ],
    "time.get2": [
        [0]
    ],
    "time.get4": [
        [0]
    ],
    "time.getnum": [
        [0],
        [0],
        []
    ],
    "time.getnum3": [
        [0],
        [0],
        []
    ],
    "time.goFunc": [],
    "time.init": [],
    "time.initLocal": [],
    "time.interrupt": [],
    "time.isDigit": [
        [0, 1]
    ],
    "time.isLeap": [
        [0]
    ],
    "time.leadingFraction": [
        [0],
        [],
        [0]
    ],
    "time.leadingInt": [
        [0],
        [0],
        []
    ],
    "time.lessThanHalf": [
        [0, 1]
    ],
    "time.loadLocation": [
        [0],
        [0, 1]
    ],
    "time.loadTzinfo": [
        [],
        [0, 1]
    ],
    "time.loadTzinfoFromDirOrZip": [
        [],
        [0, 1]
    ],
    "time.loadTzinfoFromZip": [
        [],
        [0, 1]
    ],
    "time.lookup": [
        [],
        [1],
        []
    ],
    "time.match": [
        []
    ],
    "time.modTimer": [],
    "time.nextStdChunk": [
        [0],
        [],
        [0]
    ],
    "time.norm": [
        [0, 1, 2],
        [1, 2]
    ],
    "time.now": [
        [],
        [],
        []
    ],
    "time.open": [
        [],
        []
    ],
    "time.parse": [
        [1, 2, 3],
        [0, 1]
    ],
    "time.parseGMT": [
        []
    ],
    "time.parseNanoseconds": [
        [0],
        [],
        []
    ],
    "time.parseSignedOffset": [
        []
    ],
    "time.parseTimeZone": [
        [],
        []
    ],
    "time.preadn": [
        []
    ],
    "time.quote": [
        [0]
    ],
    "time.read": [
        [],
        []
    ],
    "time.readFile": [
        [],
        [0]
    ],
    "time.registerLoadFromEmbeddedTZData": [],
    "time.resetTimer": [
        []
    ],
    "time.runtimeNano": [
        []
    ],
    "time.sendTime": [],
    "time.separator": [
        []
    ],
    "time.skip": [
        [0],
        []
    ],
    "time.startTimer": [],
    "time.startsWithLowerCase": [
        [0]
    ],
    "time.stdFracSecond": [
        [0, 1]
    ],
    "time.stopTimer": [
        []
    ],
    "time.tzruleTime": [
        [0, 1, 2]
    ],
    "time.tzset": [
        [0],
        [0],
        [0, 1, 2],
        [0, 2],
        [],
        []
    ],
    "time.tzsetName": [
        [0],
        [0],
        []
    ],
    "time.tzsetNum": [
        [0],
        [0],
        []
    ],
    "time.tzsetOffset": [
        [0],
        [0],
        []
    ],
    "time.tzsetRule": [
        [0],
        [0],
        []
    ],
    "time.unixTime": [
        [0, 1]
    ],
    "time.when": [
        [0]
    ],
    "unicode.In": [
        []
    ],
    "unicode.Is": [
        [0, 1]
    ],
    "unicode.IsControl": [
        []
    ],
    "unicode.IsDigit": [
        [0]
    ],
    "unicode.IsGraphic": [
        []
    ],
    "unicode.IsLetter": [
        [0]
    ],
    "unicode.IsLower": [
        [0]
    ],
    "unicode.IsMark": [
        [0]
    ],
    "unicode.IsNumber": [
        [0]
    ],
    "unicode.IsOneOf": [
        []
    ],
    "unicode.IsPrint": [
        []
    ],
    "unicode.IsPunct": [
        [0]
    ],
    "unicode.IsSpace": [
        [0]
    ],
    "unicode.IsSymbol": [
        [0]
    ],
    "unicode.IsTitle": [
        [0]
    ],
    "unicode.IsUpper": [
        [0]
    ],
    "unicode.SimpleFold": [
        [0]
    ],
    "unicode.To": [
        [0, 1]
    ],
    "unicode.ToLower": [
        [0]
    ],
    "unicode.ToTitle": [
        [0]
    ],
    "unicode.ToUpper": [
        [0]
    ],
    "unicode.init": [],
    "unicode.is16": [
        [0, 1]
    ],
    "unicode.is32": [
        [0, 1]
    ],
    "unicode.isExcludingLatin": [
        [0, 1]
    ],
    "unicode.to": [
        [0, 1, 2],
        []
    ],
    "unicode/utf8.AppendRune": [
        [0, 1]
    ],
    "unicode/utf8.DecodeLastRune": [
        [0],
        []
    ],
    "unicode/utf8.DecodeLastRuneInString": [
        [0],
        []
    ],
    "unicode/utf8.DecodeRune": [
        [0],
        []
    ],
    "unicode/utf8.DecodeRuneInString": [
        [0],
        []
    ],
    "unicode/utf8.EncodeRune": [
        []
    ],
    "unicode/utf8.FullRune": [
        []
    ],
    "unicode/utf8.FullRuneInString": [
        []
    ],
    "unicode/utf8.RuneCount": [
        []
    ],
    "unicode/utf8.RuneCountInString": [
        []
    ],
    "unicode/utf8.RuneLen": [
        []
    ],
    "unicode/utf8.RuneStart": [
        [0]
    ],
    "unicode/utf8.Valid": [
        []
    ],
    "unicode/utf8.ValidRune": [
        []
    ],
    "unicode/utf8.ValidString": [
        []
    ],
    "unicode/utf8.appendRuneNonASCII": [
        [0, 1]
    ],
    "unicode/utf8.init": [],
    "unsafe.init": []
}